
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;19;12m [0m[48;2;0;71;47m.[0m[48;2;0;120;79m-[0m[48;2;0;165;109m=[0m[48;2;0;168;111m=[0m[48;2;0;153;101m-[0m[48;2;0;141;93m-[0m[48;2;0;162;107m=[0m[48;2;0;178;119m=[0m[48;2;0;168;113m=[0m[48;2;0;127;85m-[0m[48;2;0;85;58m:[0m[48;2;0;31;21m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;16;10m [0m[48;2;0;106;70m:[0m[48;2;0;169;111m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;98;64m:[0m[48;2;0;31;20m [0m[48;2;0;34;22m [0m[48;2;0;78;52m:[0m[48;2;0;25;17m [0m[48;2;0;46;30m.[0m[48;2;0;131;88m-[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;1;177;122m=[0m[48;2;1;114;79m:[0m[48;2;0;13;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;35;23m [0m[48;2;0;164;108m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;181;119m=[0m[48;2;0;54;35m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;23;15m [0m[48;2;0;75;50m.[0m[48;2;0;8;5m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;67;45m.[0m[48;2;1;137;94m-[0m[48;2;2;181;126m=[0m[48;2;3;182;128m=[0m[48;2;2;147;104m-[0m[48;2;0;8;6m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;1;0m [0m[48;2;0;18;12m [0m[48;2;0;167;110m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;157;104m=[0m[48;2;0;40;26m.[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;53;36m.[0m[48;2;2;126;88m-[0m[48;2;2;179;125m=[0m[48;2;2;177;125m=[0m[48;2;4;181;129m=[0m[48;2;1;76;55m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;122;80m-[0m[48;2;0;188;124m=[0m[48;2;0;169;111m=[0m[48;2;0;82;54m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;62;43m.[0m[48;2;3;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;3;178;126m=[0m[48;2;3;178;128m=[0m[48;2;3;116;84m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;9m [0m[48;2;1;31;24m [0m[48;2;2;42;34m.[0m[48;2;3;52;42m.[0m[48;2;3;49;41m.[0m[48;2;2;28;24m [0m[48;2;0;0;0m [0m[48;2;2;29;25m [0m[48;2;2;34;30m [0m[48;2;2;33;29m [0m[48;2;3;33;30m [0m[48;2;3;33;30m [0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;4;32;31m [0m[48;2;4;32;32m [0m[48;2;4;32;32m [0m[48;2;4;31;31m [0m[48;2;4;31;32m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;2;15;16m [0m[48;2;5;32;35m [0m[48;2;6;39;43m.[0m[48;2;6;35;39m.[0m[48;2;3;22;24m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;5;6m [0m[48;2;4;19;24m [0m[48;2;6;30;38m [0m[48;2;8;38;48m.[0m[48;2;8;38;49m.[0m[48;2;6;27;35m [0m[48;2;0;0;0m [0m[48;2;3;14;19m [0m[48;2;5;25;34m [0m[48;2;5;25;33m [0m[48;2;5;25;33m [0m[48;2;5;24;33m [0m[48;2;5;23;32m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;11;16m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;3;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;2;16;23m [0m[48;2;2;19;27m [0m[48;2;1;11;15m [0m[48;2;0;0;0m [0m[48;2;1;13;18m [0m[48;2;2;20;29m [0m[48;2;1;19;26m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;20m [0m[48;2;0;17;25m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;16;23m [0m
[48;2;0;0;0m [0m[48;2;0;30;20m [0m[48;2;0;188;124m=[0m[48;2;0;91;60m:[0m[48;2;0;14;9m [0m[48;2;0;38;25m [0m[48;2;0;126;83m-[0m[48;2;0;53;35m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;38;26m.[0m[48;2;2;177;124m=[0m[48;2;2;179;126m=[0m[48;2;3;180;128m=[0m[48;2;3;177;127m=[0m[48;2;4;178;130m=[0m[48;2;3;109;80m:[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;0;10;8m [0m[48;2;3;71;55m.[0m[48;2;6;126;99m-[0m[48;2;8;157;125m=[0m[48;2;10;171;138m=[0m[48;2;10;170;139m=[0m[48;2;11;169;139m=[0m[48;2;9;150;125m=[0m[48;2;10;151;128m=[0m[48;2;9;122;104m-[0m[48;2;12;159;138m=[0m[48;2;14;164;144m=[0m[48;2;15;162;145m=[0m[48;2;15;162;145m=[0m[48;2;16;160;146m=[0m[48;2;7;79;73m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;8;70;68m:[0m[48;2;19;154;151m=[0m[48;2;20;152;152m=[0m[48;2;20;151;153m=[0m[48;2;21;150;154m=[0m[48;2;21;149;154m=[0m[48;2;14;99;104m:[0m[48;2;19;124;132m-[0m[48;2;23;146;157m=[0m[48;2;23;145;157m=[0m[48;2;24;144;158m=[0m[48;2;24;142;158m=[0m[48;2;24;139;157m=[0m[48;2;20;115;132m-[0m[48;2;7;40;47m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;8;41;51m.[0m[48;2;18;87;108m:[0m[48;2;24;114;143m-[0m[48;2;27;127;161m=[0m[48;2;28;128;163m=[0m[48;2;28;128;163m=[0m[48;2;25;115;148m-[0m[48;2;25;112;146m-[0m[48;2;21;96;127m-[0m[48;2;24;107;142m-[0m[48;2;27;121;162m-[0m[48;2;27;120;161m-[0m[48;2;27;118;160m-[0m[48;2;26;117;159m-[0m[48;2;19;85;117m:[0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;17;86;121m:[0m[48;2;21;107;150m-[0m[48;2;20;106;148m-[0m[48;2;19;104;147m-[0m[48;2;18;103;145m-[0m[48;2;15;91;129m:[0m[48;2;7;45;63m.[0m[48;2;11;77;109m:[0m[48;2;13;94;133m:[0m[48;2;12;95;135m:[0m[48;2;12;95;135m:[0m[48;2;10;89;127m:[0m[48;2;6;57;81m.[0m[48;2;1;15;22m [0m[48;2;7;86;120m:[0m[48;2;6;79;112m:[0m[48;2;0;3;4m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;2;83;116m:[0m[48;2;2;84;118m:[0m[48;2;2;83;117m:[0m[48;2;1;82;116m:[0m[48;2;1;81;115m:[0m[48;2;0;54;77m.[0m
[48;2;0;1;0m [0m[48;2;0;60;39m.[0m[48;2;0;57;37m.[0m[48;2;0;42;27m.[0m[48;2;0;141;93m-[0m[48;2;0;188;124m=[0m[48;2;0;123;81m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;154;109m=[0m[48;2;4;181;129m=[0m[48;2;3;178;128m=[0m[48;2;4;176;128m=[0m[48;2;5;178;131m=[0m[48;2;2;71;52m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;65;50m.[0m[48;2;7;153;119m=[0m[48;2;9;173;136m=[0m[48;2;9;172;137m=[0m[48;2;10;171;138m=[0m[48;2;9;158;129m=[0m[48;2;4;72;59m:[0m[48;2;1;17;14m [0m[48;2;0;2;2m [0m[48;2;0;9;8m [0m[48;2;10;137;118m-[0m[48;2;14;164;144m=[0m[48;2;14;159;142m=[0m[48;2;14;159;143m=[0m[48;2;15;158;144m=[0m[48;2;14;149;137m=[0m[48;2;1;12;11m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;4;4m [0m[48;2;16;134;131m-[0m[48;2;19;152;151m=[0m[48;2;19;149;151m=[0m[48;2;20;149;153m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;18;123;130m-[0m[48;2;12;79;85m:[0m[48;2;11;73;79m:[0m[48;2;21;128;140m-[0m[48;2;23;140;156m=[0m[48;2;24;139;157m=[0m[48;2;24;139;158m=[0m[48;2;25;139;160m=[0m[48;2;23;126;146m-[0m[48;2;1;5;6m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;6;30;37m [0m[48;2;22;104;128m-[0m[48;2;28;131;163m=[0m[48;2;28;130;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;15;71;91m:[0m[48;2;4;19;24m [0m[48;2;0;3;4m [0m[48;2;0;3;4m [0m[48;2;17;75;99m:[0m[48;2;28;121;162m-[0m[48;2;26;117;157m-[0m[48;2;26;117;159m-[0m[48;2;25;115;157m-[0m[48;2;26;115;158m-[0m[48;2;6;30;42m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;5;28;39m [0m[48;2;21;107;150m-[0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;17;102;143m-[0m[48;2;17;102;143m-[0m[48;2;13;84;119m:[0m[48;2;9;60;85m.[0m[48;2;6;42;59m.[0m[48;2;8;63;89m.[0m[48;2;12;95;135m:[0m[48;2;11;94;133m:[0m[48;2;10;93;131m:[0m[48;2;8;82;116m:[0m[48;2;0;0;0m [0m[48;2;5;75;106m:[0m[48;2;3;41;57m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;1;45;63m.[0m[48;2;2;84;118m:[0m[48;2;1;81;114m:[0m[48;2;0;81;115m:[0m[48;2;0;80;114m:[0m[48;2;0;79;111m:[0m[48;2;0;14;20m [0m
[48;2;0;0;0m [0m[48;2;0;14;9m [0m[48;2;0;115;76m:[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;151;99m-[0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;3;161;114m=[0m[48;2;4;180;130m=[0m[48;2;4;176;129m=[0m[48;2;4;177;129m=[0m[48;2;5;168;125m=[0m[48;2;0;18;13m [0m[48;2;0;0;0m [0m[48;2;4;98;76m:[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;8;167;133m=[0m[48;2;9;168;136m=[0m[48;2;8;151;123m=[0m[48;2;1;28;23m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;14;12m [0m[48;2;12;150;132m=[0m[48;2;13;162;143m=[0m[48;2;14;160;144m=[0m[48;2;15;157;143m=[0m[48;2;16;159;147m=[0m[48;2;10;92;87m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;52;51m.[0m[48;2;20;153;152m=[0m[48;2;19;149;151m=[0m[48;2;21;150;154m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;12;83;88m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;12;76;86m:[0m[48;2;25;142;159m=[0m[48;2;24;137;155m=[0m[48;2;24;137;158m=[0m[48;2;25;136;158m=[0m[48;2;22;120;141m-[0m[48;2;0;4;5m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;9;47;58m.[0m[48;2;26;129;159m=[0m[48;2;28;131;163m=[0m[48;2;27;127;160m=[0m[48;2;27;125;159m-[0m[48;2;27;125;159m-[0m[48;2;9;42;54m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;20;91;121m:[0m[48;2;26;119;160m-[0m[48;2;26;116;158m-[0m[48;2;25;115;157m-[0m[48;2;25;114;157m-[0m[48;2;20;93;128m:[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;14;75;105m:[0m[48;2;20;106;148m-[0m[48;2;18;102;144m-[0m[48;2;17;102;143m-[0m[48;2;16;101;142m-[0m[48;2;14;88;125m:[0m[48;2;0;6;8m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;6;52;74m.[0m[48;2;6;57;81m.[0m[48;2;4;48;68m.[0m[48;2;2;27;39m [0m[48;2;4;55;78m.[0m[48;2;5;84;118m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;1;77;108m:[0m[48;2;1;82;116m:[0m[48;2;0;81;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;113m:[0m[48;2;0;56;80m.[0m[48;2;0;0;0m [0m
[48;2;0;16;11m [0m[48;2;0;151;99m-[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;122m=[0m[48;2;0;46;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;1;53;38m.[0m[48;2;4;180;130m=[0m[48;2;4;177;129m=[0m[48;2;4;174;127m=[0m[48;2;6;178;132m=[0m[48;2;2;85;64m:[0m[48;2;0;0;0m [0m[48;2;3;84;65m:[0m[48;2;8;174;135m=[0m[48;2;7;169;133m=[0m[48;2;8;170;135m=[0m[48;2;9;169;136m=[0m[48;2;9;167;136m=[0m[48;2;2;38;31m.[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;7;81;72m:[0m[48;2;14;163;144m=[0m[48;2;14;158;142m=[0m[48;2;16;161;146m=[0m[48;2;15;158;146m=[0m[48;2;16;155;145m=[0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;15;118;118m-[0m[48;2;19;151;152m=[0m[48;2;20;148;152m=[0m[48;2;20;147;152m=[0m[48;2;21;147;154m=[0m[48;2;18;123;131m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;2;3m [0m[48;2;19;111;125m-[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;135;157m=[0m[48;2;26;137;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;6;32;40m [0m[48;2;27;132;162m=[0m[48;2;27;130;162m=[0m[48;2;27;128;161m=[0m[48;2;27;127;161m-[0m[48;2;28;128;163m=[0m[48;2;12;58;74m.[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;30;41m [0m[48;2;27;120;161m-[0m[48;2;26;117;158m-[0m[48;2;26;117;159m-[0m[48;2;25;114;156m-[0m[48;2;25;114;157m-[0m[48;2;9;44;61m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;18;103;145m-[0m[48;2;16;100;141m-[0m[48;2;16;100;142m-[0m[48;2;7;48;68m.[0m[48;2;0;0;0m [0m[48;2;0;3;5m [0m[48;2;0;1;2m [0m[48;2;1;12;18m [0m[48;2;8;77;109m:[0m[48;2;7;75;106m:[0m[48;2;6;76;108m:[0m[48;2;6;87;124m:[0m[48;2;6;88;125m:[0m[48;2;3;47;67m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;34;49m.[0m[48;2;2;83;117m:[0m[48;2;0;81;114m:[0m[48;2;1;82;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;114m:[0m[48;2;0;22;31m [0m[48;2;0;0;0m [0m
[48;2;0;128;84m-[0m[48;2;0;188;124m=[0m[48;2;0;182;120m=[0m[48;2;0;188;124m=[0m[48;2;0;163;107m=[0m[48;2;0;3;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;16;11m [0m[48;2;3;156;112m=[0m[48;2;4;178;130m=[0m[48;2;4;173;126m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;1;1m [0m[48;2;1;24;19m [0m[48;2;7;170;132m=[0m[48;2;7;170;134m=[0m[48;2;8;171;136m=[0m[48;2;9;168;135m=[0m[48;2;10;170;138m=[0m[48;2;7;108;89m:[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;7;6m [0m[48;2;12;145;128m=[0m[48;2;14;161;144m=[0m[48;2;15;158;144m=[0m[48;2;15;156;144m=[0m[48;2;17;158;148m=[0m[48;2;12;111;105m-[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;4;34;34m [0m[48;2;20;152;153m=[0m[48;2;20;148;152m=[0m[48;2;21;149;154m=[0m[48;2;21;145;152m=[0m[48;2;22;147;156m=[0m[48;2;9;61;65m.[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;38;43m.[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;137;159m=[0m[48;2;25;136;160m=[0m[48;2;24;129;152m-[0m[48;2;2;14;17m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;23;109;134m-[0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;27;128;161m=[0m[48;2;28;129;163m=[0m[48;2;23;109;139m-[0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;18;82;111m:[0m[48;2;27;119;160m-[0m[48;2;25;115;156m-[0m[48;2;25;115;156m-[0m[48;2;25;114;157m-[0m[48;2;21;102;141m-[0m[48;2;1;5;7m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;11;61;86m.[0m[48;2;19;104;147m-[0m[48;2;17;101;142m-[0m[48;2;16;101;143m-[0m[48;2;15;99;141m-[0m[48;2;14;94;133m:[0m[48;2;1;9;14m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;5;51;71m.[0m[48;2;9;92;130m:[0m[48;2;8;91;128m:[0m[48;2;7;90;127m:[0m[48;2;6;89;125m:[0m[48;2;5;83;119m:[0m[48;2;0;11;16m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;1;69;97m:[0m[48;2;0;81;115m:[0m[48;2;0;81;114m:[0m[48;2;0;80;113m:[0m[48;2;0;79;113m:[0m[48;2;0;66;94m.[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;181;119m=[0m[48;2;0;185;122m=[0m[48;2;0;186;123m=[0m[48;2;0;188;124m=[0m[48;2;0;165;109m=[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;32;23m [0m[48;2;3;149;108m-[0m[48;2;5;180;130m=[0m[48;2;4;176;129m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;9;6m [0m[48;2;0;0;0m [0m[48;2;3;81;63m:[0m[48;2;8;173;136m=[0m[48;2;8;169;134m=[0m[48;2;10;171;138m=[0m[48;2;9;168;136m=[0m[48;2;11;169;139m=[0m[48;2;3;48;40m.[0m[48;2;0;3;3m [0m[48;2;0;5;4m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;5;59;53m.[0m[48;2;15;162;145m=[0m[48;2;15;158;144m=[0m[48;2;16;159;147m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;5;44;42m.[0m[48;2;0;2;2m [0m[48;2;0;6;5m [0m[48;2;0;0;0m [0m[48;2;13;100;102m:[0m[48;2;21;150;154m=[0m[48;2;20;146;151m=[0m[48;2;21;147;154m=[0m[48;2;21;146;155m=[0m[48;2;21;134;143m=[0m[48;2;1;9;9m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;18;104;118m-[0m[48;2;25;139;160m=[0m[48;2;25;136;158m=[0m[48;2;25;134;158m=[0m[48;2;26;136;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;6;30;37m [0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;28;130;163m=[0m[48;2;27;126;160m-[0m[48;2;28;128;163m=[0m[48;2;15;68;87m:[0m[48;2;0;1;1m [0m[48;2;0;3;5m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;16;21m [0m[48;2;26;116;156m-[0m[48;2;25;116;158m-[0m[48;2;26;116;158m-[0m[48;2;24;112;154m-[0m[48;2;24;113;156m-[0m[48;2;12;58;81m.[0m[48;2;0;0;1m [0m[48;2;0;3;5m [0m[48;2;0;0;0m [0m[48;2;1;7;9m [0m[48;2;17;97;138m-[0m[48;2;17;102;144m-[0m[48;2;16;101;143m-[0m[48;2;15;98;139m-[0m[48;2;15;99;140m-[0m[48;2;9;60;86m.[0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;0;6;8m [0m[48;2;8;84;119m:[0m[48;2;7;90;127m:[0m[48;2;6;88;125m:[0m[48;2;6;87;122m:[0m[48;2;6;87;124m:[0m[48;2;3;58;81m.[0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;24;34m [0m[48;2;1;82;116m:[0m[48;2;0;81;113m:[0m[48;2;0;81;115m:[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;32;46m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m
[48;2;0;161;106m=[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;123m=[0m[48;2;1;187;125m=[0m[48;2;0;110;74m:[0m[48;2;0;89;61m:[0m[48;2;1;103;70m:[0m[48;2;1;119;82m-[0m[48;2;1;119;82m-[0m[48;2;1;89;62m:[0m[48;2;0;46;32m.[0m[48;2;1;89;63m:[0m[48;2;3;173;125m=[0m[48;2;5;180;130m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;3;96;71m:[0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;5;98;77m:[0m[48;2;8;170;135m=[0m[48;2;9;166;133m=[0m[48;2;10;170;138m=[0m[48;2;10;167;137m=[0m[48;2;11;168;140m=[0m[48;2;3;51;43m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;29;26m [0m[48;2;13;147;131m=[0m[48;2;15;158;143m=[0m[48;2;15;157;145m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;15;130;124m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;25;25m [0m[48;2;20;145;148m=[0m[48;2;20;148;153m=[0m[48;2;21;147;154m=[0m[48;2;21;144;153m=[0m[48;2;23;146;156m=[0m[48;2;12;79;85m:[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;4;25;29m [0m[48;2;24;137;157m=[0m[48;2;25;136;158m=[0m[48;2;25;136;160m=[0m[48;2;25;135;160m=[0m[48;2;27;135;162m=[0m[48;2;3;19;22m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;7;35;44m.[0m[48;2;27;128;161m=[0m[48;2;27;125;159m-[0m[48;2;27;128;162m=[0m[48;2;27;125;160m-[0m[48;2;28;127;163m-[0m[48;2;15;70;91m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;8;11m [0m[48;2;20;89;121m:[0m[48;2;25;116;157m-[0m[48;2;25;114;156m-[0m[48;2;24;113;156m-[0m[48;2;23;112;155m-[0m[48;2;23;108;150m-[0m[48;2;2;10;13m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;12;68;97m:[0m[48;2;19;103;145m-[0m[48;2;16;100;142m-[0m[48;2;16;100;142m-[0m[48;2;14;98;138m-[0m[48;2;13;97;137m-[0m[48;2;2;18;26m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;34;48m.[0m[48;2;8;90;128m:[0m[48;2;6;88;125m:[0m[48;2;7;89;125m:[0m[48;2;5;86;122m:[0m[48;2;5;86;122m:[0m[48;2;1;21;30m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;16m [0m[48;2;0;70;100m:[0m[48;2;0;81;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;73;104m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;56;36m.[0m[48;2;0;183;121m=[0m[48;2;0;187;124m=[0m[48;2;1;187;125m=[0m[48;2;0;184;124m=[0m[48;2;1;185;126m=[0m[48;2;1;110;75m:[0m[48;2;0;61;42m.[0m[48;2;1;71;49m.[0m[48;2;2;156;109m=[0m[48;2;3;182;128m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;5;180;130m=[0m[48;2;4;163;119m=[0m[48;2;4;120;89m-[0m[48;2;1;40;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;2;46;37m.[0m[48;2;10;171;137m=[0m[48;2;10;170;138m=[0m[48;2;10;168;138m=[0m[48;2;10;165;137m=[0m[48;2;11;164;138m=[0m[48;2;11;145;124m=[0m[48;2;6;84;73m:[0m[48;2;7;82;72m:[0m[48;2;11;119;106m-[0m[48;2;14;157;141m=[0m[48;2;14;144;131m=[0m[48;2;16;159;147m=[0m[48;2;16;157;147m=[0m[48;2;16;154;146m=[0m[48;2;17;153;146m=[0m[48;2;17;142;138m=[0m[48;2;9;73;71m:[0m[48;2;7;59;59m.[0m[48;2;11;86;87m:[0m[48;2;18;136;138m-[0m[48;2;20;147;152m=[0m[48;2;21;146;153m=[0m[48;2;21;145;154m=[0m[48;2;22;144;154m=[0m[48;2;22;141;152m=[0m[48;2;3;19;21m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;34;40m.[0m[48;2;26;138;160m=[0m[48;2;26;137;161m=[0m[48;2;25;134;159m=[0m[48;2;26;132;159m=[0m[48;2;26;131;159m=[0m[48;2;18;92;113m:[0m[48;2;13;62;76m.[0m[48;2;15;73;92m:[0m[48;2;24;114;143m-[0m[48;2;28;129;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;27;125;161m-[0m[48;2;27;124;160m-[0m[48;2;26;117;154m-[0m[48;2;16;70;92m:[0m[48;2;13;58;78m.[0m[48;2;17;79;106m:[0m[48;2;25;113;152m-[0m[48;2;23;105;142m-[0m[48;2;26;116;158m-[0m[48;2;25;114;157m-[0m[48;2;24;111;154m-[0m[48;2;23;109;151m-[0m[48;2;22;107;150m-[0m[48;2;12;63;88m:[0m[48;2;7;39;55m.[0m[48;2;10;53;76m.[0m[48;2;15;87;122m:[0m[48;2;19;103;146m-[0m[48;2;16;100;141m-[0m[48;2;15;99;140m-[0m[48;2;15;96;136m-[0m[48;2;13;97;137m-[0m[48;2;10;71;101m:[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;3;36;51m.[0m[48;2;8;90;127m:[0m[48;2;6;88;124m:[0m[48;2;5;86;122m:[0m[48;2;4;85;120m:[0m[48;2;4;86;121m:[0m[48;2;2;63;88m.[0m[48;2;0;41;58m.[0m[48;2;1;55;78m.[0m[48;2;0;78;111m:[0m[48;2;1;82;115m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;42;61m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;39;26m.[0m[48;2;0;126;84m-[0m[48;2;0;171;115m=[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;2;184;127m=[0m[48;2;2;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;4;174;125m=[0m[48;2;4;177;129m=[0m[48;2;3;113;83m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;3;60;49m.[0m[48;2;9;141;116m-[0m[48;2;11;168;140m=[0m[48;2;12;167;141m=[0m[48;2;13;166;142m=[0m[48;2;13;165;143m=[0m[48;2;14;164;143m=[0m[48;2;14;163;144m=[0m[48;2;11;121;108m-[0m[48;2;3;39;35m.[0m[48;2;1;14;13m [0m[48;2;13;124;115m-[0m[48;2;17;157;149m=[0m[48;2;18;156;150m=[0m[48;2;18;155;150m=[0m[48;2;19;154;151m=[0m[48;2;20;153;152m=[0m[48;2;19;148;149m=[0m[48;2;17;123;124m-[0m[48;2;21;149;154m=[0m[48;2;22;148;155m=[0m[48;2;22;147;156m=[0m[48;2;23;146;156m=[0m[48;2;23;145;157m=[0m[48;2;16;96;104m:[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;13;70;83m:[0m[48;2;24;126;149m-[0m[48;2;27;135;162m=[0m[48;2;27;134;162m=[0m[48;2;27;133;162m=[0m[48;2;27;132;162m=[0m[48;2;28;131;163m=[0m[48;2;26;123;154m-[0m[48;2;15;71;90m:[0m[48;2;7;35;45m.[0m[48;2;21;96;123m-[0m[48;2;27;125;160m-[0m[48;2;28;126;163m-[0m[48;2;28;124;163m-[0m[48;2;28;123;162m-[0m[48;2;28;122;162m-[0m[48;2;27;120;161m-[0m[48;2;22;99;133m-[0m[48;2;10;46;63m.[0m[48;2;0;4;6m [0m[48;2;15;72;99m:[0m[48;2;24;111;153m-[0m[48;2;24;111;155m-[0m[48;2;23;110;153m-[0m[48;2;22;109;152m-[0m[48;2;21;107;150m-[0m[48;2;20;106;149m-[0m[48;2;15;82;115m:[0m[48;2;14;75;106m:[0m[48;2;17;102;144m-[0m[48;2;16;100;142m-[0m[48;2;15;99;140m-[0m[48;2;14;98;139m-[0m[48;2;13;97;137m:[0m[48;2;3;28;41m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;5m [0m[48;2;4;57;80m.[0m[48;2;5;86;121m:[0m[48;2;5;87;122m:[0m[48;2;4;86;121m:[0m[48;2;2;84;119m:[0m[48;2;3;84;119m:[0m[48;2;1;82;117m:[0m[48;2;0;64;90m.[0m[48;2;0;67;95m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;77;110m:[0m[48;2;0;10;15m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;13;8m [0m[48;2;0;39;26m.[0m[48;2;0;56;38m.[0m[48;2;0;65;45m.[0m[48;2;1;68;47m.[0m[48;2;1;62;44m.[0m[48;2;0;48;34m.[0m[48;2;0;39;28m.[0m[48;2;4;156;113m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;6;177;133m=[0m[48;2;6;151;114m=[0m[48;2;3;94;71m:[0m[48;2;2;54;42m.[0m[48;2;2;46;36m.[0m[48;2;1;35;27m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;2;31;26m [0m[48;2;3;52;44m.[0m[48;2;4;60;51m.[0m[48;2;4;54;47m.[0m[48;2;3;35;31m [0m[48;2;1;10;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;31;29m [0m[48;2;6;51;50m.[0m[48;2;6;56;55m.[0m[48;2;6;48;48m.[0m[48;2;4;30;30m [0m[48;2;0;7;7m [0m[48;2;0;0;0m [0m[48;2;5;37;39m.[0m[48;2;5;38;40m.[0m[48;2;6;38;40m.[0m[48;2;5;37;40m.[0m[48;2;6;37;41m.[0m[48;2;2;12;14m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;10;12m [0m[48;2;6;33;40m.[0m[48;2;9;45;55m.[0m[48;2;9;48;59m.[0m[48;2;8;40;49m.[0m[48;2;5;23;29m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;4;18;23m [0m[48;2;8;36;47m.[0m[48;2;10;44;58m.[0m[48;2;9;42;56m.[0m[48;2;6;30;40m [0m[48;2;2;13;17m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;7;34;47m.[0m[48;2;8;39;55m.[0m[48;2;7;36;50m.[0m[48;2;4;24;35m [0m[48;2;1;9;13m [0m[48;2;0;0;0m [0m[48;2;1;11;15m [0m[48;2;4;26;37m [0m[48;2;4;25;36m [0m[48;2;3;25;36m [0m[48;2;3;25;35m [0m[48;2;3;24;34m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;1;20;29m [0m[48;2;1;37;52m.[0m[48;2;1;57;80m.[0m[48;2;1;61;86m.[0m[48;2;0;52;73m.[0m[48;2;0;44;62m.[0m[48;2;0;75;107m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;26;19m [0m[48;2;4;131;97m-[0m[48;2;5;175;131m=[0m[48;2;7;176;133m=[0m[48;2;7;175;134m=[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;7;151;120m=[0m[48;2;2;49;39m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;1;42;59m.[0m[48;2;2;68;95m:[0m[48;2;1;46;66m.[0m[48;2;0;21;30m [0m[48;2;0;3;5m [0m[48;2;0;40;56m.[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;78;111m:[0m[48;2;0;80;114m:[0m[48;2;0;18;26m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;30;22m [0m[48;2;2;57;44m.[0m[48;2;3;68;52m.[0m[48;2;2;63;49m.[0m[48;2;2;42;33m.[0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;1;48;68m.[0m[48;2;3;84;119m:[0m[48;2;1;53;74m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;21m [0m[48;2;0;73;104m:[0m[48;2;0;79;112m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;80;114m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;1;37;52m.[0m[48;2;2;83;118m:[0m[48;2;0;80;114m:[0m[48;2;0;64;90m.[0m[48;2;0;61;87m.[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;50;72m.[0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;27;38m [0m[48;2;0;59;83m.[0m[48;2;0;77;109m:[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;74;105m:[0m[48;2;0;65;93m.[0m[48;2;0;48;68m.[0m[48;2;0;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m


[49m[32mDandelionNER -- DandelionNER is a Qanary component 
[49m[92mFramework@GitHub:       https://github.com/WDAqua/Qanary 
[49m[36mComponents@GitHub:      https://github.com/WDAqua/Qanary-question-answering-components
[49m[94mComponent Version:      3.4.0       
[49m[34mSpring Boot Version:    2.6.7      
[47m[30mQanary System endpoint: http://localhost:8080 [49m[39m

[2m2023-10-27 12:09:21.695[0;39m [32m INFO[0;39m [35m9649[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Starting Application v3.4.0 using Java 21 on fedora with PID 9649 (/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/target/qanary-component-NER-Dandelion-3.4.0.jar started by dennisschiese in /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion)
[2m2023-10-27 12:09:21.721[0;39m [32mDEBUG[0;39m [35m9649[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Running with Spring Boot v2.6.7, Spring v5.3.19
[2m2023-10-27 12:09:21.734[0;39m [32m INFO[0;39m [35m9649[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m The following 1 profile is active: "local"
[2m2023-10-27 12:09:38.801[0;39m [33m WARN[0;39m [35m9649[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse: initialized
[2m2023-10-27 12:09:39.025[0;39m [33m WARN[0;39m [35m9649[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m eu.wdaqua.qanary.communications.RestTemplateWithCaching was initialized
[2m2023-10-27 12:09:39.147[0;39m [33m WARN[0;39m [35m9649[0;39m [2m---[0;39m [2m[           main][0;39m [36mConfigServletWebServerApplicationContext[0;39m [2m:[0;39m Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dandelion' defined in URL [jar:file:/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/target/qanary-component-NER-Dandelion-3.4.0.jar!/BOOT-INF/classes!/eu/wdaqua/qanary/component/dandelion/ner/Dandelion.class]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [eu.wdaqua.qanary.component.dandelion.ner.Dandelion]: Constructor threw exception; nested exception is eu.wdaqua.qanary.component.dandelion.ner.exception.ApiTokenIsNullOrEmptyException
[2m2023-10-27 12:09:39.432[0;39m [31mERROR[0;39m [35m9649[0;39m [2m---[0;39m [2m[           main][0;39m [36mo.s.boot.SpringApplication              [0;39m [2m:[0;39m Application run failed

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dandelion' defined in URL [jar:file:/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/target/qanary-component-NER-Dandelion-3.4.0.jar!/BOOT-INF/classes!/eu/wdaqua/qanary/component/dandelion/ner/Dandelion.class]: Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [eu.wdaqua.qanary.component.dandelion.ner.Dandelion]: Constructor threw exception; nested exception is eu.wdaqua.qanary.component.dandelion.ner.exception.ApiTokenIsNullOrEmptyException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:315) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:296) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1372) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1222) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:953) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918) ~[spring-context-5.3.19.jar!/:5.3.19]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583) ~[spring-context-5.3.19.jar!/:5.3.19]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145) ~[spring-boot-2.6.7.jar!/:2.6.7]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:740) ~[spring-boot-2.6.7.jar!/:2.6.7]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:415) ~[spring-boot-2.6.7.jar!/:2.6.7]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) ~[spring-boot-2.6.7.jar!/:2.6.7]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1312) ~[spring-boot-2.6.7.jar!/:2.6.7]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301) ~[spring-boot-2.6.7.jar!/:2.6.7]
	at eu.wdaqua.qanary.component.dandelion.ner.Application.main(Application.java:34) ~[classes!/:3.4.0]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49) ~[qanary-component-NER-Dandelion-3.4.0.jar:3.4.0]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:108) ~[qanary-component-NER-Dandelion-3.4.0.jar:3.4.0]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:58) ~[qanary-component-NER-Dandelion-3.4.0.jar:3.4.0]
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:88) ~[qanary-component-NER-Dandelion-3.4.0.jar:3.4.0]
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [eu.wdaqua.qanary.component.dandelion.ner.Dandelion]: Constructor threw exception; nested exception is eu.wdaqua.qanary.component.dandelion.ner.exception.ApiTokenIsNullOrEmptyException
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:224) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117) ~[spring-beans-5.3.19.jar!/:5.3.19]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:311) ~[spring-beans-5.3.19.jar!/:5.3.19]
	... 25 common frames omitted
Caused by: eu.wdaqua.qanary.component.dandelion.ner.exception.ApiTokenIsNullOrEmptyException: null
	at eu.wdaqua.qanary.component.dandelion.ner.Dandelion.<init>(Dandelion.java:63) ~[classes!/:3.4.0]
	at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62) ~[na:na]
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502) ~[na:na]
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486) ~[na:na]
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:211) ~[spring-beans-5.3.19.jar!/:5.3.19]
	... 27 common frames omitted


[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;19;12m [0m[48;2;0;71;47m.[0m[48;2;0;120;79m-[0m[48;2;0;165;109m=[0m[48;2;0;168;111m=[0m[48;2;0;153;101m-[0m[48;2;0;141;93m-[0m[48;2;0;162;107m=[0m[48;2;0;178;119m=[0m[48;2;0;168;113m=[0m[48;2;0;127;85m-[0m[48;2;0;85;58m:[0m[48;2;0;31;21m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;16;10m [0m[48;2;0;106;70m:[0m[48;2;0;169;111m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;98;64m:[0m[48;2;0;31;20m [0m[48;2;0;34;22m [0m[48;2;0;78;52m:[0m[48;2;0;25;17m [0m[48;2;0;46;30m.[0m[48;2;0;131;88m-[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;1;177;122m=[0m[48;2;1;114;79m:[0m[48;2;0;13;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;35;23m [0m[48;2;0;164;108m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;181;119m=[0m[48;2;0;54;35m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;23;15m [0m[48;2;0;75;50m.[0m[48;2;0;8;5m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;67;45m.[0m[48;2;1;137;94m-[0m[48;2;2;181;126m=[0m[48;2;3;182;128m=[0m[48;2;2;147;104m-[0m[48;2;0;8;6m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;1;0m [0m[48;2;0;18;12m [0m[48;2;0;167;110m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;157;104m=[0m[48;2;0;40;26m.[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;53;36m.[0m[48;2;2;126;88m-[0m[48;2;2;179;125m=[0m[48;2;2;177;125m=[0m[48;2;4;181;129m=[0m[48;2;1;76;55m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;122;80m-[0m[48;2;0;188;124m=[0m[48;2;0;169;111m=[0m[48;2;0;82;54m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;62;43m.[0m[48;2;3;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;3;178;126m=[0m[48;2;3;178;128m=[0m[48;2;3;116;84m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;9m [0m[48;2;1;31;24m [0m[48;2;2;42;34m.[0m[48;2;3;52;42m.[0m[48;2;3;49;41m.[0m[48;2;2;28;24m [0m[48;2;0;0;0m [0m[48;2;2;29;25m [0m[48;2;2;34;30m [0m[48;2;2;33;29m [0m[48;2;3;33;30m [0m[48;2;3;33;30m [0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;4;32;31m [0m[48;2;4;32;32m [0m[48;2;4;32;32m [0m[48;2;4;31;31m [0m[48;2;4;31;32m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;2;15;16m [0m[48;2;5;32;35m [0m[48;2;6;39;43m.[0m[48;2;6;35;39m.[0m[48;2;3;22;24m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;5;6m [0m[48;2;4;19;24m [0m[48;2;6;30;38m [0m[48;2;8;38;48m.[0m[48;2;8;38;49m.[0m[48;2;6;27;35m [0m[48;2;0;0;0m [0m[48;2;3;14;19m [0m[48;2;5;25;34m [0m[48;2;5;25;33m [0m[48;2;5;25;33m [0m[48;2;5;24;33m [0m[48;2;5;23;32m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;11;16m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;3;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;2;16;23m [0m[48;2;2;19;27m [0m[48;2;1;11;15m [0m[48;2;0;0;0m [0m[48;2;1;13;18m [0m[48;2;2;20;29m [0m[48;2;1;19;26m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;20m [0m[48;2;0;17;25m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;16;23m [0m
[48;2;0;0;0m [0m[48;2;0;30;20m [0m[48;2;0;188;124m=[0m[48;2;0;91;60m:[0m[48;2;0;14;9m [0m[48;2;0;38;25m [0m[48;2;0;126;83m-[0m[48;2;0;53;35m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;38;26m.[0m[48;2;2;177;124m=[0m[48;2;2;179;126m=[0m[48;2;3;180;128m=[0m[48;2;3;177;127m=[0m[48;2;4;178;130m=[0m[48;2;3;109;80m:[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;0;10;8m [0m[48;2;3;71;55m.[0m[48;2;6;126;99m-[0m[48;2;8;157;125m=[0m[48;2;10;171;138m=[0m[48;2;10;170;139m=[0m[48;2;11;169;139m=[0m[48;2;9;150;125m=[0m[48;2;10;151;128m=[0m[48;2;9;122;104m-[0m[48;2;12;159;138m=[0m[48;2;14;164;144m=[0m[48;2;15;162;145m=[0m[48;2;15;162;145m=[0m[48;2;16;160;146m=[0m[48;2;7;79;73m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;8;70;68m:[0m[48;2;19;154;151m=[0m[48;2;20;152;152m=[0m[48;2;20;151;153m=[0m[48;2;21;150;154m=[0m[48;2;21;149;154m=[0m[48;2;14;99;104m:[0m[48;2;19;124;132m-[0m[48;2;23;146;157m=[0m[48;2;23;145;157m=[0m[48;2;24;144;158m=[0m[48;2;24;142;158m=[0m[48;2;24;139;157m=[0m[48;2;20;115;132m-[0m[48;2;7;40;47m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;8;41;51m.[0m[48;2;18;87;108m:[0m[48;2;24;114;143m-[0m[48;2;27;127;161m=[0m[48;2;28;128;163m=[0m[48;2;28;128;163m=[0m[48;2;25;115;148m-[0m[48;2;25;112;146m-[0m[48;2;21;96;127m-[0m[48;2;24;107;142m-[0m[48;2;27;121;162m-[0m[48;2;27;120;161m-[0m[48;2;27;118;160m-[0m[48;2;26;117;159m-[0m[48;2;19;85;117m:[0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;17;86;121m:[0m[48;2;21;107;150m-[0m[48;2;20;106;148m-[0m[48;2;19;104;147m-[0m[48;2;18;103;145m-[0m[48;2;15;91;129m:[0m[48;2;7;45;63m.[0m[48;2;11;77;109m:[0m[48;2;13;94;133m:[0m[48;2;12;95;135m:[0m[48;2;12;95;135m:[0m[48;2;10;89;127m:[0m[48;2;6;57;81m.[0m[48;2;1;15;22m [0m[48;2;7;86;120m:[0m[48;2;6;79;112m:[0m[48;2;0;3;4m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;2;83;116m:[0m[48;2;2;84;118m:[0m[48;2;2;83;117m:[0m[48;2;1;82;116m:[0m[48;2;1;81;115m:[0m[48;2;0;54;77m.[0m
[48;2;0;1;0m [0m[48;2;0;60;39m.[0m[48;2;0;57;37m.[0m[48;2;0;42;27m.[0m[48;2;0;141;93m-[0m[48;2;0;188;124m=[0m[48;2;0;123;81m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;154;109m=[0m[48;2;4;181;129m=[0m[48;2;3;178;128m=[0m[48;2;4;176;128m=[0m[48;2;5;178;131m=[0m[48;2;2;71;52m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;65;50m.[0m[48;2;7;153;119m=[0m[48;2;9;173;136m=[0m[48;2;9;172;137m=[0m[48;2;10;171;138m=[0m[48;2;9;158;129m=[0m[48;2;4;72;59m:[0m[48;2;1;17;14m [0m[48;2;0;2;2m [0m[48;2;0;9;8m [0m[48;2;10;137;118m-[0m[48;2;14;164;144m=[0m[48;2;14;159;142m=[0m[48;2;14;159;143m=[0m[48;2;15;158;144m=[0m[48;2;14;149;137m=[0m[48;2;1;12;11m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;4;4m [0m[48;2;16;134;131m-[0m[48;2;19;152;151m=[0m[48;2;19;149;151m=[0m[48;2;20;149;153m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;18;123;130m-[0m[48;2;12;79;85m:[0m[48;2;11;73;79m:[0m[48;2;21;128;140m-[0m[48;2;23;140;156m=[0m[48;2;24;139;157m=[0m[48;2;24;139;158m=[0m[48;2;25;139;160m=[0m[48;2;23;126;146m-[0m[48;2;1;5;6m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;6;30;37m [0m[48;2;22;104;128m-[0m[48;2;28;131;163m=[0m[48;2;28;130;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;15;71;91m:[0m[48;2;4;19;24m [0m[48;2;0;3;4m [0m[48;2;0;3;4m [0m[48;2;17;75;99m:[0m[48;2;28;121;162m-[0m[48;2;26;117;157m-[0m[48;2;26;117;159m-[0m[48;2;25;115;157m-[0m[48;2;26;115;158m-[0m[48;2;6;30;42m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;5;28;39m [0m[48;2;21;107;150m-[0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;17;102;143m-[0m[48;2;17;102;143m-[0m[48;2;13;84;119m:[0m[48;2;9;60;85m.[0m[48;2;6;42;59m.[0m[48;2;8;63;89m.[0m[48;2;12;95;135m:[0m[48;2;11;94;133m:[0m[48;2;10;93;131m:[0m[48;2;8;82;116m:[0m[48;2;0;0;0m [0m[48;2;5;75;106m:[0m[48;2;3;41;57m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;1;45;63m.[0m[48;2;2;84;118m:[0m[48;2;1;81;114m:[0m[48;2;0;81;115m:[0m[48;2;0;80;114m:[0m[48;2;0;79;111m:[0m[48;2;0;14;20m [0m
[48;2;0;0;0m [0m[48;2;0;14;9m [0m[48;2;0;115;76m:[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;151;99m-[0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;3;161;114m=[0m[48;2;4;180;130m=[0m[48;2;4;176;129m=[0m[48;2;4;177;129m=[0m[48;2;5;168;125m=[0m[48;2;0;18;13m [0m[48;2;0;0;0m [0m[48;2;4;98;76m:[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;8;167;133m=[0m[48;2;9;168;136m=[0m[48;2;8;151;123m=[0m[48;2;1;28;23m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;14;12m [0m[48;2;12;150;132m=[0m[48;2;13;162;143m=[0m[48;2;14;160;144m=[0m[48;2;15;157;143m=[0m[48;2;16;159;147m=[0m[48;2;10;92;87m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;52;51m.[0m[48;2;20;153;152m=[0m[48;2;19;149;151m=[0m[48;2;21;150;154m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;12;83;88m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;12;76;86m:[0m[48;2;25;142;159m=[0m[48;2;24;137;155m=[0m[48;2;24;137;158m=[0m[48;2;25;136;158m=[0m[48;2;22;120;141m-[0m[48;2;0;4;5m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;9;47;58m.[0m[48;2;26;129;159m=[0m[48;2;28;131;163m=[0m[48;2;27;127;160m=[0m[48;2;27;125;159m-[0m[48;2;27;125;159m-[0m[48;2;9;42;54m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;20;91;121m:[0m[48;2;26;119;160m-[0m[48;2;26;116;158m-[0m[48;2;25;115;157m-[0m[48;2;25;114;157m-[0m[48;2;20;93;128m:[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;14;75;105m:[0m[48;2;20;106;148m-[0m[48;2;18;102;144m-[0m[48;2;17;102;143m-[0m[48;2;16;101;142m-[0m[48;2;14;88;125m:[0m[48;2;0;6;8m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;6;52;74m.[0m[48;2;6;57;81m.[0m[48;2;4;48;68m.[0m[48;2;2;27;39m [0m[48;2;4;55;78m.[0m[48;2;5;84;118m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;1;77;108m:[0m[48;2;1;82;116m:[0m[48;2;0;81;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;113m:[0m[48;2;0;56;80m.[0m[48;2;0;0;0m [0m
[48;2;0;16;11m [0m[48;2;0;151;99m-[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;122m=[0m[48;2;0;46;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;1;53;38m.[0m[48;2;4;180;130m=[0m[48;2;4;177;129m=[0m[48;2;4;174;127m=[0m[48;2;6;178;132m=[0m[48;2;2;85;64m:[0m[48;2;0;0;0m [0m[48;2;3;84;65m:[0m[48;2;8;174;135m=[0m[48;2;7;169;133m=[0m[48;2;8;170;135m=[0m[48;2;9;169;136m=[0m[48;2;9;167;136m=[0m[48;2;2;38;31m.[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;7;81;72m:[0m[48;2;14;163;144m=[0m[48;2;14;158;142m=[0m[48;2;16;161;146m=[0m[48;2;15;158;146m=[0m[48;2;16;155;145m=[0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;15;118;118m-[0m[48;2;19;151;152m=[0m[48;2;20;148;152m=[0m[48;2;20;147;152m=[0m[48;2;21;147;154m=[0m[48;2;18;123;131m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;2;3m [0m[48;2;19;111;125m-[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;135;157m=[0m[48;2;26;137;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;6;32;40m [0m[48;2;27;132;162m=[0m[48;2;27;130;162m=[0m[48;2;27;128;161m=[0m[48;2;27;127;161m-[0m[48;2;28;128;163m=[0m[48;2;12;58;74m.[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;30;41m [0m[48;2;27;120;161m-[0m[48;2;26;117;158m-[0m[48;2;26;117;159m-[0m[48;2;25;114;156m-[0m[48;2;25;114;157m-[0m[48;2;9;44;61m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;18;103;145m-[0m[48;2;16;100;141m-[0m[48;2;16;100;142m-[0m[48;2;7;48;68m.[0m[48;2;0;0;0m [0m[48;2;0;3;5m [0m[48;2;0;1;2m [0m[48;2;1;12;18m [0m[48;2;8;77;109m:[0m[48;2;7;75;106m:[0m[48;2;6;76;108m:[0m[48;2;6;87;124m:[0m[48;2;6;88;125m:[0m[48;2;3;47;67m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;34;49m.[0m[48;2;2;83;117m:[0m[48;2;0;81;114m:[0m[48;2;1;82;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;114m:[0m[48;2;0;22;31m [0m[48;2;0;0;0m [0m
[48;2;0;128;84m-[0m[48;2;0;188;124m=[0m[48;2;0;182;120m=[0m[48;2;0;188;124m=[0m[48;2;0;163;107m=[0m[48;2;0;3;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;16;11m [0m[48;2;3;156;112m=[0m[48;2;4;178;130m=[0m[48;2;4;173;126m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;1;1m [0m[48;2;1;24;19m [0m[48;2;7;170;132m=[0m[48;2;7;170;134m=[0m[48;2;8;171;136m=[0m[48;2;9;168;135m=[0m[48;2;10;170;138m=[0m[48;2;7;108;89m:[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;7;6m [0m[48;2;12;145;128m=[0m[48;2;14;161;144m=[0m[48;2;15;158;144m=[0m[48;2;15;156;144m=[0m[48;2;17;158;148m=[0m[48;2;12;111;105m-[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;4;34;34m [0m[48;2;20;152;153m=[0m[48;2;20;148;152m=[0m[48;2;21;149;154m=[0m[48;2;21;145;152m=[0m[48;2;22;147;156m=[0m[48;2;9;61;65m.[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;38;43m.[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;137;159m=[0m[48;2;25;136;160m=[0m[48;2;24;129;152m-[0m[48;2;2;14;17m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;23;109;134m-[0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;27;128;161m=[0m[48;2;28;129;163m=[0m[48;2;23;109;139m-[0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;18;82;111m:[0m[48;2;27;119;160m-[0m[48;2;25;115;156m-[0m[48;2;25;115;156m-[0m[48;2;25;114;157m-[0m[48;2;21;102;141m-[0m[48;2;1;5;7m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;11;61;86m.[0m[48;2;19;104;147m-[0m[48;2;17;101;142m-[0m[48;2;16;101;143m-[0m[48;2;15;99;141m-[0m[48;2;14;94;133m:[0m[48;2;1;9;14m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;5;51;71m.[0m[48;2;9;92;130m:[0m[48;2;8;91;128m:[0m[48;2;7;90;127m:[0m[48;2;6;89;125m:[0m[48;2;5;83;119m:[0m[48;2;0;11;16m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;1;69;97m:[0m[48;2;0;81;115m:[0m[48;2;0;81;114m:[0m[48;2;0;80;113m:[0m[48;2;0;79;113m:[0m[48;2;0;66;94m.[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;181;119m=[0m[48;2;0;185;122m=[0m[48;2;0;186;123m=[0m[48;2;0;188;124m=[0m[48;2;0;165;109m=[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;32;23m [0m[48;2;3;149;108m-[0m[48;2;5;180;130m=[0m[48;2;4;176;129m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;9;6m [0m[48;2;0;0;0m [0m[48;2;3;81;63m:[0m[48;2;8;173;136m=[0m[48;2;8;169;134m=[0m[48;2;10;171;138m=[0m[48;2;9;168;136m=[0m[48;2;11;169;139m=[0m[48;2;3;48;40m.[0m[48;2;0;3;3m [0m[48;2;0;5;4m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;5;59;53m.[0m[48;2;15;162;145m=[0m[48;2;15;158;144m=[0m[48;2;16;159;147m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;5;44;42m.[0m[48;2;0;2;2m [0m[48;2;0;6;5m [0m[48;2;0;0;0m [0m[48;2;13;100;102m:[0m[48;2;21;150;154m=[0m[48;2;20;146;151m=[0m[48;2;21;147;154m=[0m[48;2;21;146;155m=[0m[48;2;21;134;143m=[0m[48;2;1;9;9m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;18;104;118m-[0m[48;2;25;139;160m=[0m[48;2;25;136;158m=[0m[48;2;25;134;158m=[0m[48;2;26;136;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;6;30;37m [0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;28;130;163m=[0m[48;2;27;126;160m-[0m[48;2;28;128;163m=[0m[48;2;15;68;87m:[0m[48;2;0;1;1m [0m[48;2;0;3;5m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;16;21m [0m[48;2;26;116;156m-[0m[48;2;25;116;158m-[0m[48;2;26;116;158m-[0m[48;2;24;112;154m-[0m[48;2;24;113;156m-[0m[48;2;12;58;81m.[0m[48;2;0;0;1m [0m[48;2;0;3;5m [0m[48;2;0;0;0m [0m[48;2;1;7;9m [0m[48;2;17;97;138m-[0m[48;2;17;102;144m-[0m[48;2;16;101;143m-[0m[48;2;15;98;139m-[0m[48;2;15;99;140m-[0m[48;2;9;60;86m.[0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;0;6;8m [0m[48;2;8;84;119m:[0m[48;2;7;90;127m:[0m[48;2;6;88;125m:[0m[48;2;6;87;122m:[0m[48;2;6;87;124m:[0m[48;2;3;58;81m.[0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;24;34m [0m[48;2;1;82;116m:[0m[48;2;0;81;113m:[0m[48;2;0;81;115m:[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;32;46m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m
[48;2;0;161;106m=[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;123m=[0m[48;2;1;187;125m=[0m[48;2;0;110;74m:[0m[48;2;0;89;61m:[0m[48;2;1;103;70m:[0m[48;2;1;119;82m-[0m[48;2;1;119;82m-[0m[48;2;1;89;62m:[0m[48;2;0;46;32m.[0m[48;2;1;89;63m:[0m[48;2;3;173;125m=[0m[48;2;5;180;130m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;3;96;71m:[0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;5;98;77m:[0m[48;2;8;170;135m=[0m[48;2;9;166;133m=[0m[48;2;10;170;138m=[0m[48;2;10;167;137m=[0m[48;2;11;168;140m=[0m[48;2;3;51;43m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;29;26m [0m[48;2;13;147;131m=[0m[48;2;15;158;143m=[0m[48;2;15;157;145m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;15;130;124m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;25;25m [0m[48;2;20;145;148m=[0m[48;2;20;148;153m=[0m[48;2;21;147;154m=[0m[48;2;21;144;153m=[0m[48;2;23;146;156m=[0m[48;2;12;79;85m:[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;4;25;29m [0m[48;2;24;137;157m=[0m[48;2;25;136;158m=[0m[48;2;25;136;160m=[0m[48;2;25;135;160m=[0m[48;2;27;135;162m=[0m[48;2;3;19;22m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;7;35;44m.[0m[48;2;27;128;161m=[0m[48;2;27;125;159m-[0m[48;2;27;128;162m=[0m[48;2;27;125;160m-[0m[48;2;28;127;163m-[0m[48;2;15;70;91m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;8;11m [0m[48;2;20;89;121m:[0m[48;2;25;116;157m-[0m[48;2;25;114;156m-[0m[48;2;24;113;156m-[0m[48;2;23;112;155m-[0m[48;2;23;108;150m-[0m[48;2;2;10;13m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;12;68;97m:[0m[48;2;19;103;145m-[0m[48;2;16;100;142m-[0m[48;2;16;100;142m-[0m[48;2;14;98;138m-[0m[48;2;13;97;137m-[0m[48;2;2;18;26m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;34;48m.[0m[48;2;8;90;128m:[0m[48;2;6;88;125m:[0m[48;2;7;89;125m:[0m[48;2;5;86;122m:[0m[48;2;5;86;122m:[0m[48;2;1;21;30m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;16m [0m[48;2;0;70;100m:[0m[48;2;0;81;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;73;104m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;56;36m.[0m[48;2;0;183;121m=[0m[48;2;0;187;124m=[0m[48;2;1;187;125m=[0m[48;2;0;184;124m=[0m[48;2;1;185;126m=[0m[48;2;1;110;75m:[0m[48;2;0;61;42m.[0m[48;2;1;71;49m.[0m[48;2;2;156;109m=[0m[48;2;3;182;128m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;5;180;130m=[0m[48;2;4;163;119m=[0m[48;2;4;120;89m-[0m[48;2;1;40;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;2;46;37m.[0m[48;2;10;171;137m=[0m[48;2;10;170;138m=[0m[48;2;10;168;138m=[0m[48;2;10;165;137m=[0m[48;2;11;164;138m=[0m[48;2;11;145;124m=[0m[48;2;6;84;73m:[0m[48;2;7;82;72m:[0m[48;2;11;119;106m-[0m[48;2;14;157;141m=[0m[48;2;14;144;131m=[0m[48;2;16;159;147m=[0m[48;2;16;157;147m=[0m[48;2;16;154;146m=[0m[48;2;17;153;146m=[0m[48;2;17;142;138m=[0m[48;2;9;73;71m:[0m[48;2;7;59;59m.[0m[48;2;11;86;87m:[0m[48;2;18;136;138m-[0m[48;2;20;147;152m=[0m[48;2;21;146;153m=[0m[48;2;21;145;154m=[0m[48;2;22;144;154m=[0m[48;2;22;141;152m=[0m[48;2;3;19;21m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;34;40m.[0m[48;2;26;138;160m=[0m[48;2;26;137;161m=[0m[48;2;25;134;159m=[0m[48;2;26;132;159m=[0m[48;2;26;131;159m=[0m[48;2;18;92;113m:[0m[48;2;13;62;76m.[0m[48;2;15;73;92m:[0m[48;2;24;114;143m-[0m[48;2;28;129;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;27;125;161m-[0m[48;2;27;124;160m-[0m[48;2;26;117;154m-[0m[48;2;16;70;92m:[0m[48;2;13;58;78m.[0m[48;2;17;79;106m:[0m[48;2;25;113;152m-[0m[48;2;23;105;142m-[0m[48;2;26;116;158m-[0m[48;2;25;114;157m-[0m[48;2;24;111;154m-[0m[48;2;23;109;151m-[0m[48;2;22;107;150m-[0m[48;2;12;63;88m:[0m[48;2;7;39;55m.[0m[48;2;10;53;76m.[0m[48;2;15;87;122m:[0m[48;2;19;103;146m-[0m[48;2;16;100;141m-[0m[48;2;15;99;140m-[0m[48;2;15;96;136m-[0m[48;2;13;97;137m-[0m[48;2;10;71;101m:[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;3;36;51m.[0m[48;2;8;90;127m:[0m[48;2;6;88;124m:[0m[48;2;5;86;122m:[0m[48;2;4;85;120m:[0m[48;2;4;86;121m:[0m[48;2;2;63;88m.[0m[48;2;0;41;58m.[0m[48;2;1;55;78m.[0m[48;2;0;78;111m:[0m[48;2;1;82;115m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;42;61m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;39;26m.[0m[48;2;0;126;84m-[0m[48;2;0;171;115m=[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;2;184;127m=[0m[48;2;2;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;4;174;125m=[0m[48;2;4;177;129m=[0m[48;2;3;113;83m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;3;60;49m.[0m[48;2;9;141;116m-[0m[48;2;11;168;140m=[0m[48;2;12;167;141m=[0m[48;2;13;166;142m=[0m[48;2;13;165;143m=[0m[48;2;14;164;143m=[0m[48;2;14;163;144m=[0m[48;2;11;121;108m-[0m[48;2;3;39;35m.[0m[48;2;1;14;13m [0m[48;2;13;124;115m-[0m[48;2;17;157;149m=[0m[48;2;18;156;150m=[0m[48;2;18;155;150m=[0m[48;2;19;154;151m=[0m[48;2;20;153;152m=[0m[48;2;19;148;149m=[0m[48;2;17;123;124m-[0m[48;2;21;149;154m=[0m[48;2;22;148;155m=[0m[48;2;22;147;156m=[0m[48;2;23;146;156m=[0m[48;2;23;145;157m=[0m[48;2;16;96;104m:[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;13;70;83m:[0m[48;2;24;126;149m-[0m[48;2;27;135;162m=[0m[48;2;27;134;162m=[0m[48;2;27;133;162m=[0m[48;2;27;132;162m=[0m[48;2;28;131;163m=[0m[48;2;26;123;154m-[0m[48;2;15;71;90m:[0m[48;2;7;35;45m.[0m[48;2;21;96;123m-[0m[48;2;27;125;160m-[0m[48;2;28;126;163m-[0m[48;2;28;124;163m-[0m[48;2;28;123;162m-[0m[48;2;28;122;162m-[0m[48;2;27;120;161m-[0m[48;2;22;99;133m-[0m[48;2;10;46;63m.[0m[48;2;0;4;6m [0m[48;2;15;72;99m:[0m[48;2;24;111;153m-[0m[48;2;24;111;155m-[0m[48;2;23;110;153m-[0m[48;2;22;109;152m-[0m[48;2;21;107;150m-[0m[48;2;20;106;149m-[0m[48;2;15;82;115m:[0m[48;2;14;75;106m:[0m[48;2;17;102;144m-[0m[48;2;16;100;142m-[0m[48;2;15;99;140m-[0m[48;2;14;98;139m-[0m[48;2;13;97;137m:[0m[48;2;3;28;41m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;5m [0m[48;2;4;57;80m.[0m[48;2;5;86;121m:[0m[48;2;5;87;122m:[0m[48;2;4;86;121m:[0m[48;2;2;84;119m:[0m[48;2;3;84;119m:[0m[48;2;1;82;117m:[0m[48;2;0;64;90m.[0m[48;2;0;67;95m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;77;110m:[0m[48;2;0;10;15m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;13;8m [0m[48;2;0;39;26m.[0m[48;2;0;56;38m.[0m[48;2;0;65;45m.[0m[48;2;1;68;47m.[0m[48;2;1;62;44m.[0m[48;2;0;48;34m.[0m[48;2;0;39;28m.[0m[48;2;4;156;113m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;6;177;133m=[0m[48;2;6;151;114m=[0m[48;2;3;94;71m:[0m[48;2;2;54;42m.[0m[48;2;2;46;36m.[0m[48;2;1;35;27m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;2;31;26m [0m[48;2;3;52;44m.[0m[48;2;4;60;51m.[0m[48;2;4;54;47m.[0m[48;2;3;35;31m [0m[48;2;1;10;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;31;29m [0m[48;2;6;51;50m.[0m[48;2;6;56;55m.[0m[48;2;6;48;48m.[0m[48;2;4;30;30m [0m[48;2;0;7;7m [0m[48;2;0;0;0m [0m[48;2;5;37;39m.[0m[48;2;5;38;40m.[0m[48;2;6;38;40m.[0m[48;2;5;37;40m.[0m[48;2;6;37;41m.[0m[48;2;2;12;14m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;10;12m [0m[48;2;6;33;40m.[0m[48;2;9;45;55m.[0m[48;2;9;48;59m.[0m[48;2;8;40;49m.[0m[48;2;5;23;29m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;4;18;23m [0m[48;2;8;36;47m.[0m[48;2;10;44;58m.[0m[48;2;9;42;56m.[0m[48;2;6;30;40m [0m[48;2;2;13;17m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;7;34;47m.[0m[48;2;8;39;55m.[0m[48;2;7;36;50m.[0m[48;2;4;24;35m [0m[48;2;1;9;13m [0m[48;2;0;0;0m [0m[48;2;1;11;15m [0m[48;2;4;26;37m [0m[48;2;4;25;36m [0m[48;2;3;25;36m [0m[48;2;3;25;35m [0m[48;2;3;24;34m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;1;20;29m [0m[48;2;1;37;52m.[0m[48;2;1;57;80m.[0m[48;2;1;61;86m.[0m[48;2;0;52;73m.[0m[48;2;0;44;62m.[0m[48;2;0;75;107m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;26;19m [0m[48;2;4;131;97m-[0m[48;2;5;175;131m=[0m[48;2;7;176;133m=[0m[48;2;7;175;134m=[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;7;151;120m=[0m[48;2;2;49;39m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;1;42;59m.[0m[48;2;2;68;95m:[0m[48;2;1;46;66m.[0m[48;2;0;21;30m [0m[48;2;0;3;5m [0m[48;2;0;40;56m.[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;78;111m:[0m[48;2;0;80;114m:[0m[48;2;0;18;26m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;30;22m [0m[48;2;2;57;44m.[0m[48;2;3;68;52m.[0m[48;2;2;63;49m.[0m[48;2;2;42;33m.[0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;1;48;68m.[0m[48;2;3;84;119m:[0m[48;2;1;53;74m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;21m [0m[48;2;0;73;104m:[0m[48;2;0;79;112m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;80;114m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;1;37;52m.[0m[48;2;2;83;118m:[0m[48;2;0;80;114m:[0m[48;2;0;64;90m.[0m[48;2;0;61;87m.[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;50;72m.[0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;27;38m [0m[48;2;0;59;83m.[0m[48;2;0;77;109m:[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;74;105m:[0m[48;2;0;65;93m.[0m[48;2;0;48;68m.[0m[48;2;0;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m


[49m[32mDandelionNER -- DandelionNER is a Qanary component 
[49m[92mFramework@GitHub:       https://github.com/WDAqua/Qanary 
[49m[36mComponents@GitHub:      https://github.com/WDAqua/Qanary-question-answering-components
[49m[94mComponent Version:      3.4.0       
[49m[34mSpring Boot Version:    2.6.7      
[47m[30mQanary System endpoint: http://localhost:8080 [49m[39m

[2m2023-10-27 12:15:49.882[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Starting Application v3.4.0 using Java 21 on fedora with PID 11762 (/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/target/qanary-component-NER-Dandelion-3.4.0.jar started by dennisschiese in /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion)
[2m2023-10-27 12:15:49.913[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Running with Spring Boot v2.6.7, Spring v5.3.19
[2m2023-10-27 12:15:49.944[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m The following 1 profile is active: "local"
[2m2023-10-27 12:16:18.820[0;39m [33m WARN[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse: initialized
[2m2023-10-27 12:16:19.719[0;39m [33m WARN[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m eu.wdaqua.qanary.communications.RestTemplateWithCaching was initialized
[2m2023-10-27 12:16:19.949[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@65e61854
[2m2023-10-27 12:16:19.988[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 12:16:20.333[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:16:20.472[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:16:20.525[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 12:16:20.625[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 12:16:22.873[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@27494e46
[2m2023-10-27 12:16:22.878[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 12:16:22.920[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 12:16:22.943[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:16:23.294[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":0,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T10:16:22.839"}
[2m2023-10-27 12:16:23.304[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 12:16:23.626[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6622a690
[2m2023-10-27 12:16:23.627[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 12:16:23.627[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:16:23.627[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:16:23.627[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 12:16:23.628[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 12:16:23.679[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@30b9eadd
[2m2023-10-27 12:16:23.680[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 12:16:23.680[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 12:16:23.680[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:16:23.681[0;39m [32mDEBUG[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":0,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T10:16:23.658"}
[2m2023-10-27 12:16:23.682[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 12:16:23.683[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m qanaryComponent: eu.wdaqua.qanary.component.dandelion.ner.Dandelion@3249a1ce
[2m2023-10-27 12:16:23.709[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.QanaryComponentConfiguration    [0;39m [2m:[0;39m Current Component Configuration: 
server.host                              = null
server.port                              = 8088
spring.application.name                  = DandelionNER
spring.application.description           = DandelionNER is a Qanary component
spring.boot.admin.url                    = http://localhost:8080
spring.boot.admin.client.url             = http://localhost:8080

[2m2023-10-27 12:16:23.890[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m location of component-description.ttl: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl
[2m2023-10-27 12:16:29.329[0;39m [33m WARN[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m could not find a Turtle service description at '/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl': org.apache.jena.riot.RiotNotFoundException: Not found: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl. Please consider to store a component description file to enable automatic pipeline compositions.
[2m2023-10-27 12:16:29.537[0;39m [32m INFO[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.qanary.commons.config.CacheConfig   [0;39m [2m:[0;39m cacheManager configuration: maximumSize=10000,expireAfterAccess=5s
[2m2023-10-27 12:16:39.556[0;39m [33m WARN[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36mConfigServletWebServerApplicationContext[0;39m [2m:[0;39m Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'; nested exception is org.springframework.boot.web.server.PortInUseException: Port 8088 is already in use
[2m2023-10-27 12:16:40.495[0;39m [31mERROR[0;39m [35m11762[0;39m [2m---[0;39m [2m[           main][0;39m [36mo.s.b.d.LoggingFailureAnalysisReporter  [0;39m [2m:[0;39m 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8088 was already in use.

Action:

Identify and stop the process that's listening on port 8088 or configure this application to listen on another port.


[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;19;12m [0m[48;2;0;71;47m.[0m[48;2;0;120;79m-[0m[48;2;0;165;109m=[0m[48;2;0;168;111m=[0m[48;2;0;153;101m-[0m[48;2;0;141;93m-[0m[48;2;0;162;107m=[0m[48;2;0;178;119m=[0m[48;2;0;168;113m=[0m[48;2;0;127;85m-[0m[48;2;0;85;58m:[0m[48;2;0;31;21m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;16;10m [0m[48;2;0;106;70m:[0m[48;2;0;169;111m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;98;64m:[0m[48;2;0;31;20m [0m[48;2;0;34;22m [0m[48;2;0;78;52m:[0m[48;2;0;25;17m [0m[48;2;0;46;30m.[0m[48;2;0;131;88m-[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;1;177;122m=[0m[48;2;1;114;79m:[0m[48;2;0;13;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;35;23m [0m[48;2;0;164;108m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;181;119m=[0m[48;2;0;54;35m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;23;15m [0m[48;2;0;75;50m.[0m[48;2;0;8;5m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;67;45m.[0m[48;2;1;137;94m-[0m[48;2;2;181;126m=[0m[48;2;3;182;128m=[0m[48;2;2;147;104m-[0m[48;2;0;8;6m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;1;0m [0m[48;2;0;18;12m [0m[48;2;0;167;110m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;157;104m=[0m[48;2;0;40;26m.[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;53;36m.[0m[48;2;2;126;88m-[0m[48;2;2;179;125m=[0m[48;2;2;177;125m=[0m[48;2;4;181;129m=[0m[48;2;1;76;55m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;122;80m-[0m[48;2;0;188;124m=[0m[48;2;0;169;111m=[0m[48;2;0;82;54m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;62;43m.[0m[48;2;3;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;3;178;126m=[0m[48;2;3;178;128m=[0m[48;2;3;116;84m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;9m [0m[48;2;1;31;24m [0m[48;2;2;42;34m.[0m[48;2;3;52;42m.[0m[48;2;3;49;41m.[0m[48;2;2;28;24m [0m[48;2;0;0;0m [0m[48;2;2;29;25m [0m[48;2;2;34;30m [0m[48;2;2;33;29m [0m[48;2;3;33;30m [0m[48;2;3;33;30m [0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;4;32;31m [0m[48;2;4;32;32m [0m[48;2;4;32;32m [0m[48;2;4;31;31m [0m[48;2;4;31;32m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;2;15;16m [0m[48;2;5;32;35m [0m[48;2;6;39;43m.[0m[48;2;6;35;39m.[0m[48;2;3;22;24m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;5;6m [0m[48;2;4;19;24m [0m[48;2;6;30;38m [0m[48;2;8;38;48m.[0m[48;2;8;38;49m.[0m[48;2;6;27;35m [0m[48;2;0;0;0m [0m[48;2;3;14;19m [0m[48;2;5;25;34m [0m[48;2;5;25;33m [0m[48;2;5;25;33m [0m[48;2;5;24;33m [0m[48;2;5;23;32m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;11;16m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;3;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;2;16;23m [0m[48;2;2;19;27m [0m[48;2;1;11;15m [0m[48;2;0;0;0m [0m[48;2;1;13;18m [0m[48;2;2;20;29m [0m[48;2;1;19;26m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;20m [0m[48;2;0;17;25m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;16;23m [0m
[48;2;0;0;0m [0m[48;2;0;30;20m [0m[48;2;0;188;124m=[0m[48;2;0;91;60m:[0m[48;2;0;14;9m [0m[48;2;0;38;25m [0m[48;2;0;126;83m-[0m[48;2;0;53;35m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;38;26m.[0m[48;2;2;177;124m=[0m[48;2;2;179;126m=[0m[48;2;3;180;128m=[0m[48;2;3;177;127m=[0m[48;2;4;178;130m=[0m[48;2;3;109;80m:[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;0;10;8m [0m[48;2;3;71;55m.[0m[48;2;6;126;99m-[0m[48;2;8;157;125m=[0m[48;2;10;171;138m=[0m[48;2;10;170;139m=[0m[48;2;11;169;139m=[0m[48;2;9;150;125m=[0m[48;2;10;151;128m=[0m[48;2;9;122;104m-[0m[48;2;12;159;138m=[0m[48;2;14;164;144m=[0m[48;2;15;162;145m=[0m[48;2;15;162;145m=[0m[48;2;16;160;146m=[0m[48;2;7;79;73m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;8;70;68m:[0m[48;2;19;154;151m=[0m[48;2;20;152;152m=[0m[48;2;20;151;153m=[0m[48;2;21;150;154m=[0m[48;2;21;149;154m=[0m[48;2;14;99;104m:[0m[48;2;19;124;132m-[0m[48;2;23;146;157m=[0m[48;2;23;145;157m=[0m[48;2;24;144;158m=[0m[48;2;24;142;158m=[0m[48;2;24;139;157m=[0m[48;2;20;115;132m-[0m[48;2;7;40;47m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;8;41;51m.[0m[48;2;18;87;108m:[0m[48;2;24;114;143m-[0m[48;2;27;127;161m=[0m[48;2;28;128;163m=[0m[48;2;28;128;163m=[0m[48;2;25;115;148m-[0m[48;2;25;112;146m-[0m[48;2;21;96;127m-[0m[48;2;24;107;142m-[0m[48;2;27;121;162m-[0m[48;2;27;120;161m-[0m[48;2;27;118;160m-[0m[48;2;26;117;159m-[0m[48;2;19;85;117m:[0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;17;86;121m:[0m[48;2;21;107;150m-[0m[48;2;20;106;148m-[0m[48;2;19;104;147m-[0m[48;2;18;103;145m-[0m[48;2;15;91;129m:[0m[48;2;7;45;63m.[0m[48;2;11;77;109m:[0m[48;2;13;94;133m:[0m[48;2;12;95;135m:[0m[48;2;12;95;135m:[0m[48;2;10;89;127m:[0m[48;2;6;57;81m.[0m[48;2;1;15;22m [0m[48;2;7;86;120m:[0m[48;2;6;79;112m:[0m[48;2;0;3;4m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;2;83;116m:[0m[48;2;2;84;118m:[0m[48;2;2;83;117m:[0m[48;2;1;82;116m:[0m[48;2;1;81;115m:[0m[48;2;0;54;77m.[0m
[48;2;0;1;0m [0m[48;2;0;60;39m.[0m[48;2;0;57;37m.[0m[48;2;0;42;27m.[0m[48;2;0;141;93m-[0m[48;2;0;188;124m=[0m[48;2;0;123;81m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;154;109m=[0m[48;2;4;181;129m=[0m[48;2;3;178;128m=[0m[48;2;4;176;128m=[0m[48;2;5;178;131m=[0m[48;2;2;71;52m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;65;50m.[0m[48;2;7;153;119m=[0m[48;2;9;173;136m=[0m[48;2;9;172;137m=[0m[48;2;10;171;138m=[0m[48;2;9;158;129m=[0m[48;2;4;72;59m:[0m[48;2;1;17;14m [0m[48;2;0;2;2m [0m[48;2;0;9;8m [0m[48;2;10;137;118m-[0m[48;2;14;164;144m=[0m[48;2;14;159;142m=[0m[48;2;14;159;143m=[0m[48;2;15;158;144m=[0m[48;2;14;149;137m=[0m[48;2;1;12;11m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;4;4m [0m[48;2;16;134;131m-[0m[48;2;19;152;151m=[0m[48;2;19;149;151m=[0m[48;2;20;149;153m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;18;123;130m-[0m[48;2;12;79;85m:[0m[48;2;11;73;79m:[0m[48;2;21;128;140m-[0m[48;2;23;140;156m=[0m[48;2;24;139;157m=[0m[48;2;24;139;158m=[0m[48;2;25;139;160m=[0m[48;2;23;126;146m-[0m[48;2;1;5;6m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;6;30;37m [0m[48;2;22;104;128m-[0m[48;2;28;131;163m=[0m[48;2;28;130;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;15;71;91m:[0m[48;2;4;19;24m [0m[48;2;0;3;4m [0m[48;2;0;3;4m [0m[48;2;17;75;99m:[0m[48;2;28;121;162m-[0m[48;2;26;117;157m-[0m[48;2;26;117;159m-[0m[48;2;25;115;157m-[0m[48;2;26;115;158m-[0m[48;2;6;30;42m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;5;28;39m [0m[48;2;21;107;150m-[0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;17;102;143m-[0m[48;2;17;102;143m-[0m[48;2;13;84;119m:[0m[48;2;9;60;85m.[0m[48;2;6;42;59m.[0m[48;2;8;63;89m.[0m[48;2;12;95;135m:[0m[48;2;11;94;133m:[0m[48;2;10;93;131m:[0m[48;2;8;82;116m:[0m[48;2;0;0;0m [0m[48;2;5;75;106m:[0m[48;2;3;41;57m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;1;45;63m.[0m[48;2;2;84;118m:[0m[48;2;1;81;114m:[0m[48;2;0;81;115m:[0m[48;2;0;80;114m:[0m[48;2;0;79;111m:[0m[48;2;0;14;20m [0m
[48;2;0;0;0m [0m[48;2;0;14;9m [0m[48;2;0;115;76m:[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;151;99m-[0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;3;161;114m=[0m[48;2;4;180;130m=[0m[48;2;4;176;129m=[0m[48;2;4;177;129m=[0m[48;2;5;168;125m=[0m[48;2;0;18;13m [0m[48;2;0;0;0m [0m[48;2;4;98;76m:[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;8;167;133m=[0m[48;2;9;168;136m=[0m[48;2;8;151;123m=[0m[48;2;1;28;23m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;14;12m [0m[48;2;12;150;132m=[0m[48;2;13;162;143m=[0m[48;2;14;160;144m=[0m[48;2;15;157;143m=[0m[48;2;16;159;147m=[0m[48;2;10;92;87m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;52;51m.[0m[48;2;20;153;152m=[0m[48;2;19;149;151m=[0m[48;2;21;150;154m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;12;83;88m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;12;76;86m:[0m[48;2;25;142;159m=[0m[48;2;24;137;155m=[0m[48;2;24;137;158m=[0m[48;2;25;136;158m=[0m[48;2;22;120;141m-[0m[48;2;0;4;5m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;9;47;58m.[0m[48;2;26;129;159m=[0m[48;2;28;131;163m=[0m[48;2;27;127;160m=[0m[48;2;27;125;159m-[0m[48;2;27;125;159m-[0m[48;2;9;42;54m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;20;91;121m:[0m[48;2;26;119;160m-[0m[48;2;26;116;158m-[0m[48;2;25;115;157m-[0m[48;2;25;114;157m-[0m[48;2;20;93;128m:[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;14;75;105m:[0m[48;2;20;106;148m-[0m[48;2;18;102;144m-[0m[48;2;17;102;143m-[0m[48;2;16;101;142m-[0m[48;2;14;88;125m:[0m[48;2;0;6;8m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;6;52;74m.[0m[48;2;6;57;81m.[0m[48;2;4;48;68m.[0m[48;2;2;27;39m [0m[48;2;4;55;78m.[0m[48;2;5;84;118m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;1;77;108m:[0m[48;2;1;82;116m:[0m[48;2;0;81;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;113m:[0m[48;2;0;56;80m.[0m[48;2;0;0;0m [0m
[48;2;0;16;11m [0m[48;2;0;151;99m-[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;122m=[0m[48;2;0;46;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;1;53;38m.[0m[48;2;4;180;130m=[0m[48;2;4;177;129m=[0m[48;2;4;174;127m=[0m[48;2;6;178;132m=[0m[48;2;2;85;64m:[0m[48;2;0;0;0m [0m[48;2;3;84;65m:[0m[48;2;8;174;135m=[0m[48;2;7;169;133m=[0m[48;2;8;170;135m=[0m[48;2;9;169;136m=[0m[48;2;9;167;136m=[0m[48;2;2;38;31m.[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;7;81;72m:[0m[48;2;14;163;144m=[0m[48;2;14;158;142m=[0m[48;2;16;161;146m=[0m[48;2;15;158;146m=[0m[48;2;16;155;145m=[0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;15;118;118m-[0m[48;2;19;151;152m=[0m[48;2;20;148;152m=[0m[48;2;20;147;152m=[0m[48;2;21;147;154m=[0m[48;2;18;123;131m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;2;3m [0m[48;2;19;111;125m-[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;135;157m=[0m[48;2;26;137;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;6;32;40m [0m[48;2;27;132;162m=[0m[48;2;27;130;162m=[0m[48;2;27;128;161m=[0m[48;2;27;127;161m-[0m[48;2;28;128;163m=[0m[48;2;12;58;74m.[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;30;41m [0m[48;2;27;120;161m-[0m[48;2;26;117;158m-[0m[48;2;26;117;159m-[0m[48;2;25;114;156m-[0m[48;2;25;114;157m-[0m[48;2;9;44;61m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;18;103;145m-[0m[48;2;16;100;141m-[0m[48;2;16;100;142m-[0m[48;2;7;48;68m.[0m[48;2;0;0;0m [0m[48;2;0;3;5m [0m[48;2;0;1;2m [0m[48;2;1;12;18m [0m[48;2;8;77;109m:[0m[48;2;7;75;106m:[0m[48;2;6;76;108m:[0m[48;2;6;87;124m:[0m[48;2;6;88;125m:[0m[48;2;3;47;67m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;34;49m.[0m[48;2;2;83;117m:[0m[48;2;0;81;114m:[0m[48;2;1;82;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;114m:[0m[48;2;0;22;31m [0m[48;2;0;0;0m [0m
[48;2;0;128;84m-[0m[48;2;0;188;124m=[0m[48;2;0;182;120m=[0m[48;2;0;188;124m=[0m[48;2;0;163;107m=[0m[48;2;0;3;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;16;11m [0m[48;2;3;156;112m=[0m[48;2;4;178;130m=[0m[48;2;4;173;126m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;1;1m [0m[48;2;1;24;19m [0m[48;2;7;170;132m=[0m[48;2;7;170;134m=[0m[48;2;8;171;136m=[0m[48;2;9;168;135m=[0m[48;2;10;170;138m=[0m[48;2;7;108;89m:[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;7;6m [0m[48;2;12;145;128m=[0m[48;2;14;161;144m=[0m[48;2;15;158;144m=[0m[48;2;15;156;144m=[0m[48;2;17;158;148m=[0m[48;2;12;111;105m-[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;4;34;34m [0m[48;2;20;152;153m=[0m[48;2;20;148;152m=[0m[48;2;21;149;154m=[0m[48;2;21;145;152m=[0m[48;2;22;147;156m=[0m[48;2;9;61;65m.[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;38;43m.[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;137;159m=[0m[48;2;25;136;160m=[0m[48;2;24;129;152m-[0m[48;2;2;14;17m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;23;109;134m-[0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;27;128;161m=[0m[48;2;28;129;163m=[0m[48;2;23;109;139m-[0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;18;82;111m:[0m[48;2;27;119;160m-[0m[48;2;25;115;156m-[0m[48;2;25;115;156m-[0m[48;2;25;114;157m-[0m[48;2;21;102;141m-[0m[48;2;1;5;7m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;11;61;86m.[0m[48;2;19;104;147m-[0m[48;2;17;101;142m-[0m[48;2;16;101;143m-[0m[48;2;15;99;141m-[0m[48;2;14;94;133m:[0m[48;2;1;9;14m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;5;51;71m.[0m[48;2;9;92;130m:[0m[48;2;8;91;128m:[0m[48;2;7;90;127m:[0m[48;2;6;89;125m:[0m[48;2;5;83;119m:[0m[48;2;0;11;16m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;1;69;97m:[0m[48;2;0;81;115m:[0m[48;2;0;81;114m:[0m[48;2;0;80;113m:[0m[48;2;0;79;113m:[0m[48;2;0;66;94m.[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;181;119m=[0m[48;2;0;185;122m=[0m[48;2;0;186;123m=[0m[48;2;0;188;124m=[0m[48;2;0;165;109m=[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;32;23m [0m[48;2;3;149;108m-[0m[48;2;5;180;130m=[0m[48;2;4;176;129m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;9;6m [0m[48;2;0;0;0m [0m[48;2;3;81;63m:[0m[48;2;8;173;136m=[0m[48;2;8;169;134m=[0m[48;2;10;171;138m=[0m[48;2;9;168;136m=[0m[48;2;11;169;139m=[0m[48;2;3;48;40m.[0m[48;2;0;3;3m [0m[48;2;0;5;4m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;5;59;53m.[0m[48;2;15;162;145m=[0m[48;2;15;158;144m=[0m[48;2;16;159;147m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;5;44;42m.[0m[48;2;0;2;2m [0m[48;2;0;6;5m [0m[48;2;0;0;0m [0m[48;2;13;100;102m:[0m[48;2;21;150;154m=[0m[48;2;20;146;151m=[0m[48;2;21;147;154m=[0m[48;2;21;146;155m=[0m[48;2;21;134;143m=[0m[48;2;1;9;9m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;18;104;118m-[0m[48;2;25;139;160m=[0m[48;2;25;136;158m=[0m[48;2;25;134;158m=[0m[48;2;26;136;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;6;30;37m [0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;28;130;163m=[0m[48;2;27;126;160m-[0m[48;2;28;128;163m=[0m[48;2;15;68;87m:[0m[48;2;0;1;1m [0m[48;2;0;3;5m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;16;21m [0m[48;2;26;116;156m-[0m[48;2;25;116;158m-[0m[48;2;26;116;158m-[0m[48;2;24;112;154m-[0m[48;2;24;113;156m-[0m[48;2;12;58;81m.[0m[48;2;0;0;1m [0m[48;2;0;3;5m [0m[48;2;0;0;0m [0m[48;2;1;7;9m [0m[48;2;17;97;138m-[0m[48;2;17;102;144m-[0m[48;2;16;101;143m-[0m[48;2;15;98;139m-[0m[48;2;15;99;140m-[0m[48;2;9;60;86m.[0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;0;6;8m [0m[48;2;8;84;119m:[0m[48;2;7;90;127m:[0m[48;2;6;88;125m:[0m[48;2;6;87;122m:[0m[48;2;6;87;124m:[0m[48;2;3;58;81m.[0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;24;34m [0m[48;2;1;82;116m:[0m[48;2;0;81;113m:[0m[48;2;0;81;115m:[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;32;46m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m
[48;2;0;161;106m=[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;123m=[0m[48;2;1;187;125m=[0m[48;2;0;110;74m:[0m[48;2;0;89;61m:[0m[48;2;1;103;70m:[0m[48;2;1;119;82m-[0m[48;2;1;119;82m-[0m[48;2;1;89;62m:[0m[48;2;0;46;32m.[0m[48;2;1;89;63m:[0m[48;2;3;173;125m=[0m[48;2;5;180;130m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;3;96;71m:[0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;5;98;77m:[0m[48;2;8;170;135m=[0m[48;2;9;166;133m=[0m[48;2;10;170;138m=[0m[48;2;10;167;137m=[0m[48;2;11;168;140m=[0m[48;2;3;51;43m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;29;26m [0m[48;2;13;147;131m=[0m[48;2;15;158;143m=[0m[48;2;15;157;145m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;15;130;124m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;25;25m [0m[48;2;20;145;148m=[0m[48;2;20;148;153m=[0m[48;2;21;147;154m=[0m[48;2;21;144;153m=[0m[48;2;23;146;156m=[0m[48;2;12;79;85m:[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;4;25;29m [0m[48;2;24;137;157m=[0m[48;2;25;136;158m=[0m[48;2;25;136;160m=[0m[48;2;25;135;160m=[0m[48;2;27;135;162m=[0m[48;2;3;19;22m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;7;35;44m.[0m[48;2;27;128;161m=[0m[48;2;27;125;159m-[0m[48;2;27;128;162m=[0m[48;2;27;125;160m-[0m[48;2;28;127;163m-[0m[48;2;15;70;91m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;8;11m [0m[48;2;20;89;121m:[0m[48;2;25;116;157m-[0m[48;2;25;114;156m-[0m[48;2;24;113;156m-[0m[48;2;23;112;155m-[0m[48;2;23;108;150m-[0m[48;2;2;10;13m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;12;68;97m:[0m[48;2;19;103;145m-[0m[48;2;16;100;142m-[0m[48;2;16;100;142m-[0m[48;2;14;98;138m-[0m[48;2;13;97;137m-[0m[48;2;2;18;26m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;34;48m.[0m[48;2;8;90;128m:[0m[48;2;6;88;125m:[0m[48;2;7;89;125m:[0m[48;2;5;86;122m:[0m[48;2;5;86;122m:[0m[48;2;1;21;30m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;16m [0m[48;2;0;70;100m:[0m[48;2;0;81;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;73;104m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;56;36m.[0m[48;2;0;183;121m=[0m[48;2;0;187;124m=[0m[48;2;1;187;125m=[0m[48;2;0;184;124m=[0m[48;2;1;185;126m=[0m[48;2;1;110;75m:[0m[48;2;0;61;42m.[0m[48;2;1;71;49m.[0m[48;2;2;156;109m=[0m[48;2;3;182;128m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;5;180;130m=[0m[48;2;4;163;119m=[0m[48;2;4;120;89m-[0m[48;2;1;40;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;2;46;37m.[0m[48;2;10;171;137m=[0m[48;2;10;170;138m=[0m[48;2;10;168;138m=[0m[48;2;10;165;137m=[0m[48;2;11;164;138m=[0m[48;2;11;145;124m=[0m[48;2;6;84;73m:[0m[48;2;7;82;72m:[0m[48;2;11;119;106m-[0m[48;2;14;157;141m=[0m[48;2;14;144;131m=[0m[48;2;16;159;147m=[0m[48;2;16;157;147m=[0m[48;2;16;154;146m=[0m[48;2;17;153;146m=[0m[48;2;17;142;138m=[0m[48;2;9;73;71m:[0m[48;2;7;59;59m.[0m[48;2;11;86;87m:[0m[48;2;18;136;138m-[0m[48;2;20;147;152m=[0m[48;2;21;146;153m=[0m[48;2;21;145;154m=[0m[48;2;22;144;154m=[0m[48;2;22;141;152m=[0m[48;2;3;19;21m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;34;40m.[0m[48;2;26;138;160m=[0m[48;2;26;137;161m=[0m[48;2;25;134;159m=[0m[48;2;26;132;159m=[0m[48;2;26;131;159m=[0m[48;2;18;92;113m:[0m[48;2;13;62;76m.[0m[48;2;15;73;92m:[0m[48;2;24;114;143m-[0m[48;2;28;129;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;27;125;161m-[0m[48;2;27;124;160m-[0m[48;2;26;117;154m-[0m[48;2;16;70;92m:[0m[48;2;13;58;78m.[0m[48;2;17;79;106m:[0m[48;2;25;113;152m-[0m[48;2;23;105;142m-[0m[48;2;26;116;158m-[0m[48;2;25;114;157m-[0m[48;2;24;111;154m-[0m[48;2;23;109;151m-[0m[48;2;22;107;150m-[0m[48;2;12;63;88m:[0m[48;2;7;39;55m.[0m[48;2;10;53;76m.[0m[48;2;15;87;122m:[0m[48;2;19;103;146m-[0m[48;2;16;100;141m-[0m[48;2;15;99;140m-[0m[48;2;15;96;136m-[0m[48;2;13;97;137m-[0m[48;2;10;71;101m:[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;3;36;51m.[0m[48;2;8;90;127m:[0m[48;2;6;88;124m:[0m[48;2;5;86;122m:[0m[48;2;4;85;120m:[0m[48;2;4;86;121m:[0m[48;2;2;63;88m.[0m[48;2;0;41;58m.[0m[48;2;1;55;78m.[0m[48;2;0;78;111m:[0m[48;2;1;82;115m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;42;61m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;39;26m.[0m[48;2;0;126;84m-[0m[48;2;0;171;115m=[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;2;184;127m=[0m[48;2;2;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;4;174;125m=[0m[48;2;4;177;129m=[0m[48;2;3;113;83m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;3;60;49m.[0m[48;2;9;141;116m-[0m[48;2;11;168;140m=[0m[48;2;12;167;141m=[0m[48;2;13;166;142m=[0m[48;2;13;165;143m=[0m[48;2;14;164;143m=[0m[48;2;14;163;144m=[0m[48;2;11;121;108m-[0m[48;2;3;39;35m.[0m[48;2;1;14;13m [0m[48;2;13;124;115m-[0m[48;2;17;157;149m=[0m[48;2;18;156;150m=[0m[48;2;18;155;150m=[0m[48;2;19;154;151m=[0m[48;2;20;153;152m=[0m[48;2;19;148;149m=[0m[48;2;17;123;124m-[0m[48;2;21;149;154m=[0m[48;2;22;148;155m=[0m[48;2;22;147;156m=[0m[48;2;23;146;156m=[0m[48;2;23;145;157m=[0m[48;2;16;96;104m:[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;13;70;83m:[0m[48;2;24;126;149m-[0m[48;2;27;135;162m=[0m[48;2;27;134;162m=[0m[48;2;27;133;162m=[0m[48;2;27;132;162m=[0m[48;2;28;131;163m=[0m[48;2;26;123;154m-[0m[48;2;15;71;90m:[0m[48;2;7;35;45m.[0m[48;2;21;96;123m-[0m[48;2;27;125;160m-[0m[48;2;28;126;163m-[0m[48;2;28;124;163m-[0m[48;2;28;123;162m-[0m[48;2;28;122;162m-[0m[48;2;27;120;161m-[0m[48;2;22;99;133m-[0m[48;2;10;46;63m.[0m[48;2;0;4;6m [0m[48;2;15;72;99m:[0m[48;2;24;111;153m-[0m[48;2;24;111;155m-[0m[48;2;23;110;153m-[0m[48;2;22;109;152m-[0m[48;2;21;107;150m-[0m[48;2;20;106;149m-[0m[48;2;15;82;115m:[0m[48;2;14;75;106m:[0m[48;2;17;102;144m-[0m[48;2;16;100;142m-[0m[48;2;15;99;140m-[0m[48;2;14;98;139m-[0m[48;2;13;97;137m:[0m[48;2;3;28;41m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;5m [0m[48;2;4;57;80m.[0m[48;2;5;86;121m:[0m[48;2;5;87;122m:[0m[48;2;4;86;121m:[0m[48;2;2;84;119m:[0m[48;2;3;84;119m:[0m[48;2;1;82;117m:[0m[48;2;0;64;90m.[0m[48;2;0;67;95m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;77;110m:[0m[48;2;0;10;15m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;13;8m [0m[48;2;0;39;26m.[0m[48;2;0;56;38m.[0m[48;2;0;65;45m.[0m[48;2;1;68;47m.[0m[48;2;1;62;44m.[0m[48;2;0;48;34m.[0m[48;2;0;39;28m.[0m[48;2;4;156;113m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;6;177;133m=[0m[48;2;6;151;114m=[0m[48;2;3;94;71m:[0m[48;2;2;54;42m.[0m[48;2;2;46;36m.[0m[48;2;1;35;27m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;2;31;26m [0m[48;2;3;52;44m.[0m[48;2;4;60;51m.[0m[48;2;4;54;47m.[0m[48;2;3;35;31m [0m[48;2;1;10;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;31;29m [0m[48;2;6;51;50m.[0m[48;2;6;56;55m.[0m[48;2;6;48;48m.[0m[48;2;4;30;30m [0m[48;2;0;7;7m [0m[48;2;0;0;0m [0m[48;2;5;37;39m.[0m[48;2;5;38;40m.[0m[48;2;6;38;40m.[0m[48;2;5;37;40m.[0m[48;2;6;37;41m.[0m[48;2;2;12;14m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;10;12m [0m[48;2;6;33;40m.[0m[48;2;9;45;55m.[0m[48;2;9;48;59m.[0m[48;2;8;40;49m.[0m[48;2;5;23;29m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;4;18;23m [0m[48;2;8;36;47m.[0m[48;2;10;44;58m.[0m[48;2;9;42;56m.[0m[48;2;6;30;40m [0m[48;2;2;13;17m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;7;34;47m.[0m[48;2;8;39;55m.[0m[48;2;7;36;50m.[0m[48;2;4;24;35m [0m[48;2;1;9;13m [0m[48;2;0;0;0m [0m[48;2;1;11;15m [0m[48;2;4;26;37m [0m[48;2;4;25;36m [0m[48;2;3;25;36m [0m[48;2;3;25;35m [0m[48;2;3;24;34m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;1;20;29m [0m[48;2;1;37;52m.[0m[48;2;1;57;80m.[0m[48;2;1;61;86m.[0m[48;2;0;52;73m.[0m[48;2;0;44;62m.[0m[48;2;0;75;107m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;26;19m [0m[48;2;4;131;97m-[0m[48;2;5;175;131m=[0m[48;2;7;176;133m=[0m[48;2;7;175;134m=[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;7;151;120m=[0m[48;2;2;49;39m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;1;42;59m.[0m[48;2;2;68;95m:[0m[48;2;1;46;66m.[0m[48;2;0;21;30m [0m[48;2;0;3;5m [0m[48;2;0;40;56m.[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;78;111m:[0m[48;2;0;80;114m:[0m[48;2;0;18;26m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;30;22m [0m[48;2;2;57;44m.[0m[48;2;3;68;52m.[0m[48;2;2;63;49m.[0m[48;2;2;42;33m.[0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;1;48;68m.[0m[48;2;3;84;119m:[0m[48;2;1;53;74m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;21m [0m[48;2;0;73;104m:[0m[48;2;0;79;112m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;80;114m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;1;37;52m.[0m[48;2;2;83;118m:[0m[48;2;0;80;114m:[0m[48;2;0;64;90m.[0m[48;2;0;61;87m.[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;50;72m.[0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;27;38m [0m[48;2;0;59;83m.[0m[48;2;0;77;109m:[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;74;105m:[0m[48;2;0;65;93m.[0m[48;2;0;48;68m.[0m[48;2;0;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m


[49m[32mDandelionNER -- DandelionNER is a Qanary component 
[49m[92mFramework@GitHub:       https://github.com/WDAqua/Qanary 
[49m[36mComponents@GitHub:      https://github.com/WDAqua/Qanary-question-answering-components
[49m[94mComponent Version:      3.4.0       
[49m[34mSpring Boot Version:    2.6.7      
[47m[30mQanary System endpoint: http://localhost:8080 [49m[39m

[2m2023-10-27 12:18:17.182[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Starting Application v3.4.0 using Java 21 on fedora with PID 12774 (/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/target/qanary-component-NER-Dandelion-3.4.0.jar started by dennisschiese in /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion)
[2m2023-10-27 12:18:17.185[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Running with Spring Boot v2.6.7, Spring v5.3.19
[2m2023-10-27 12:18:17.186[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m The following 1 profile is active: "local"
[2m2023-10-27 12:18:19.757[0;39m [33m WARN[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse: initialized
[2m2023-10-27 12:18:19.837[0;39m [33m WARN[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m eu.wdaqua.qanary.communications.RestTemplateWithCaching was initialized
[2m2023-10-27 12:18:19.860[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6b5966e1
[2m2023-10-27 12:18:19.863[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 12:18:19.887[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:18:19.897[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:18:19.900[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 12:18:19.907[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 12:18:20.369[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@66d57c1b
[2m2023-10-27 12:18:20.371[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 12:18:20.374[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 12:18:20.378[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:18:20.421[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":0,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T10:18:20.346"}
[2m2023-10-27 12:18:20.425[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 12:18:20.445[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6b9c69a9
[2m2023-10-27 12:18:20.445[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 12:18:20.445[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:18:20.445[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:18:20.446[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 12:18:20.446[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 12:18:20.496[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@6622a690
[2m2023-10-27 12:18:20.496[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 12:18:20.496[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 12:18:20.496[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 12:18:20.496[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T10:18:20.477"}
[2m2023-10-27 12:18:20.497[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 12:18:20.498[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m qanaryComponent: eu.wdaqua.qanary.component.dandelion.ner.Dandelion@412c995d
[2m2023-10-27 12:18:20.502[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.QanaryComponentConfiguration    [0;39m [2m:[0;39m Current Component Configuration: 
server.host                              = null
server.port                              = 8323
spring.application.name                  = DandelionNER
spring.application.description           = DandelionNER is a Qanary component
spring.boot.admin.url                    = http://localhost:8080
spring.boot.admin.client.url             = http://localhost:8080

[2m2023-10-27 12:18:20.515[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m location of component-description.ttl: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl
[2m2023-10-27 12:18:20.911[0;39m [33m WARN[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m could not find a Turtle service description at '/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl': org.apache.jena.riot.RiotNotFoundException: Not found: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl. Please consider to store a component description file to enable automatic pipeline compositions.
[2m2023-10-27 12:18:20.927[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.qanary.commons.config.CacheConfig   [0;39m [2m:[0;39m cacheManager configuration: maximumSize=10000,expireAfterAccess=5s
[2m2023-10-27 12:18:21.844[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Started Application in 5.296 seconds (JVM running for 6.004)
[2m2023-10-27 12:18:22.013[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[gistrationTask1][0;39m [36md.c.b.a.c.r.ApplicationRegistrator      [0;39m [2m:[0;39m Application registered itself as 3ef7770eb927
[2m2023-10-27 13:37:21.924[0;39m [33m WARN[0;39m [35m12774[0;39m [2m---[0;39m [2m[gistrationTask1][0;39m [36md.c.b.a.c.r.ApplicationRegistrator      [0;39m [2m:[0;39m Failed to register application as Application(name=DandelionNER, managementUrl=http://0.0.0.0:8323/actuator, healthUrl=http://0.0.0.0:8323/actuator/health, serviceUrl=http://0.0.0.0:8323/) at spring-boot-admin ([http://localhost:8080/instances]): I/O error on POST request for "http://localhost:8080/instances": Connect to localhost:8080 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused; nested exception is org.apache.http.conn.HttpHostConnectException: Connect to localhost:8080 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused. Further attempts are logged on DEBUG level

[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;19;12m [0m[48;2;0;71;47m.[0m[48;2;0;120;79m-[0m[48;2;0;165;109m=[0m[48;2;0;168;111m=[0m[48;2;0;153;101m-[0m[48;2;0;141;93m-[0m[48;2;0;162;107m=[0m[48;2;0;178;119m=[0m[48;2;0;168;113m=[0m[48;2;0;127;85m-[0m[48;2;0;85;58m:[0m[48;2;0;31;21m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;16;10m [0m[48;2;0;106;70m:[0m[48;2;0;169;111m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;98;64m:[0m[48;2;0;31;20m [0m[48;2;0;34;22m [0m[48;2;0;78;52m:[0m[48;2;0;25;17m [0m[48;2;0;46;30m.[0m[48;2;0;131;88m-[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;1;177;122m=[0m[48;2;1;114;79m:[0m[48;2;0;13;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;35;23m [0m[48;2;0;164;108m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;181;119m=[0m[48;2;0;54;35m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;23;15m [0m[48;2;0;75;50m.[0m[48;2;0;8;5m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;67;45m.[0m[48;2;1;137;94m-[0m[48;2;2;181;126m=[0m[48;2;3;182;128m=[0m[48;2;2;147;104m-[0m[48;2;0;8;6m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;1;0m [0m[48;2;0;18;12m [0m[48;2;0;167;110m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;157;104m=[0m[48;2;0;40;26m.[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;53;36m.[0m[48;2;2;126;88m-[0m[48;2;2;179;125m=[0m[48;2;2;177;125m=[0m[48;2;4;181;129m=[0m[48;2;1;76;55m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;122;80m-[0m[48;2;0;188;124m=[0m[48;2;0;169;111m=[0m[48;2;0;82;54m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;62;43m.[0m[48;2;3;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;3;178;126m=[0m[48;2;3;178;128m=[0m[48;2;3;116;84m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;9m [0m[48;2;1;31;24m [0m[48;2;2;42;34m.[0m[48;2;3;52;42m.[0m[48;2;3;49;41m.[0m[48;2;2;28;24m [0m[48;2;0;0;0m [0m[48;2;2;29;25m [0m[48;2;2;34;30m [0m[48;2;2;33;29m [0m[48;2;3;33;30m [0m[48;2;3;33;30m [0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;4;32;31m [0m[48;2;4;32;32m [0m[48;2;4;32;32m [0m[48;2;4;31;31m [0m[48;2;4;31;32m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;2;15;16m [0m[48;2;5;32;35m [0m[48;2;6;39;43m.[0m[48;2;6;35;39m.[0m[48;2;3;22;24m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;5;6m [0m[48;2;4;19;24m [0m[48;2;6;30;38m [0m[48;2;8;38;48m.[0m[48;2;8;38;49m.[0m[48;2;6;27;35m [0m[48;2;0;0;0m [0m[48;2;3;14;19m [0m[48;2;5;25;34m [0m[48;2;5;25;33m [0m[48;2;5;25;33m [0m[48;2;5;24;33m [0m[48;2;5;23;32m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;11;16m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;3;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;2;16;23m [0m[48;2;2;19;27m [0m[48;2;1;11;15m [0m[48;2;0;0;0m [0m[48;2;1;13;18m [0m[48;2;2;20;29m [0m[48;2;1;19;26m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;20m [0m[48;2;0;17;25m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;16;23m [0m
[48;2;0;0;0m [0m[48;2;0;30;20m [0m[48;2;0;188;124m=[0m[48;2;0;91;60m:[0m[48;2;0;14;9m [0m[48;2;0;38;25m [0m[48;2;0;126;83m-[0m[48;2;0;53;35m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;38;26m.[0m[48;2;2;177;124m=[0m[48;2;2;179;126m=[0m[48;2;3;180;128m=[0m[48;2;3;177;127m=[0m[48;2;4;178;130m=[0m[48;2;3;109;80m:[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;0;10;8m [0m[48;2;3;71;55m.[0m[48;2;6;126;99m-[0m[48;2;8;157;125m=[0m[48;2;10;171;138m=[0m[48;2;10;170;139m=[0m[48;2;11;169;139m=[0m[48;2;9;150;125m=[0m[48;2;10;151;128m=[0m[48;2;9;122;104m-[0m[48;2;12;159;138m=[0m[48;2;14;164;144m=[0m[48;2;15;162;145m=[0m[48;2;15;162;145m=[0m[48;2;16;160;146m=[0m[48;2;7;79;73m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;8;70;68m:[0m[48;2;19;154;151m=[0m[48;2;20;152;152m=[0m[48;2;20;151;153m=[0m[48;2;21;150;154m=[0m[48;2;21;149;154m=[0m[48;2;14;99;104m:[0m[48;2;19;124;132m-[0m[48;2;23;146;157m=[0m[48;2;23;145;157m=[0m[48;2;24;144;158m=[0m[48;2;24;142;158m=[0m[48;2;24;139;157m=[0m[48;2;20;115;132m-[0m[48;2;7;40;47m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;8;41;51m.[0m[48;2;18;87;108m:[0m[48;2;24;114;143m-[0m[48;2;27;127;161m=[0m[48;2;28;128;163m=[0m[48;2;28;128;163m=[0m[48;2;25;115;148m-[0m[48;2;25;112;146m-[0m[48;2;21;96;127m-[0m[48;2;24;107;142m-[0m[48;2;27;121;162m-[0m[48;2;27;120;161m-[0m[48;2;27;118;160m-[0m[48;2;26;117;159m-[0m[48;2;19;85;117m:[0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;17;86;121m:[0m[48;2;21;107;150m-[0m[48;2;20;106;148m-[0m[48;2;19;104;147m-[0m[48;2;18;103;145m-[0m[48;2;15;91;129m:[0m[48;2;7;45;63m.[0m[48;2;11;77;109m:[0m[48;2;13;94;133m:[0m[48;2;12;95;135m:[0m[48;2;12;95;135m:[0m[48;2;10;89;127m:[0m[48;2;6;57;81m.[0m[48;2;1;15;22m [0m[48;2;7;86;120m:[0m[48;2;6;79;112m:[0m[48;2;0;3;4m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;2;83;116m:[0m[48;2;2;84;118m:[0m[48;2;2;83;117m:[0m[48;2;1;82;116m:[0m[48;2;1;81;115m:[0m[48;2;0;54;77m.[0m
[48;2;0;1;0m [0m[48;2;0;60;39m.[0m[48;2;0;57;37m.[0m[48;2;0;42;27m.[0m[48;2;0;141;93m-[0m[48;2;0;188;124m=[0m[48;2;0;123;81m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;154;109m=[0m[48;2;4;181;129m=[0m[48;2;3;178;128m=[0m[48;2;4;176;128m=[0m[48;2;5;178;131m=[0m[48;2;2;71;52m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;65;50m.[0m[48;2;7;153;119m=[0m[48;2;9;173;136m=[0m[48;2;9;172;137m=[0m[48;2;10;171;138m=[0m[48;2;9;158;129m=[0m[48;2;4;72;59m:[0m[48;2;1;17;14m [0m[48;2;0;2;2m [0m[48;2;0;9;8m [0m[48;2;10;137;118m-[0m[48;2;14;164;144m=[0m[48;2;14;159;142m=[0m[48;2;14;159;143m=[0m[48;2;15;158;144m=[0m[48;2;14;149;137m=[0m[48;2;1;12;11m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;4;4m [0m[48;2;16;134;131m-[0m[48;2;19;152;151m=[0m[48;2;19;149;151m=[0m[48;2;20;149;153m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;18;123;130m-[0m[48;2;12;79;85m:[0m[48;2;11;73;79m:[0m[48;2;21;128;140m-[0m[48;2;23;140;156m=[0m[48;2;24;139;157m=[0m[48;2;24;139;158m=[0m[48;2;25;139;160m=[0m[48;2;23;126;146m-[0m[48;2;1;5;6m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;6;30;37m [0m[48;2;22;104;128m-[0m[48;2;28;131;163m=[0m[48;2;28;130;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;15;71;91m:[0m[48;2;4;19;24m [0m[48;2;0;3;4m [0m[48;2;0;3;4m [0m[48;2;17;75;99m:[0m[48;2;28;121;162m-[0m[48;2;26;117;157m-[0m[48;2;26;117;159m-[0m[48;2;25;115;157m-[0m[48;2;26;115;158m-[0m[48;2;6;30;42m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;5;28;39m [0m[48;2;21;107;150m-[0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;17;102;143m-[0m[48;2;17;102;143m-[0m[48;2;13;84;119m:[0m[48;2;9;60;85m.[0m[48;2;6;42;59m.[0m[48;2;8;63;89m.[0m[48;2;12;95;135m:[0m[48;2;11;94;133m:[0m[48;2;10;93;131m:[0m[48;2;8;82;116m:[0m[48;2;0;0;0m [0m[48;2;5;75;106m:[0m[48;2;3;41;57m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;1;45;63m.[0m[48;2;2;84;118m:[0m[48;2;1;81;114m:[0m[48;2;0;81;115m:[0m[48;2;0;80;114m:[0m[48;2;0;79;111m:[0m[48;2;0;14;20m [0m
[48;2;0;0;0m [0m[48;2;0;14;9m [0m[48;2;0;115;76m:[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;151;99m-[0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;3;161;114m=[0m[48;2;4;180;130m=[0m[48;2;4;176;129m=[0m[48;2;4;177;129m=[0m[48;2;5;168;125m=[0m[48;2;0;18;13m [0m[48;2;0;0;0m [0m[48;2;4;98;76m:[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;8;167;133m=[0m[48;2;9;168;136m=[0m[48;2;8;151;123m=[0m[48;2;1;28;23m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;14;12m [0m[48;2;12;150;132m=[0m[48;2;13;162;143m=[0m[48;2;14;160;144m=[0m[48;2;15;157;143m=[0m[48;2;16;159;147m=[0m[48;2;10;92;87m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;52;51m.[0m[48;2;20;153;152m=[0m[48;2;19;149;151m=[0m[48;2;21;150;154m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;12;83;88m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;12;76;86m:[0m[48;2;25;142;159m=[0m[48;2;24;137;155m=[0m[48;2;24;137;158m=[0m[48;2;25;136;158m=[0m[48;2;22;120;141m-[0m[48;2;0;4;5m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;9;47;58m.[0m[48;2;26;129;159m=[0m[48;2;28;131;163m=[0m[48;2;27;127;160m=[0m[48;2;27;125;159m-[0m[48;2;27;125;159m-[0m[48;2;9;42;54m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;20;91;121m:[0m[48;2;26;119;160m-[0m[48;2;26;116;158m-[0m[48;2;25;115;157m-[0m[48;2;25;114;157m-[0m[48;2;20;93;128m:[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;14;75;105m:[0m[48;2;20;106;148m-[0m[48;2;18;102;144m-[0m[48;2;17;102;143m-[0m[48;2;16;101;142m-[0m[48;2;14;88;125m:[0m[48;2;0;6;8m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;6;52;74m.[0m[48;2;6;57;81m.[0m[48;2;4;48;68m.[0m[48;2;2;27;39m [0m[48;2;4;55;78m.[0m[48;2;5;84;118m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;1;77;108m:[0m[48;2;1;82;116m:[0m[48;2;0;81;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;113m:[0m[48;2;0;56;80m.[0m[48;2;0;0;0m [0m
[48;2;0;16;11m [0m[48;2;0;151;99m-[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;122m=[0m[48;2;0;46;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;1;53;38m.[0m[48;2;4;180;130m=[0m[48;2;4;177;129m=[0m[48;2;4;174;127m=[0m[48;2;6;178;132m=[0m[48;2;2;85;64m:[0m[48;2;0;0;0m [0m[48;2;3;84;65m:[0m[48;2;8;174;135m=[0m[48;2;7;169;133m=[0m[48;2;8;170;135m=[0m[48;2;9;169;136m=[0m[48;2;9;167;136m=[0m[48;2;2;38;31m.[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;7;81;72m:[0m[48;2;14;163;144m=[0m[48;2;14;158;142m=[0m[48;2;16;161;146m=[0m[48;2;15;158;146m=[0m[48;2;16;155;145m=[0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;15;118;118m-[0m[48;2;19;151;152m=[0m[48;2;20;148;152m=[0m[48;2;20;147;152m=[0m[48;2;21;147;154m=[0m[48;2;18;123;131m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;2;3m [0m[48;2;19;111;125m-[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;135;157m=[0m[48;2;26;137;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;6;32;40m [0m[48;2;27;132;162m=[0m[48;2;27;130;162m=[0m[48;2;27;128;161m=[0m[48;2;27;127;161m-[0m[48;2;28;128;163m=[0m[48;2;12;58;74m.[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;30;41m [0m[48;2;27;120;161m-[0m[48;2;26;117;158m-[0m[48;2;26;117;159m-[0m[48;2;25;114;156m-[0m[48;2;25;114;157m-[0m[48;2;9;44;61m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;18;103;145m-[0m[48;2;16;100;141m-[0m[48;2;16;100;142m-[0m[48;2;7;48;68m.[0m[48;2;0;0;0m [0m[48;2;0;3;5m [0m[48;2;0;1;2m [0m[48;2;1;12;18m [0m[48;2;8;77;109m:[0m[48;2;7;75;106m:[0m[48;2;6;76;108m:[0m[48;2;6;87;124m:[0m[48;2;6;88;125m:[0m[48;2;3;47;67m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;34;49m.[0m[48;2;2;83;117m:[0m[48;2;0;81;114m:[0m[48;2;1;82;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;114m:[0m[48;2;0;22;31m [0m[48;2;0;0;0m [0m
[48;2;0;128;84m-[0m[48;2;0;188;124m=[0m[48;2;0;182;120m=[0m[48;2;0;188;124m=[0m[48;2;0;163;107m=[0m[48;2;0;3;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;16;11m [0m[48;2;3;156;112m=[0m[48;2;4;178;130m=[0m[48;2;4;173;126m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;1;1m [0m[48;2;1;24;19m [0m[48;2;7;170;132m=[0m[48;2;7;170;134m=[0m[48;2;8;171;136m=[0m[48;2;9;168;135m=[0m[48;2;10;170;138m=[0m[48;2;7;108;89m:[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;7;6m [0m[48;2;12;145;128m=[0m[48;2;14;161;144m=[0m[48;2;15;158;144m=[0m[48;2;15;156;144m=[0m[48;2;17;158;148m=[0m[48;2;12;111;105m-[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;4;34;34m [0m[48;2;20;152;153m=[0m[48;2;20;148;152m=[0m[48;2;21;149;154m=[0m[48;2;21;145;152m=[0m[48;2;22;147;156m=[0m[48;2;9;61;65m.[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;38;43m.[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;137;159m=[0m[48;2;25;136;160m=[0m[48;2;24;129;152m-[0m[48;2;2;14;17m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;23;109;134m-[0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;27;128;161m=[0m[48;2;28;129;163m=[0m[48;2;23;109;139m-[0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;18;82;111m:[0m[48;2;27;119;160m-[0m[48;2;25;115;156m-[0m[48;2;25;115;156m-[0m[48;2;25;114;157m-[0m[48;2;21;102;141m-[0m[48;2;1;5;7m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;11;61;86m.[0m[48;2;19;104;147m-[0m[48;2;17;101;142m-[0m[48;2;16;101;143m-[0m[48;2;15;99;141m-[0m[48;2;14;94;133m:[0m[48;2;1;9;14m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;5;51;71m.[0m[48;2;9;92;130m:[0m[48;2;8;91;128m:[0m[48;2;7;90;127m:[0m[48;2;6;89;125m:[0m[48;2;5;83;119m:[0m[48;2;0;11;16m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;1;69;97m:[0m[48;2;0;81;115m:[0m[48;2;0;81;114m:[0m[48;2;0;80;113m:[0m[48;2;0;79;113m:[0m[48;2;0;66;94m.[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;181;119m=[0m[48;2;0;185;122m=[0m[48;2;0;186;123m=[0m[48;2;0;188;124m=[0m[48;2;0;165;109m=[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;32;23m [0m[48;2;3;149;108m-[0m[48;2;5;180;130m=[0m[48;2;4;176;129m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;9;6m [0m[48;2;0;0;0m [0m[48;2;3;81;63m:[0m[48;2;8;173;136m=[0m[48;2;8;169;134m=[0m[48;2;10;171;138m=[0m[48;2;9;168;136m=[0m[48;2;11;169;139m=[0m[48;2;3;48;40m.[0m[48;2;0;3;3m [0m[48;2;0;5;4m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;5;59;53m.[0m[48;2;15;162;145m=[0m[48;2;15;158;144m=[0m[48;2;16;159;147m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;5;44;42m.[0m[48;2;0;2;2m [0m[48;2;0;6;5m [0m[48;2;0;0;0m [0m[48;2;13;100;102m:[0m[48;2;21;150;154m=[0m[48;2;20;146;151m=[0m[48;2;21;147;154m=[0m[48;2;21;146;155m=[0m[48;2;21;134;143m=[0m[48;2;1;9;9m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;18;104;118m-[0m[48;2;25;139;160m=[0m[48;2;25;136;158m=[0m[48;2;25;134;158m=[0m[48;2;26;136;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;6;30;37m [0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;28;130;163m=[0m[48;2;27;126;160m-[0m[48;2;28;128;163m=[0m[48;2;15;68;87m:[0m[48;2;0;1;1m [0m[48;2;0;3;5m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;16;21m [0m[48;2;26;116;156m-[0m[48;2;25;116;158m-[0m[48;2;26;116;158m-[0m[48;2;24;112;154m-[0m[48;2;24;113;156m-[0m[48;2;12;58;81m.[0m[48;2;0;0;1m [0m[48;2;0;3;5m [0m[48;2;0;0;0m [0m[48;2;1;7;9m [0m[48;2;17;97;138m-[0m[48;2;17;102;144m-[0m[48;2;16;101;143m-[0m[48;2;15;98;139m-[0m[48;2;15;99;140m-[0m[48;2;9;60;86m.[0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;0;6;8m [0m[48;2;8;84;119m:[0m[48;2;7;90;127m:[0m[48;2;6;88;125m:[0m[48;2;6;87;122m:[0m[48;2;6;87;124m:[0m[48;2;3;58;81m.[0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;24;34m [0m[48;2;1;82;116m:[0m[48;2;0;81;113m:[0m[48;2;0;81;115m:[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;32;46m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m
[48;2;0;161;106m=[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;123m=[0m[48;2;1;187;125m=[0m[48;2;0;110;74m:[0m[48;2;0;89;61m:[0m[48;2;1;103;70m:[0m[48;2;1;119;82m-[0m[48;2;1;119;82m-[0m[48;2;1;89;62m:[0m[48;2;0;46;32m.[0m[48;2;1;89;63m:[0m[48;2;3;173;125m=[0m[48;2;5;180;130m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;3;96;71m:[0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;5;98;77m:[0m[48;2;8;170;135m=[0m[48;2;9;166;133m=[0m[48;2;10;170;138m=[0m[48;2;10;167;137m=[0m[48;2;11;168;140m=[0m[48;2;3;51;43m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;29;26m [0m[48;2;13;147;131m=[0m[48;2;15;158;143m=[0m[48;2;15;157;145m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;15;130;124m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;25;25m [0m[48;2;20;145;148m=[0m[48;2;20;148;153m=[0m[48;2;21;147;154m=[0m[48;2;21;144;153m=[0m[48;2;23;146;156m=[0m[48;2;12;79;85m:[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;4;25;29m [0m[48;2;24;137;157m=[0m[48;2;25;136;158m=[0m[48;2;25;136;160m=[0m[48;2;25;135;160m=[0m[48;2;27;135;162m=[0m[48;2;3;19;22m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;7;35;44m.[0m[48;2;27;128;161m=[0m[48;2;27;125;159m-[0m[48;2;27;128;162m=[0m[48;2;27;125;160m-[0m[48;2;28;127;163m-[0m[48;2;15;70;91m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;8;11m [0m[48;2;20;89;121m:[0m[48;2;25;116;157m-[0m[48;2;25;114;156m-[0m[48;2;24;113;156m-[0m[48;2;23;112;155m-[0m[48;2;23;108;150m-[0m[48;2;2;10;13m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;12;68;97m:[0m[48;2;19;103;145m-[0m[48;2;16;100;142m-[0m[48;2;16;100;142m-[0m[48;2;14;98;138m-[0m[48;2;13;97;137m-[0m[48;2;2;18;26m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;34;48m.[0m[48;2;8;90;128m:[0m[48;2;6;88;125m:[0m[48;2;7;89;125m:[0m[48;2;5;86;122m:[0m[48;2;5;86;122m:[0m[48;2;1;21;30m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;16m [0m[48;2;0;70;100m:[0m[48;2;0;81;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;73;104m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;56;36m.[0m[48;2;0;183;121m=[0m[48;2;0;187;124m=[0m[48;2;1;187;125m=[0m[48;2;0;184;124m=[0m[48;2;1;185;126m=[0m[48;2;1;110;75m:[0m[48;2;0;61;42m.[0m[48;2;1;71;49m.[0m[48;2;2;156;109m=[0m[48;2;3;182;128m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;5;180;130m=[0m[48;2;4;163;119m=[0m[48;2;4;120;89m-[0m[48;2;1;40;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;2;46;37m.[0m[48;2;10;171;137m=[0m[48;2;10;170;138m=[0m[48;2;10;168;138m=[0m[48;2;10;165;137m=[0m[48;2;11;164;138m=[0m[48;2;11;145;124m=[0m[48;2;6;84;73m:[0m[48;2;7;82;72m:[0m[48;2;11;119;106m-[0m[48;2;14;157;141m=[0m[48;2;14;144;131m=[0m[48;2;16;159;147m=[0m[48;2;16;157;147m=[0m[48;2;16;154;146m=[0m[48;2;17;153;146m=[0m[48;2;17;142;138m=[0m[48;2;9;73;71m:[0m[48;2;7;59;59m.[0m[48;2;11;86;87m:[0m[48;2;18;136;138m-[0m[48;2;20;147;152m=[0m[48;2;21;146;153m=[0m[48;2;21;145;154m=[0m[48;2;22;144;154m=[0m[48;2;22;141;152m=[0m[48;2;3;19;21m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;34;40m.[0m[48;2;26;138;160m=[0m[48;2;26;137;161m=[0m[48;2;25;134;159m=[0m[48;2;26;132;159m=[0m[48;2;26;131;159m=[0m[48;2;18;92;113m:[0m[48;2;13;62;76m.[0m[48;2;15;73;92m:[0m[48;2;24;114;143m-[0m[48;2;28;129;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;27;125;161m-[0m[48;2;27;124;160m-[0m[48;2;26;117;154m-[0m[48;2;16;70;92m:[0m[48;2;13;58;78m.[0m[48;2;17;79;106m:[0m[48;2;25;113;152m-[0m[48;2;23;105;142m-[0m[48;2;26;116;158m-[0m[48;2;25;114;157m-[0m[48;2;24;111;154m-[0m[48;2;23;109;151m-[0m[48;2;22;107;150m-[0m[48;2;12;63;88m:[0m[48;2;7;39;55m.[0m[48;2;10;53;76m.[0m[48;2;15;87;122m:[0m[48;2;19;103;146m-[0m[48;2;16;100;141m-[0m[48;2;15;99;140m-[0m[48;2;15;96;136m-[0m[48;2;13;97;137m-[0m[48;2;10;71;101m:[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;3;36;51m.[0m[48;2;8;90;127m:[0m[48;2;6;88;124m:[0m[48;2;5;86;122m:[0m[48;2;4;85;120m:[0m[48;2;4;86;121m:[0m[48;2;2;63;88m.[0m[48;2;0;41;58m.[0m[48;2;1;55;78m.[0m[48;2;0;78;111m:[0m[48;2;1;82;115m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;42;61m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;39;26m.[0m[48;2;0;126;84m-[0m[48;2;0;171;115m=[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;2;184;127m=[0m[48;2;2;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;4;174;125m=[0m[48;2;4;177;129m=[0m[48;2;3;113;83m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;3;60;49m.[0m[48;2;9;141;116m-[0m[48;2;11;168;140m=[0m[48;2;12;167;141m=[0m[48;2;13;166;142m=[0m[48;2;13;165;143m=[0m[48;2;14;164;143m=[0m[48;2;14;163;144m=[0m[48;2;11;121;108m-[0m[48;2;3;39;35m.[0m[48;2;1;14;13m [0m[48;2;13;124;115m-[0m[48;2;17;157;149m=[0m[48;2;18;156;150m=[0m[48;2;18;155;150m=[0m[48;2;19;154;151m=[0m[48;2;20;153;152m=[0m[48;2;19;148;149m=[0m[48;2;17;123;124m-[0m[48;2;21;149;154m=[0m[48;2;22;148;155m=[0m[48;2;22;147;156m=[0m[48;2;23;146;156m=[0m[48;2;23;145;157m=[0m[48;2;16;96;104m:[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;13;70;83m:[0m[48;2;24;126;149m-[0m[48;2;27;135;162m=[0m[48;2;27;134;162m=[0m[48;2;27;133;162m=[0m[48;2;27;132;162m=[0m[48;2;28;131;163m=[0m[48;2;26;123;154m-[0m[48;2;15;71;90m:[0m[48;2;7;35;45m.[0m[48;2;21;96;123m-[0m[48;2;27;125;160m-[0m[48;2;28;126;163m-[0m[48;2;28;124;163m-[0m[48;2;28;123;162m-[0m[48;2;28;122;162m-[0m[48;2;27;120;161m-[0m[48;2;22;99;133m-[0m[48;2;10;46;63m.[0m[48;2;0;4;6m [0m[48;2;15;72;99m:[0m[48;2;24;111;153m-[0m[48;2;24;111;155m-[0m[48;2;23;110;153m-[0m[48;2;22;109;152m-[0m[48;2;21;107;150m-[0m[48;2;20;106;149m-[0m[48;2;15;82;115m:[0m[48;2;14;75;106m:[0m[48;2;17;102;144m-[0m[48;2;16;100;142m-[0m[48;2;15;99;140m-[0m[48;2;14;98;139m-[0m[48;2;13;97;137m:[0m[48;2;3;28;41m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;5m [0m[48;2;4;57;80m.[0m[48;2;5;86;121m:[0m[48;2;5;87;122m:[0m[48;2;4;86;121m:[0m[48;2;2;84;119m:[0m[48;2;3;84;119m:[0m[48;2;1;82;117m:[0m[48;2;0;64;90m.[0m[48;2;0;67;95m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;77;110m:[0m[48;2;0;10;15m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;13;8m [0m[48;2;0;39;26m.[0m[48;2;0;56;38m.[0m[48;2;0;65;45m.[0m[48;2;1;68;47m.[0m[48;2;1;62;44m.[0m[48;2;0;48;34m.[0m[48;2;0;39;28m.[0m[48;2;4;156;113m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;6;177;133m=[0m[48;2;6;151;114m=[0m[48;2;3;94;71m:[0m[48;2;2;54;42m.[0m[48;2;2;46;36m.[0m[48;2;1;35;27m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;2;31;26m [0m[48;2;3;52;44m.[0m[48;2;4;60;51m.[0m[48;2;4;54;47m.[0m[48;2;3;35;31m [0m[48;2;1;10;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;31;29m [0m[48;2;6;51;50m.[0m[48;2;6;56;55m.[0m[48;2;6;48;48m.[0m[48;2;4;30;30m [0m[48;2;0;7;7m [0m[48;2;0;0;0m [0m[48;2;5;37;39m.[0m[48;2;5;38;40m.[0m[48;2;6;38;40m.[0m[48;2;5;37;40m.[0m[48;2;6;37;41m.[0m[48;2;2;12;14m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;10;12m [0m[48;2;6;33;40m.[0m[48;2;9;45;55m.[0m[48;2;9;48;59m.[0m[48;2;8;40;49m.[0m[48;2;5;23;29m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;4;18;23m [0m[48;2;8;36;47m.[0m[48;2;10;44;58m.[0m[48;2;9;42;56m.[0m[48;2;6;30;40m [0m[48;2;2;13;17m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;7;34;47m.[0m[48;2;8;39;55m.[0m[48;2;7;36;50m.[0m[48;2;4;24;35m [0m[48;2;1;9;13m [0m[48;2;0;0;0m [0m[48;2;1;11;15m [0m[48;2;4;26;37m [0m[48;2;4;25;36m [0m[48;2;3;25;36m [0m[48;2;3;25;35m [0m[48;2;3;24;34m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;1;20;29m [0m[48;2;1;37;52m.[0m[48;2;1;57;80m.[0m[48;2;1;61;86m.[0m[48;2;0;52;73m.[0m[48;2;0;44;62m.[0m[48;2;0;75;107m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;26;19m [0m[48;2;4;131;97m-[0m[48;2;5;175;131m=[0m[48;2;7;176;133m=[0m[48;2;7;175;134m=[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;7;151;120m=[0m[48;2;2;49;39m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;1;42;59m.[0m[48;2;2;68;95m:[0m[48;2;1;46;66m.[0m[48;2;0;21;30m [0m[48;2;0;3;5m [0m[48;2;0;40;56m.[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;78;111m:[0m[48;2;0;80;114m:[0m[48;2;0;18;26m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;30;22m [0m[48;2;2;57;44m.[0m[48;2;3;68;52m.[0m[48;2;2;63;49m.[0m[48;2;2;42;33m.[0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;1;48;68m.[0m[48;2;3;84;119m:[0m[48;2;1;53;74m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;21m [0m[48;2;0;73;104m:[0m[48;2;0;79;112m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;80;114m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;1;37;52m.[0m[48;2;2;83;118m:[0m[48;2;0;80;114m:[0m[48;2;0;64;90m.[0m[48;2;0;61;87m.[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;50;72m.[0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;27;38m [0m[48;2;0;59;83m.[0m[48;2;0;77;109m:[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;74;105m:[0m[48;2;0;65;93m.[0m[48;2;0;48;68m.[0m[48;2;0;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m


[49m[32mDandelionNER -- DandelionNER is a Qanary component 
[49m[92mFramework@GitHub:       https://github.com/WDAqua/Qanary 
[49m[36mComponents@GitHub:      https://github.com/WDAqua/Qanary-question-answering-components
[49m[94mComponent Version:      3.4.0       
[49m[34mSpring Boot Version:    2.6.7      
[47m[30mQanary System endpoint: http://localhost:8080 [49m[39m

[2m2023-10-27 13:37:49.562[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Starting Application v3.4.0 using Java 21 on fedora with PID 28729 (/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/target/qanary-component-NER-Dandelion-3.4.0.jar started by dennisschiese in /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion)
[2m2023-10-27 13:37:49.575[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Running with Spring Boot v2.6.7, Spring v5.3.19
[2m2023-10-27 13:37:49.595[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m The following 1 profile is active: "local"
[2m2023-10-27 13:38:13.119[0;39m [33m WARN[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse: initialized
[2m2023-10-27 13:38:13.918[0;39m [33m WARN[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m eu.wdaqua.qanary.communications.RestTemplateWithCaching was initialized
[2m2023-10-27 13:38:14.204[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6b5966e1
[2m2023-10-27 13:38:14.302[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 13:38:14.483[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:38:14.558[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:38:14.601[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:38:14.640[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 13:38:17.583[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@66d57c1b
[2m2023-10-27 13:38:17.604[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:38:17.638[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:38:17.694[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:38:18.413[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:38:17.557"}
[2m2023-10-27 13:38:18.435[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 13:38:18.642[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6b9c69a9
[2m2023-10-27 13:38:18.650[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 13:38:18.654[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:38:18.654[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:38:18.662[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:38:18.663[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 13:38:18.726[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@6622a690
[2m2023-10-27 13:38:18.726[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:38:18.726[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:38:18.727[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:38:18.727[0;39m [32mDEBUG[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":0,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:38:18.705"}
[2m2023-10-27 13:38:18.727[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 13:38:18.728[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m qanaryComponent: eu.wdaqua.qanary.component.dandelion.ner.Dandelion@412c995d
[2m2023-10-27 13:38:18.740[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.QanaryComponentConfiguration    [0;39m [2m:[0;39m Current Component Configuration: 
server.host                              = null
server.port                              = 8323
spring.application.name                  = DandelionNER
spring.application.description           = DandelionNER is a Qanary component
spring.boot.admin.url                    = http://localhost:8080
spring.boot.admin.client.url             = http://localhost:8080

[2m2023-10-27 13:38:18.939[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m location of component-description.ttl: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl
[2m2023-10-27 13:38:25.034[0;39m [33m WARN[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m could not find a Turtle service description at '/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl': org.apache.jena.riot.RiotNotFoundException: Not found: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl. Please consider to store a component description file to enable automatic pipeline compositions.
[2m2023-10-27 13:38:25.118[0;39m [32m INFO[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.qanary.commons.config.CacheConfig   [0;39m [2m:[0;39m cacheManager configuration: maximumSize=10000,expireAfterAccess=5s
[2m2023-10-27 13:38:33.950[0;39m [33m WARN[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36mConfigServletWebServerApplicationContext[0;39m [2m:[0;39m Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'; nested exception is org.springframework.boot.web.server.PortInUseException: Port 8323 is already in use
[2m2023-10-27 13:38:34.165[0;39m [31mERROR[0;39m [35m28729[0;39m [2m---[0;39m [2m[           main][0;39m [36mo.s.b.d.LoggingFailureAnalysisReporter  [0;39m [2m:[0;39m 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8323 was already in use.

Action:

Identify and stop the process that's listening on port 8323 or configure this application to listen on another port.


[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;19;12m [0m[48;2;0;71;47m.[0m[48;2;0;120;79m-[0m[48;2;0;165;109m=[0m[48;2;0;168;111m=[0m[48;2;0;153;101m-[0m[48;2;0;141;93m-[0m[48;2;0;162;107m=[0m[48;2;0;178;119m=[0m[48;2;0;168;113m=[0m[48;2;0;127;85m-[0m[48;2;0;85;58m:[0m[48;2;0;31;21m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;16;10m [0m[48;2;0;106;70m:[0m[48;2;0;169;111m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;98;64m:[0m[48;2;0;31;20m [0m[48;2;0;34;22m [0m[48;2;0;78;52m:[0m[48;2;0;25;17m [0m[48;2;0;46;30m.[0m[48;2;0;131;88m-[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;1;177;122m=[0m[48;2;1;114;79m:[0m[48;2;0;13;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;35;23m [0m[48;2;0;164;108m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;181;119m=[0m[48;2;0;54;35m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;23;15m [0m[48;2;0;75;50m.[0m[48;2;0;8;5m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;67;45m.[0m[48;2;1;137;94m-[0m[48;2;2;181;126m=[0m[48;2;3;182;128m=[0m[48;2;2;147;104m-[0m[48;2;0;8;6m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;1;0m [0m[48;2;0;18;12m [0m[48;2;0;167;110m=[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;157;104m=[0m[48;2;0;40;26m.[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;53;36m.[0m[48;2;2;126;88m-[0m[48;2;2;179;125m=[0m[48;2;2;177;125m=[0m[48;2;4;181;129m=[0m[48;2;1;76;55m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;122;80m-[0m[48;2;0;188;124m=[0m[48;2;0;169;111m=[0m[48;2;0;82;54m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;62;43m.[0m[48;2;3;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;3;178;126m=[0m[48;2;3;178;128m=[0m[48;2;3;116;84m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;9m [0m[48;2;1;31;24m [0m[48;2;2;42;34m.[0m[48;2;3;52;42m.[0m[48;2;3;49;41m.[0m[48;2;2;28;24m [0m[48;2;0;0;0m [0m[48;2;2;29;25m [0m[48;2;2;34;30m [0m[48;2;2;33;29m [0m[48;2;3;33;30m [0m[48;2;3;33;30m [0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;4;32;31m [0m[48;2;4;32;32m [0m[48;2;4;32;32m [0m[48;2;4;31;31m [0m[48;2;4;31;32m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;2;15;16m [0m[48;2;5;32;35m [0m[48;2;6;39;43m.[0m[48;2;6;35;39m.[0m[48;2;3;22;24m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;5;6m [0m[48;2;4;19;24m [0m[48;2;6;30;38m [0m[48;2;8;38;48m.[0m[48;2;8;38;49m.[0m[48;2;6;27;35m [0m[48;2;0;0;0m [0m[48;2;3;14;19m [0m[48;2;5;25;34m [0m[48;2;5;25;33m [0m[48;2;5;25;33m [0m[48;2;5;24;33m [0m[48;2;5;23;32m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;11;16m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;4;22;31m [0m[48;2;4;22;30m [0m[48;2;3;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;2;16;23m [0m[48;2;2;19;27m [0m[48;2;1;11;15m [0m[48;2;0;0;0m [0m[48;2;1;13;18m [0m[48;2;2;20;29m [0m[48;2;1;19;26m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;20m [0m[48;2;0;17;25m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;17;24m [0m[48;2;0;16;23m [0m
[48;2;0;0;0m [0m[48;2;0;30;20m [0m[48;2;0;188;124m=[0m[48;2;0;91;60m:[0m[48;2;0;14;9m [0m[48;2;0;38;25m [0m[48;2;0;126;83m-[0m[48;2;0;53;35m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;38;26m.[0m[48;2;2;177;124m=[0m[48;2;2;179;126m=[0m[48;2;3;180;128m=[0m[48;2;3;177;127m=[0m[48;2;4;178;130m=[0m[48;2;3;109;80m:[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;0;10;8m [0m[48;2;3;71;55m.[0m[48;2;6;126;99m-[0m[48;2;8;157;125m=[0m[48;2;10;171;138m=[0m[48;2;10;170;139m=[0m[48;2;11;169;139m=[0m[48;2;9;150;125m=[0m[48;2;10;151;128m=[0m[48;2;9;122;104m-[0m[48;2;12;159;138m=[0m[48;2;14;164;144m=[0m[48;2;15;162;145m=[0m[48;2;15;162;145m=[0m[48;2;16;160;146m=[0m[48;2;7;79;73m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;8;70;68m:[0m[48;2;19;154;151m=[0m[48;2;20;152;152m=[0m[48;2;20;151;153m=[0m[48;2;21;150;154m=[0m[48;2;21;149;154m=[0m[48;2;14;99;104m:[0m[48;2;19;124;132m-[0m[48;2;23;146;157m=[0m[48;2;23;145;157m=[0m[48;2;24;144;158m=[0m[48;2;24;142;158m=[0m[48;2;24;139;157m=[0m[48;2;20;115;132m-[0m[48;2;7;40;47m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;8;41;51m.[0m[48;2;18;87;108m:[0m[48;2;24;114;143m-[0m[48;2;27;127;161m=[0m[48;2;28;128;163m=[0m[48;2;28;128;163m=[0m[48;2;25;115;148m-[0m[48;2;25;112;146m-[0m[48;2;21;96;127m-[0m[48;2;24;107;142m-[0m[48;2;27;121;162m-[0m[48;2;27;120;161m-[0m[48;2;27;118;160m-[0m[48;2;26;117;159m-[0m[48;2;19;85;117m:[0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;1m [0m[48;2;17;86;121m:[0m[48;2;21;107;150m-[0m[48;2;20;106;148m-[0m[48;2;19;104;147m-[0m[48;2;18;103;145m-[0m[48;2;15;91;129m:[0m[48;2;7;45;63m.[0m[48;2;11;77;109m:[0m[48;2;13;94;133m:[0m[48;2;12;95;135m:[0m[48;2;12;95;135m:[0m[48;2;10;89;127m:[0m[48;2;6;57;81m.[0m[48;2;1;15;22m [0m[48;2;7;86;120m:[0m[48;2;6;79;112m:[0m[48;2;0;3;4m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;2;83;116m:[0m[48;2;2;84;118m:[0m[48;2;2;83;117m:[0m[48;2;1;82;116m:[0m[48;2;1;81;115m:[0m[48;2;0;54;77m.[0m
[48;2;0;1;0m [0m[48;2;0;60;39m.[0m[48;2;0;57;37m.[0m[48;2;0;42;27m.[0m[48;2;0;141;93m-[0m[48;2;0;188;124m=[0m[48;2;0;123;81m-[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;154;109m=[0m[48;2;4;181;129m=[0m[48;2;3;178;128m=[0m[48;2;4;176;128m=[0m[48;2;5;178;131m=[0m[48;2;2;71;52m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;65;50m.[0m[48;2;7;153;119m=[0m[48;2;9;173;136m=[0m[48;2;9;172;137m=[0m[48;2;10;171;138m=[0m[48;2;9;158;129m=[0m[48;2;4;72;59m:[0m[48;2;1;17;14m [0m[48;2;0;2;2m [0m[48;2;0;9;8m [0m[48;2;10;137;118m-[0m[48;2;14;164;144m=[0m[48;2;14;159;142m=[0m[48;2;14;159;143m=[0m[48;2;15;158;144m=[0m[48;2;14;149;137m=[0m[48;2;1;12;11m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;4;4m [0m[48;2;16;134;131m-[0m[48;2;19;152;151m=[0m[48;2;19;149;151m=[0m[48;2;20;149;153m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;18;123;130m-[0m[48;2;12;79;85m:[0m[48;2;11;73;79m:[0m[48;2;21;128;140m-[0m[48;2;23;140;156m=[0m[48;2;24;139;157m=[0m[48;2;24;139;158m=[0m[48;2;25;139;160m=[0m[48;2;23;126;146m-[0m[48;2;1;5;6m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;6;30;37m [0m[48;2;22;104;128m-[0m[48;2;28;131;163m=[0m[48;2;28;130;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;15;71;91m:[0m[48;2;4;19;24m [0m[48;2;0;3;4m [0m[48;2;0;3;4m [0m[48;2;17;75;99m:[0m[48;2;28;121;162m-[0m[48;2;26;117;157m-[0m[48;2;26;117;159m-[0m[48;2;25;115;157m-[0m[48;2;26;115;158m-[0m[48;2;6;30;42m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;5;28;39m [0m[48;2;21;107;150m-[0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;17;102;143m-[0m[48;2;17;102;143m-[0m[48;2;13;84;119m:[0m[48;2;9;60;85m.[0m[48;2;6;42;59m.[0m[48;2;8;63;89m.[0m[48;2;12;95;135m:[0m[48;2;11;94;133m:[0m[48;2;10;93;131m:[0m[48;2;8;82;116m:[0m[48;2;0;0;0m [0m[48;2;5;75;106m:[0m[48;2;3;41;57m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;1;45;63m.[0m[48;2;2;84;118m:[0m[48;2;1;81;114m:[0m[48;2;0;81;115m:[0m[48;2;0;80;114m:[0m[48;2;0;79;111m:[0m[48;2;0;14;20m [0m
[48;2;0;0;0m [0m[48;2;0;14;9m [0m[48;2;0;115;76m:[0m[48;2;0;188;124m=[0m[48;2;0;188;124m=[0m[48;2;0;151;99m-[0m[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;3;161;114m=[0m[48;2;4;180;130m=[0m[48;2;4;176;129m=[0m[48;2;4;177;129m=[0m[48;2;5;168;125m=[0m[48;2;0;18;13m [0m[48;2;0;0;0m [0m[48;2;4;98;76m:[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;8;167;133m=[0m[48;2;9;168;136m=[0m[48;2;8;151;123m=[0m[48;2;1;28;23m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;14;12m [0m[48;2;12;150;132m=[0m[48;2;13;162;143m=[0m[48;2;14;160;144m=[0m[48;2;15;157;143m=[0m[48;2;16;159;147m=[0m[48;2;10;92;87m:[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;52;51m.[0m[48;2;20;153;152m=[0m[48;2;19;149;151m=[0m[48;2;21;150;154m=[0m[48;2;20;147;152m=[0m[48;2;22;148;155m=[0m[48;2;12;83;88m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;12;76;86m:[0m[48;2;25;142;159m=[0m[48;2;24;137;155m=[0m[48;2;24;137;158m=[0m[48;2;25;136;158m=[0m[48;2;22;120;141m-[0m[48;2;0;4;5m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;9;47;58m.[0m[48;2;26;129;159m=[0m[48;2;28;131;163m=[0m[48;2;27;127;160m=[0m[48;2;27;125;159m-[0m[48;2;27;125;159m-[0m[48;2;9;42;54m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;20;91;121m:[0m[48;2;26;119;160m-[0m[48;2;26;116;158m-[0m[48;2;25;115;157m-[0m[48;2;25;114;157m-[0m[48;2;20;93;128m:[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;14;75;105m:[0m[48;2;20;106;148m-[0m[48;2;18;102;144m-[0m[48;2;17;102;143m-[0m[48;2;16;101;142m-[0m[48;2;14;88;125m:[0m[48;2;0;6;8m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;6;52;74m.[0m[48;2;6;57;81m.[0m[48;2;4;48;68m.[0m[48;2;2;27;39m [0m[48;2;4;55;78m.[0m[48;2;5;84;118m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;5;7m [0m[48;2;1;77;108m:[0m[48;2;1;82;116m:[0m[48;2;0;81;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;113m:[0m[48;2;0;56;80m.[0m[48;2;0;0;0m [0m
[48;2;0;16;11m [0m[48;2;0;151;99m-[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;122m=[0m[48;2;0;46;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;1;53;38m.[0m[48;2;4;180;130m=[0m[48;2;4;177;129m=[0m[48;2;4;174;127m=[0m[48;2;6;178;132m=[0m[48;2;2;85;64m:[0m[48;2;0;0;0m [0m[48;2;3;84;65m:[0m[48;2;8;174;135m=[0m[48;2;7;169;133m=[0m[48;2;8;170;135m=[0m[48;2;9;169;136m=[0m[48;2;9;167;136m=[0m[48;2;2;38;31m.[0m[48;2;0;0;0m [0m[48;2;0;4;3m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;7;81;72m:[0m[48;2;14;163;144m=[0m[48;2;14;158;142m=[0m[48;2;16;161;146m=[0m[48;2;15;158;146m=[0m[48;2;16;155;145m=[0m[48;2;2;26;24m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;15;118;118m-[0m[48;2;19;151;152m=[0m[48;2;20;148;152m=[0m[48;2;20;147;152m=[0m[48;2;21;147;154m=[0m[48;2;18;123;131m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;2;3m [0m[48;2;19;111;125m-[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;135;157m=[0m[48;2;26;137;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;6;32;40m [0m[48;2;27;132;162m=[0m[48;2;27;130;162m=[0m[48;2;27;128;161m=[0m[48;2;27;127;161m-[0m[48;2;28;128;163m=[0m[48;2;12;58;74m.[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;30;41m [0m[48;2;27;120;161m-[0m[48;2;26;117;158m-[0m[48;2;26;117;159m-[0m[48;2;25;114;156m-[0m[48;2;25;114;157m-[0m[48;2;9;44;61m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;19;104;146m-[0m[48;2;18;103;146m-[0m[48;2;18;103;145m-[0m[48;2;16;100;141m-[0m[48;2;16;100;142m-[0m[48;2;7;48;68m.[0m[48;2;0;0;0m [0m[48;2;0;3;5m [0m[48;2;0;1;2m [0m[48;2;1;12;18m [0m[48;2;8;77;109m:[0m[48;2;7;75;106m:[0m[48;2;6;76;108m:[0m[48;2;6;87;124m:[0m[48;2;6;88;125m:[0m[48;2;3;47;67m.[0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;34;49m.[0m[48;2;2;83;117m:[0m[48;2;0;81;114m:[0m[48;2;1;82;115m:[0m[48;2;0;80;113m:[0m[48;2;0;80;114m:[0m[48;2;0;22;31m [0m[48;2;0;0;0m [0m
[48;2;0;128;84m-[0m[48;2;0;188;124m=[0m[48;2;0;182;120m=[0m[48;2;0;188;124m=[0m[48;2;0;163;107m=[0m[48;2;0;3;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;16;11m [0m[48;2;3;156;112m=[0m[48;2;4;178;130m=[0m[48;2;4;173;126m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;1;1m [0m[48;2;1;24;19m [0m[48;2;7;170;132m=[0m[48;2;7;170;134m=[0m[48;2;8;171;136m=[0m[48;2;9;168;135m=[0m[48;2;10;170;138m=[0m[48;2;7;108;89m:[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;7;6m [0m[48;2;12;145;128m=[0m[48;2;14;161;144m=[0m[48;2;15;158;144m=[0m[48;2;15;156;144m=[0m[48;2;17;158;148m=[0m[48;2;12;111;105m-[0m[48;2;0;0;0m [0m[48;2;0;3;2m [0m[48;2;0;0;0m [0m[48;2;4;34;34m [0m[48;2;20;152;153m=[0m[48;2;20;148;152m=[0m[48;2;21;149;154m=[0m[48;2;21;145;152m=[0m[48;2;22;147;156m=[0m[48;2;9;61;65m.[0m[48;2;0;0;0m [0m[48;2;0;4;4m [0m[48;2;0;0;0m [0m[48;2;6;38;43m.[0m[48;2;25;140;159m=[0m[48;2;24;137;158m=[0m[48;2;25;137;159m=[0m[48;2;25;136;160m=[0m[48;2;24;129;152m-[0m[48;2;2;14;17m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;23;109;134m-[0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;27;128;161m=[0m[48;2;28;129;163m=[0m[48;2;23;109;139m-[0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;18;82;111m:[0m[48;2;27;119;160m-[0m[48;2;25;115;156m-[0m[48;2;25;115;156m-[0m[48;2;25;114;157m-[0m[48;2;21;102;141m-[0m[48;2;1;5;7m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;0;0;0m [0m[48;2;11;61;86m.[0m[48;2;19;104;147m-[0m[48;2;17;101;142m-[0m[48;2;16;101;143m-[0m[48;2;15;99;141m-[0m[48;2;14;94;133m:[0m[48;2;1;9;14m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;5;51;71m.[0m[48;2;9;92;130m:[0m[48;2;8;91;128m:[0m[48;2;7;90;127m:[0m[48;2;6;89;125m:[0m[48;2;5;83;119m:[0m[48;2;0;11;16m [0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;1;69;97m:[0m[48;2;0;81;115m:[0m[48;2;0;81;114m:[0m[48;2;0;80;113m:[0m[48;2;0;79;113m:[0m[48;2;0;66;94m.[0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m
[48;2;0;181;119m=[0m[48;2;0;185;122m=[0m[48;2;0;186;123m=[0m[48;2;0;188;124m=[0m[48;2;0;165;109m=[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;32;23m [0m[48;2;3;149;108m-[0m[48;2;5;180;130m=[0m[48;2;4;176;129m=[0m[48;2;6;178;132m=[0m[48;2;4;128;96m-[0m[48;2;0;9;6m [0m[48;2;0;0;0m [0m[48;2;3;81;63m:[0m[48;2;8;173;136m=[0m[48;2;8;169;134m=[0m[48;2;10;171;138m=[0m[48;2;9;168;136m=[0m[48;2;11;169;139m=[0m[48;2;3;48;40m.[0m[48;2;0;3;3m [0m[48;2;0;5;4m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;5;59;53m.[0m[48;2;15;162;145m=[0m[48;2;15;158;144m=[0m[48;2;16;159;147m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;5;44;42m.[0m[48;2;0;2;2m [0m[48;2;0;6;5m [0m[48;2;0;0;0m [0m[48;2;13;100;102m:[0m[48;2;21;150;154m=[0m[48;2;20;146;151m=[0m[48;2;21;147;154m=[0m[48;2;21;146;155m=[0m[48;2;21;134;143m=[0m[48;2;1;9;9m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;18;104;118m-[0m[48;2;25;139;160m=[0m[48;2;25;136;158m=[0m[48;2;25;134;158m=[0m[48;2;26;136;161m=[0m[48;2;14;73;87m:[0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;6;30;37m [0m[48;2;28;131;163m=[0m[48;2;27;128;161m=[0m[48;2;28;130;163m=[0m[48;2;27;126;160m-[0m[48;2;28;128;163m=[0m[48;2;15;68;87m:[0m[48;2;0;1;1m [0m[48;2;0;3;5m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;16;21m [0m[48;2;26;116;156m-[0m[48;2;25;116;158m-[0m[48;2;26;116;158m-[0m[48;2;24;112;154m-[0m[48;2;24;113;156m-[0m[48;2;12;58;81m.[0m[48;2;0;0;1m [0m[48;2;0;3;5m [0m[48;2;0;0;0m [0m[48;2;1;7;9m [0m[48;2;17;97;138m-[0m[48;2;17;102;144m-[0m[48;2;16;101;143m-[0m[48;2;15;98;139m-[0m[48;2;15;99;140m-[0m[48;2;9;60;86m.[0m[48;2;0;0;0m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;0;6;8m [0m[48;2;8;84;119m:[0m[48;2;7;90;127m:[0m[48;2;6;88;125m:[0m[48;2;6;87;122m:[0m[48;2;6;87;124m:[0m[48;2;3;58;81m.[0m[48;2;0;0;0m [0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;24;34m [0m[48;2;1;82;116m:[0m[48;2;0;81;113m:[0m[48;2;0;81;115m:[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;32;46m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m
[48;2;0;161;106m=[0m[48;2;0;188;124m=[0m[48;2;0;184;121m=[0m[48;2;0;185;123m=[0m[48;2;1;187;125m=[0m[48;2;0;110;74m:[0m[48;2;0;89;61m:[0m[48;2;1;103;70m:[0m[48;2;1;119;82m-[0m[48;2;1;119;82m-[0m[48;2;1;89;62m:[0m[48;2;0;46;32m.[0m[48;2;1;89;63m:[0m[48;2;3;173;125m=[0m[48;2;5;180;130m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;3;96;71m:[0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;5;98;77m:[0m[48;2;8;170;135m=[0m[48;2;9;166;133m=[0m[48;2;10;170;138m=[0m[48;2;10;167;137m=[0m[48;2;11;168;140m=[0m[48;2;3;51;43m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;29;26m [0m[48;2;13;147;131m=[0m[48;2;15;158;143m=[0m[48;2;15;157;145m=[0m[48;2;16;156;146m=[0m[48;2;17;157;149m=[0m[48;2;15;130;124m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;25;25m [0m[48;2;20;145;148m=[0m[48;2;20;148;153m=[0m[48;2;21;147;154m=[0m[48;2;21;144;153m=[0m[48;2;23;146;156m=[0m[48;2;12;79;85m:[0m[48;2;0;0;0m [0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;4;25;29m [0m[48;2;24;137;157m=[0m[48;2;25;136;158m=[0m[48;2;25;136;160m=[0m[48;2;25;135;160m=[0m[48;2;27;135;162m=[0m[48;2;3;19;22m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;7;35;44m.[0m[48;2;27;128;161m=[0m[48;2;27;125;159m-[0m[48;2;27;128;162m=[0m[48;2;27;125;160m-[0m[48;2;28;127;163m-[0m[48;2;15;70;91m:[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;8;11m [0m[48;2;20;89;121m:[0m[48;2;25;116;157m-[0m[48;2;25;114;156m-[0m[48;2;24;113;156m-[0m[48;2;23;112;155m-[0m[48;2;23;108;150m-[0m[48;2;2;10;13m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;12;68;97m:[0m[48;2;19;103;145m-[0m[48;2;16;100;142m-[0m[48;2;16;100;142m-[0m[48;2;14;98;138m-[0m[48;2;13;97;137m-[0m[48;2;2;18;26m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;3;34;48m.[0m[48;2;8;90;128m:[0m[48;2;6;88;125m:[0m[48;2;7;89;125m:[0m[48;2;5;86;122m:[0m[48;2;5;86;122m:[0m[48;2;1;21;30m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;12;16m [0m[48;2;0;70;100m:[0m[48;2;0;81;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;73;104m:[0m[48;2;0;4;6m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;56;36m.[0m[48;2;0;183;121m=[0m[48;2;0;187;124m=[0m[48;2;1;187;125m=[0m[48;2;0;184;124m=[0m[48;2;1;185;126m=[0m[48;2;1;110;75m:[0m[48;2;0;61;42m.[0m[48;2;1;71;49m.[0m[48;2;2;156;109m=[0m[48;2;3;182;128m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;5;180;130m=[0m[48;2;4;163;119m=[0m[48;2;4;120;89m-[0m[48;2;1;40;30m.[0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;4;3m [0m[48;2;0;0;0m [0m[48;2;2;46;37m.[0m[48;2;10;171;137m=[0m[48;2;10;170;138m=[0m[48;2;10;168;138m=[0m[48;2;10;165;137m=[0m[48;2;11;164;138m=[0m[48;2;11;145;124m=[0m[48;2;6;84;73m:[0m[48;2;7;82;72m:[0m[48;2;11;119;106m-[0m[48;2;14;157;141m=[0m[48;2;14;144;131m=[0m[48;2;16;159;147m=[0m[48;2;16;157;147m=[0m[48;2;16;154;146m=[0m[48;2;17;153;146m=[0m[48;2;17;142;138m=[0m[48;2;9;73;71m:[0m[48;2;7;59;59m.[0m[48;2;11;86;87m:[0m[48;2;18;136;138m-[0m[48;2;20;147;152m=[0m[48;2;21;146;153m=[0m[48;2;21;145;154m=[0m[48;2;22;144;154m=[0m[48;2;22;141;152m=[0m[48;2;3;19;21m [0m[48;2;0;0;0m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;6;34;40m.[0m[48;2;26;138;160m=[0m[48;2;26;137;161m=[0m[48;2;25;134;159m=[0m[48;2;26;132;159m=[0m[48;2;26;131;159m=[0m[48;2;18;92;113m:[0m[48;2;13;62;76m.[0m[48;2;15;73;92m:[0m[48;2;24;114;143m-[0m[48;2;28;129;163m=[0m[48;2;28;129;163m=[0m[48;2;28;128;163m=[0m[48;2;27;125;161m-[0m[48;2;27;124;160m-[0m[48;2;26;117;154m-[0m[48;2;16;70;92m:[0m[48;2;13;58;78m.[0m[48;2;17;79;106m:[0m[48;2;25;113;152m-[0m[48;2;23;105;142m-[0m[48;2;26;116;158m-[0m[48;2;25;114;157m-[0m[48;2;24;111;154m-[0m[48;2;23;109;151m-[0m[48;2;22;107;150m-[0m[48;2;12;63;88m:[0m[48;2;7;39;55m.[0m[48;2;10;53;76m.[0m[48;2;15;87;122m:[0m[48;2;19;103;146m-[0m[48;2;16;100;141m-[0m[48;2;15;99;140m-[0m[48;2;15;96;136m-[0m[48;2;13;97;137m-[0m[48;2;10;71;101m:[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;2m [0m[48;2;0;0;0m [0m[48;2;3;36;51m.[0m[48;2;8;90;127m:[0m[48;2;6;88;124m:[0m[48;2;5;86;122m:[0m[48;2;4;85;120m:[0m[48;2;4;86;121m:[0m[48;2;2;63;88m.[0m[48;2;0;41;58m.[0m[48;2;1;55;78m.[0m[48;2;0;78;111m:[0m[48;2;1;82;115m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;42;61m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;39;26m.[0m[48;2;0;126;84m-[0m[48;2;0;171;115m=[0m[48;2;1;185;126m=[0m[48;2;2;185;126m=[0m[48;2;2;184;127m=[0m[48;2;2;183;127m=[0m[48;2;3;183;128m=[0m[48;2;3;182;129m=[0m[48;2;4;181;129m=[0m[48;2;4;180;130m=[0m[48;2;4;174;125m=[0m[48;2;4;177;129m=[0m[48;2;3;113;83m-[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;3;60;49m.[0m[48;2;9;141;116m-[0m[48;2;11;168;140m=[0m[48;2;12;167;141m=[0m[48;2;13;166;142m=[0m[48;2;13;165;143m=[0m[48;2;14;164;143m=[0m[48;2;14;163;144m=[0m[48;2;11;121;108m-[0m[48;2;3;39;35m.[0m[48;2;1;14;13m [0m[48;2;13;124;115m-[0m[48;2;17;157;149m=[0m[48;2;18;156;150m=[0m[48;2;18;155;150m=[0m[48;2;19;154;151m=[0m[48;2;20;153;152m=[0m[48;2;19;148;149m=[0m[48;2;17;123;124m-[0m[48;2;21;149;154m=[0m[48;2;22;148;155m=[0m[48;2;22;147;156m=[0m[48;2;23;146;156m=[0m[48;2;23;145;157m=[0m[48;2;16;96;104m:[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;13;70;83m:[0m[48;2;24;126;149m-[0m[48;2;27;135;162m=[0m[48;2;27;134;162m=[0m[48;2;27;133;162m=[0m[48;2;27;132;162m=[0m[48;2;28;131;163m=[0m[48;2;26;123;154m-[0m[48;2;15;71;90m:[0m[48;2;7;35;45m.[0m[48;2;21;96;123m-[0m[48;2;27;125;160m-[0m[48;2;28;126;163m-[0m[48;2;28;124;163m-[0m[48;2;28;123;162m-[0m[48;2;28;122;162m-[0m[48;2;27;120;161m-[0m[48;2;22;99;133m-[0m[48;2;10;46;63m.[0m[48;2;0;4;6m [0m[48;2;15;72;99m:[0m[48;2;24;111;153m-[0m[48;2;24;111;155m-[0m[48;2;23;110;153m-[0m[48;2;22;109;152m-[0m[48;2;21;107;150m-[0m[48;2;20;106;149m-[0m[48;2;15;82;115m:[0m[48;2;14;75;106m:[0m[48;2;17;102;144m-[0m[48;2;16;100;142m-[0m[48;2;15;99;140m-[0m[48;2;14;98;139m-[0m[48;2;13;97;137m:[0m[48;2;3;28;41m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;4;5m [0m[48;2;4;57;80m.[0m[48;2;5;86;121m:[0m[48;2;5;87;122m:[0m[48;2;4;86;121m:[0m[48;2;2;84;119m:[0m[48;2;3;84;119m:[0m[48;2;1;82;117m:[0m[48;2;0;64;90m.[0m[48;2;0;67;95m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;77;110m:[0m[48;2;0;10;15m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;1;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;13;8m [0m[48;2;0;39;26m.[0m[48;2;0;56;38m.[0m[48;2;0;65;45m.[0m[48;2;1;68;47m.[0m[48;2;1;62;44m.[0m[48;2;0;48;34m.[0m[48;2;0;39;28m.[0m[48;2;4;156;113m=[0m[48;2;5;179;131m=[0m[48;2;5;176;130m=[0m[48;2;6;177;133m=[0m[48;2;6;151;114m=[0m[48;2;3;94;71m:[0m[48;2;2;54;42m.[0m[48;2;2;46;36m.[0m[48;2;1;35;27m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;2;2m [0m[48;2;2;31;26m [0m[48;2;3;52;44m.[0m[48;2;4;60;51m.[0m[48;2;4;54;47m.[0m[48;2;3;35;31m [0m[48;2;1;10;9m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;31;29m [0m[48;2;6;51;50m.[0m[48;2;6;56;55m.[0m[48;2;6;48;48m.[0m[48;2;4;30;30m [0m[48;2;0;7;7m [0m[48;2;0;0;0m [0m[48;2;5;37;39m.[0m[48;2;5;38;40m.[0m[48;2;6;38;40m.[0m[48;2;5;37;40m.[0m[48;2;6;37;41m.[0m[48;2;2;12;14m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;2;10;12m [0m[48;2;6;33;40m.[0m[48;2;9;45;55m.[0m[48;2;9;48;59m.[0m[48;2;8;40;49m.[0m[48;2;5;23;29m [0m[48;2;0;2;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;4;18;23m [0m[48;2;8;36;47m.[0m[48;2;10;44;58m.[0m[48;2;9;42;56m.[0m[48;2;6;30;40m [0m[48;2;2;13;17m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;3;17;23m [0m[48;2;7;34;47m.[0m[48;2;8;39;55m.[0m[48;2;7;36;50m.[0m[48;2;4;24;35m [0m[48;2;1;9;13m [0m[48;2;0;0;0m [0m[48;2;1;11;15m [0m[48;2;4;26;37m [0m[48;2;4;25;36m [0m[48;2;3;25;36m [0m[48;2;3;25;35m [0m[48;2;3;24;34m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;11;15m [0m[48;2;1;20;29m [0m[48;2;1;37;52m.[0m[48;2;1;57;80m.[0m[48;2;1;61;86m.[0m[48;2;0;52;73m.[0m[48;2;0;44;62m.[0m[48;2;0;75;107m:[0m[48;2;0;79;113m:[0m[48;2;0;79;113m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;1;0m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;26;19m [0m[48;2;4;131;97m-[0m[48;2;5;175;131m=[0m[48;2;7;176;133m=[0m[48;2;7;175;134m=[0m[48;2;8;174;135m=[0m[48;2;8;173;136m=[0m[48;2;7;151;120m=[0m[48;2;2;49;39m.[0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;1;42;59m.[0m[48;2;2;68;95m:[0m[48;2;1;46;66m.[0m[48;2;0;21;30m [0m[48;2;0;3;5m [0m[48;2;0;40;56m.[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;80;114m:[0m[48;2;0;78;111m:[0m[48;2;0;80;114m:[0m[48;2;0;18;26m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;1;30;22m [0m[48;2;2;57;44m.[0m[48;2;3;68;52m.[0m[48;2;2;63;49m.[0m[48;2;2;42;33m.[0m[48;2;0;3;3m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;2m [0m[48;2;0;1;2m [0m[48;2;0;1;1m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;1;48;68m.[0m[48;2;3;84;119m:[0m[48;2;1;53;74m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;14;21m [0m[48;2;0;73;104m:[0m[48;2;0;79;112m:[0m[48;2;0;78;112m:[0m[48;2;0;79;113m:[0m[48;2;0;80;114m:[0m[48;2;0;53;76m.[0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;1m [0m[48;2;0;0;0m [0m[48;2;1;37;52m.[0m[48;2;2;83;118m:[0m[48;2;0;80;114m:[0m[48;2;0;64;90m.[0m[48;2;0;61;87m.[0m[48;2;0;79;112m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;80;114m:[0m[48;2;0;79;113m:[0m[48;2;0;50;72m.[0m[48;2;0;3;4m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m
[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;1;1m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;2m [0m[48;2;0;2;1m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;27;38m [0m[48;2;0;59;83m.[0m[48;2;0;77;109m:[0m[48;2;0;81;114m:[0m[48;2;0;78;112m:[0m[48;2;0;74;105m:[0m[48;2;0;65;93m.[0m[48;2;0;48;68m.[0m[48;2;0;20;29m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m[48;2;0;0;0m [0m


[49m[32mDandelionNER -- DandelionNER is a Qanary component 
[49m[92mFramework@GitHub:       https://github.com/WDAqua/Qanary 
[49m[36mComponents@GitHub:      https://github.com/WDAqua/Qanary-question-answering-components
[49m[94mComponent Version:      3.4.0       
[49m[34mSpring Boot Version:    2.6.7      
[47m[30mQanary System endpoint: http://localhost:8080 [49m[39m

[2m2023-10-27 13:38:54.174[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Starting Application v3.4.0 using Java 21 on fedora with PID 30120 (/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/target/qanary-component-NER-Dandelion-3.4.0.jar started by dennisschiese in /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion)
[2m2023-10-27 13:38:54.242[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m Running with Spring Boot v2.6.7, Spring v5.3.19
[2m2023-10-27 13:38:54.275[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.dandelion.ner.Application       [0;39m [2m:[0;39m The following 1 profile is active: "local"
[2m2023-10-27 13:39:16.941[0;39m [33m WARN[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse: initialized
[2m2023-10-27 13:39:17.637[0;39m [33m WARN[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m eu.wdaqua.qanary.communications.RestTemplateWithCaching was initialized
[2m2023-10-27 13:39:17.680[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6b5966e1
[2m2023-10-27 13:39:17.691[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 13:39:18.034[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:39:18.152[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:39:18.181[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:39:18.242[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 13:39:20.863[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@66d57c1b
[2m2023-10-27 13:39:20.904[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:39:20.961[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:39:20.980[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:39:21.507[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:39:20.836"}
[2m2023-10-27 13:39:21.550[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 13:39:21.796[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6b9c69a9
[2m2023-10-27 13:39:21.797[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m API live testing is activated
[2m2023-10-27 13:39:21.799[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:39:21.799[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:39:21.851[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:39:21.851[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1233625837
[2m2023-10-27 13:39:21.907[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@6622a690
[2m2023-10-27 13:39:21.907[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:39:21.916[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:39:21.929[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+a+test%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:39:21.929[0;39m [32mDEBUG[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":0,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:39:21.883"}
[2m2023-10-27 13:39:21.929[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Functionality works as expected
[2m2023-10-27 13:39:21.931[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m qanaryComponent: eu.wdaqua.qanary.component.dandelion.ner.Dandelion@412c995d
[2m2023-10-27 13:39:22.099[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.q.c.QanaryComponentConfiguration    [0;39m [2m:[0;39m Current Component Configuration: 
server.host                              = null
server.port                              = 8323
spring.application.name                  = DandelionNER
spring.application.description           = DandelionNER is a Qanary component
spring.boot.admin.url                    = http://localhost:8080
spring.boot.admin.client.url             = http://localhost:8080

[2m2023-10-27 13:39:22.322[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m location of component-description.ttl: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl
[2m2023-10-27 13:39:27.002[0;39m [33m WARN[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36mq.c.QanaryComponentDescriptionController[0;39m [2m:[0;39m could not find a Turtle service description at '/home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl': org.apache.jena.riot.RiotNotFoundException: Not found: /home/dennisschiese/wseresearch/forked_repos/Qanary-question-answering-components/qanary-component-NER-Dandelion/src/main/resources/component-description.ttl. Please consider to store a component description file to enable automatic pipeline compositions.
[2m2023-10-27 13:39:27.168[0;39m [32m INFO[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36me.w.qanary.commons.config.CacheConfig   [0;39m [2m:[0;39m cacheManager configuration: maximumSize=10000,expireAfterAccess=5s
[2m2023-10-27 13:39:34.612[0;39m [33m WARN[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36mConfigServletWebServerApplicationContext[0;39m [2m:[0;39m Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'; nested exception is org.springframework.boot.web.server.PortInUseException: Port 8323 is already in use
[2m2023-10-27 13:39:35.194[0;39m [31mERROR[0;39m [35m30120[0;39m [2m---[0;39m [2m[           main][0;39m [36mo.s.b.d.LoggingFailureAnalysisReporter  [0;39m [2m:[0;39m 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8323 was already in use.

Action:

Identify and stop the process that's listening on port 8323 or configure this application to listen on another port.

[2m2023-10-27 13:55:30.424[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0","outGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0"}
[2m2023-10-27 13:55:30.464[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0","outGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0"}
[2m2023-10-27 13:55:30.646[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0"},"inGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0","outGraph":"urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0"}
[2m2023-10-27 13:55:30.914[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@50dbd6d2
[2m2023-10-27 13:55:31.084[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@4fbc384e
[2m2023-10-27 13:55:31.127[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 13:55:31.813[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:55:31.815[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:55:31.920[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1
[2m2023-10-27 13:55:31.920[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1 found in urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0 at http://localhost:8080/sparql
[2m2023-10-27 13:55:31.923[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation How many public holidays does the state Bavaria have in a year? 
[2m2023-10-27 13:55:31.923[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question How many public holidays does the state Bavaria have in a year?
[2m2023-10-27 13:55:31.924[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+public+holidays+does+the+state+Bavaria+have+in+a+year%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:55:31.924[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+public+holidays+does+the+state+Bavaria+have+in+a+year%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:55:31.924[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:55:32.037[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-880252883
[2m2023-10-27 13:55:32.243[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@6268d57f
[2m2023-10-27 13:55:32.244[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:55:32.244[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:55:32.245[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+public+holidays+does+the+state+Bavaria+have+in+a+year%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:55:32.245[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":9,"end":24,"spot":"public holidays","confidence":0.6371,"id":52396,"title":"Public holiday","uri":"http://en.wikipedia.org/wiki/Public_holiday","abstract":"A public holiday, national holiday, federal holiday, statutory holiday, or legal holiday is a holiday generally established by law and is usually a non-working day during the year.","label":"Public holiday","categories":["Holidays","Public sphere"],"types":[]},{"start":40,"end":47,"spot":"Bavaria","confidence":0.8386,"id":3764,"title":"Bavaria","uri":"http://en.wikipedia.org/wiki/Bavaria","abstract":"Bavaria, officially the Free State of Bavaria, is a state in the south-east of Germany. With an area of, Bavaria is the largest German state by land area, comprising roughly a fifth of the total land area of Germany. With over 13 million inhabitants, it is the second largest German state in terms of population only to North Rhine-Westphalia, but due to its large size its population density is below the German average. Major cities include Munich (its capital and largest city, which is also the third largest city in Germany), Nuremberg, and Augsburg.","label":"Bavaria","categories":["Bavaria","Boii","States of Germany","States of the Weimar Republic"],"types":["http://dbpedia.org/ontology/Settlement","http://dbpedia.org/ontology/PopulatedPlace","http://dbpedia.org/ontology/Place","http://dbpedia.org/ontology/Location"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:55:32.220"}
[2m2023-10-27 13:55:32.246[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":9,"end":24,"spot":"public holidays","confidence":0.6371,"id":52396,"title":"Public holiday","uri":"http://en.wikipedia.org/wiki/Public_holiday","abstract":"A public holiday, national holiday, federal holiday, statutory holiday, or legal holiday is a holiday generally established by law and is usually a non-working day during the year.","label":"Public holiday","categories":["Holidays","Public sphere"],"types":[]}
[2m2023-10-27 13:55:32.246[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 9
[2m2023-10-27 13:55:32.246[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 24
[2m2023-10-27 13:55:32.246[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":40,"end":47,"spot":"Bavaria","confidence":0.8386,"id":3764,"title":"Bavaria","uri":"http://en.wikipedia.org/wiki/Bavaria","abstract":"Bavaria, officially the Free State of Bavaria, is a state in the south-east of Germany. With an area of, Bavaria is the largest German state by land area, comprising roughly a fifth of the total land area of Germany. With over 13 million inhabitants, it is the second largest German state in terms of population only to North Rhine-Westphalia, but due to its large size its population density is below the German average. Major cities include Munich (its capital and largest city, which is also the third largest city in Germany), Nuremberg, and Augsburg.","label":"Bavaria","categories":["Bavaria","Boii","States of Germany","States of the Weimar Republic"],"types":["http://dbpedia.org/ontology/Settlement","http://dbpedia.org/ontology/PopulatedPlace","http://dbpedia.org/ontology/Place","http://dbpedia.org/ontology/Location"]}
[2m2023-10-27 13:55:32.246[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 40
[2m2023-10-27 13:55:32.246[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 47
[2m2023-10-27 13:55:32.253[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1
[2m2023-10-27 13:55:32.254[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@373cab7c
[2m2023-10-27 13:55:32.254[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:55:32.281[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "24"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:55:32.282[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "24"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:55:32.283[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "24"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:55:32.302[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@556ecbde
[2m2023-10-27 13:55:32.303[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:55:32.308[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "40"^^xsd:nonNegativeInteger .
    _:b1 oa:end "47"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:55:32.309[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "40"^^xsd:nonNegativeInteger .
    _:b1 oa:end "47"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:55:32.309[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:66f0cd3f-5979-42eb-abef-c6574ce7afe0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b16f469c-6297-4e1b-9bda-d2f390f9f6f1> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "40"^^xsd:nonNegativeInteger .
    _:b1 oa:end "47"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:55:32.318[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 1869 ms
[2m2023-10-27 13:57:01.075[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c","outGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c"}
[2m2023-10-27 13:57:01.076[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c","outGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c"}
[2m2023-10-27 13:57:01.077[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c"},"inGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c","outGraph":"urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c"}
[2m2023-10-27 13:57:01.077[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@2d4aee2b
[2m2023-10-27 13:57:01.146[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@238d05f2
[2m2023-10-27 13:57:01.146[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 13:57:01.149[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:57:01.150[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:57:01.160[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_5da116ef-6bdf-4e63-af36-eb59f3bbff25
[2m2023-10-27 13:57:01.161[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_5da116ef-6bdf-4e63-af36-eb59f3bbff25 found in urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c at http://localhost:8080/sparql
[2m2023-10-27 13:57:01.164[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation When was the University of Hamburg founded? 
[2m2023-10-27 13:57:01.165[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question When was the University of Hamburg founded?
[2m2023-10-27 13:57:01.165[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=When+was+the+University+of+Hamburg+founded%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:57:01.165[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=When+was+the+University+of+Hamburg+founded%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:57:01.165[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:57:01.165[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-1358403397
[2m2023-10-27 13:57:01.419[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@62b00fc9
[2m2023-10-27 13:57:01.419[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:57:01.420[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:57:01.421[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=When+was+the+University+of+Hamburg+founded%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:57:01.421[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":13,"end":34,"spot":"University of Hamburg","confidence":0.8532,"id":1753136,"title":"University of Hamburg","uri":"http://en.wikipedia.org/wiki/University_of_Hamburg","abstract":"The University of Hamburg (also referred to as UHH) is a public research university in Hamburg, Germany. It was founded on 28 March 1919 by combining the previous General Lecture System, the Hamburg Colonial Institute, and the Academic College. The main campus is located in the central district of Rotherbaum, with affiliated institutes and research centres distributed around the city-state. Seven Nobel Prize winners and one Wolf Prize winner are affiliated with UHH.","label":"University of Hamburg","categories":["1919 establishments in Germany","Educational institutions established in 1919","Universities and colleges in Hamburg","University of Hamburg"],"types":["http://dbpedia.org/ontology/University","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/EducationalInstitution","http://dbpedia.org/ontology/Agent"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:57:01.383"}
[2m2023-10-27 13:57:01.422[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":13,"end":34,"spot":"University of Hamburg","confidence":0.8532,"id":1753136,"title":"University of Hamburg","uri":"http://en.wikipedia.org/wiki/University_of_Hamburg","abstract":"The University of Hamburg (also referred to as UHH) is a public research university in Hamburg, Germany. It was founded on 28 March 1919 by combining the previous General Lecture System, the Hamburg Colonial Institute, and the Academic College. The main campus is located in the central district of Rotherbaum, with affiliated institutes and research centres distributed around the city-state. Seven Nobel Prize winners and one Wolf Prize winner are affiliated with UHH.","label":"University of Hamburg","categories":["1919 establishments in Germany","Educational institutions established in 1919","Universities and colleges in Hamburg","University of Hamburg"],"types":["http://dbpedia.org/ontology/University","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/EducationalInstitution","http://dbpedia.org/ontology/Agent"]}
[2m2023-10-27 13:57:01.422[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 13
[2m2023-10-27 13:57:01.422[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 34
[2m2023-10-27 13:57:01.431[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_5da116ef-6bdf-4e63-af36-eb59f3bbff25
[2m2023-10-27 13:57:01.431[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@18718e02
[2m2023-10-27 13:57:01.432[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:57:01.436[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5da116ef-6bdf-4e63-af36-eb59f3bbff25> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "13"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:01.437[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5da116ef-6bdf-4e63-af36-eb59f3bbff25> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "13"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:01.437[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:9bb28f59-c484-4c37-b078-84eae39fbc7c> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5da116ef-6bdf-4e63-af36-eb59f3bbff25> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "13"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:01.448[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 372 ms
[2m2023-10-27 13:57:49.996[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0","outGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0"}
[2m2023-10-27 13:57:49.996[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0","outGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0"}
[2m2023-10-27 13:57:49.996[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0"},"inGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0","outGraph":"urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0"}
[2m2023-10-27 13:57:49.997[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@3b303948
[2m2023-10-27 13:57:50.026[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@712aa569
[2m2023-10-27 13:57:50.026[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 13:57:50.028[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:57:50.029[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:57:50.037[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57
[2m2023-10-27 13:57:50.037[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57 found in urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0 at http://localhost:8080/sparql
[2m2023-10-27 13:57:50.040[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation How many movies does the Scream franchise have? 
[2m2023-10-27 13:57:50.040[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question How many movies does the Scream franchise have?
[2m2023-10-27 13:57:50.040[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+movies+does+the+Scream+franchise+have%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:57:50.040[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+movies+does+the+Scream+franchise+have%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:57:50.040[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:57:50.041[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1780345356
[2m2023-10-27 13:57:50.190[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@5c877fbc
[2m2023-10-27 13:57:50.190[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:57:50.191[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+movies+does+the+Scream+franchise+have%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":9,"end":15,"spot":"movies","confidence":0.6928,"id":21555729,"title":"Film","uri":"http://en.wikipedia.org/wiki/Film","abstract":"A film also called a movie, motion picture, moving picture, picture, photoplay or (slang) flick is a work of visual art that simulates experiences and otherwise communicates ideas, stories, perceptions, feelings, beauty, or atmosphere through the use of moving images. These images are generally accompanied by sound and, more rarely, other sensory stimulations. The word \"cinema\", short for cinematography, is often used to refer to filmmaking and the film industry, and the art form that is the result of it.","label":"Film","categories":["19th-century inventions","Articles containing video clips","Film","French inventions","Media formats","Visual arts media"],"types":[]},{"start":25,"end":41,"spot":"Scream franchise","confidence":0.8739,"id":9031174,"title":"Scream (franchise)","uri":"http://en.wikipedia.org/wiki/Scream_%28franchise%29","abstract":"Scream is an American murder mystery and slasher franchise that includes six films, a television series, merchandise, and games. The first four films were directed by Wes Craven. The series was created by Kevin Williamson, who wrote the first two films and the fourth; Ehren Kruger wrote the third. The fifth and sixth installments were directed by Matt Bettinelli-Olpin and Tyler Gillett, with Guy Busick and James Vanderbilt serving as writers and Williamson returning as executive producer. Dimension Films produced the first four films. Spyglass Media Group took over the rights from the fifth film on with Paramount Pictures distributing. The film series has grossed over at the global box office.","label":"Scream","categories":["Horror film franchises","Mass media franchises introduced in 1996","Miramax franchises","Paramount Pictures franchises","Scream (franchise)"],"types":["http://dbpedia.org/ontology/Film","http://dbpedia.org/ontology/Work"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:57:50.167"}
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":9,"end":15,"spot":"movies","confidence":0.6928,"id":21555729,"title":"Film","uri":"http://en.wikipedia.org/wiki/Film","abstract":"A film also called a movie, motion picture, moving picture, picture, photoplay or (slang) flick is a work of visual art that simulates experiences and otherwise communicates ideas, stories, perceptions, feelings, beauty, or atmosphere through the use of moving images. These images are generally accompanied by sound and, more rarely, other sensory stimulations. The word \"cinema\", short for cinematography, is often used to refer to filmmaking and the film industry, and the art form that is the result of it.","label":"Film","categories":["19th-century inventions","Articles containing video clips","Film","French inventions","Media formats","Visual arts media"],"types":[]}
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 9
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 15
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":25,"end":41,"spot":"Scream franchise","confidence":0.8739,"id":9031174,"title":"Scream (franchise)","uri":"http://en.wikipedia.org/wiki/Scream_%28franchise%29","abstract":"Scream is an American murder mystery and slasher franchise that includes six films, a television series, merchandise, and games. The first four films were directed by Wes Craven. The series was created by Kevin Williamson, who wrote the first two films and the fourth; Ehren Kruger wrote the third. The fifth and sixth installments were directed by Matt Bettinelli-Olpin and Tyler Gillett, with Guy Busick and James Vanderbilt serving as writers and Williamson returning as executive producer. Dimension Films produced the first four films. Spyglass Media Group took over the rights from the fifth film on with Paramount Pictures distributing. The film series has grossed over at the global box office.","label":"Scream","categories":["Horror film franchises","Mass media franchises introduced in 1996","Miramax franchises","Paramount Pictures franchises","Scream (franchise)"],"types":["http://dbpedia.org/ontology/Film","http://dbpedia.org/ontology/Work"]}
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 25
[2m2023-10-27 13:57:50.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 41
[2m2023-10-27 13:57:50.201[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57
[2m2023-10-27 13:57:50.202[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@66c7e71d
[2m2023-10-27 13:57:50.202[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:57:50.204[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:50.204[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:50.204[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:50.211[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@42620741
[2m2023-10-27 13:57:50.212[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:57:50.214[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "25"^^xsd:nonNegativeInteger .
    _:b1 oa:end "41"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:50.215[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "25"^^xsd:nonNegativeInteger .
    _:b1 oa:end "41"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:50.215[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:b1d0eb8b-2049-42b0-b290-a0f7a22af3e0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b0c94db6-4934-4ae1-a41f-90d07d6c7b57> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "25"^^xsd:nonNegativeInteger .
    _:b1 oa:end "41"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:57:50.221[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 225 ms
[2m2023-10-27 13:58:44.116[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f","outGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f"}
[2m2023-10-27 13:58:44.116[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f","outGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f"}
[2m2023-10-27 13:58:44.116[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f"},"inGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f","outGraph":"urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f"}
[2m2023-10-27 13:58:44.116[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@7232d4f5
[2m2023-10-27 13:58:44.127[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@ebea5bb
[2m2023-10-27 13:58:44.127[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 13:58:44.130[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:58:44.131[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:58:44.138[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089
[2m2023-10-27 13:58:44.139[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089 found in urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f at http://localhost:8080/sparql
[2m2023-10-27 13:58:44.142[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Which actor starring in Free Guy also starred in Deadpool? 
[2m2023-10-27 13:58:44.142[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Which actor starring in Free Guy also starred in Deadpool?
[2m2023-10-27 13:58:44.142[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+actor+starring+in+Free+Guy+also+starred+in+Deadpool%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:58:44.142[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Which+actor+starring+in+Free+Guy+also+starred+in+Deadpool%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:58:44.143[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:58:44.143[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-612690955
[2m2023-10-27 13:58:44.267[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@766cccfe
[2m2023-10-27 13:58:44.267[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:58:44.267[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:58:44.268[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+actor+starring+in+Free+Guy+also+starred+in+Deadpool%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:58:44.268[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":24,"end":32,"spot":"Free Guy","confidence":0.9181,"id":60203476,"title":"Free Guy","uri":"http://en.wikipedia.org/wiki/Free_Guy","abstract":"Free Guy is a 2021 American action comedy film directed and produced by Shawn Levy from a screenplay by Matt Lieberman and Zak Penn, and a story by Lieberman. The film stars Ryan Reynolds, Jodie Comer, Lil Rel Howery, Utkarsh Ambudkar, Joe Keery, and Taika Waititi. It tells the story of a bank teller who discovers that he is a non-player character in a massively multiplayer online game who then partners with a player to find evidence that a gaming company's CEO stole the player's game's source code.","label":"Free Guy","categories":["2020s American films","2020s English-language films","2020s science fiction comedy films","2021 action comedy films","2021 films","2021 science fiction action films","20th Century Studios films","21 Laps Entertainment films","4DX films","American action comedy films","American science fiction action films","American science fiction comedy films","Films about video games","Films about virtual reality","Films directed by Shawn Levy","Films postponed due to the COVID-19 pandemic","Films produced by Greg Berlanti","Films produced by Ryan Reynolds","Films scored by Christophe Beck","Films set in the future","Films shot in Boston","Films shot in Massachusetts","IMAX films","Self-reflexive films","TSG Entertainment films","Works set in computers"],"types":["http://dbpedia.org/ontology/Film","http://dbpedia.org/ontology/Work"]},{"start":49,"end":57,"spot":"Deadpool","confidence":0.9265,"id":43867095,"title":"Deadpool (film)","uri":"http://en.wikipedia.org/wiki/Deadpool_%28film%29","abstract":"Deadpool is a 2016 American superhero film based on the Marvel Comics character of the same name. Distributed by 20th Century Fox, it is a spin-off in the X-Men film series and the eighth installment overall. Directed by Tim Miller (in his feature directorial debut) and written by Rhett Reese and Paul Wernick, it stars Ryan Reynolds in the title role alongside Morena Baccarin, Ed Skrein, T. J. Miller, Gina Carano, and Brianna Hildebrand. In the film, Wade Wilson hunts the man who gave him mutant abilities and a scarred physical appearance, becoming the antihero Deadpool.","label":"Deadpool","categories":["2010s American films","2010s English-language films","2010s superhero comedy films","2016 action comedy films","2016 black comedy films","2016 directorial debut films","2016 films","20th Century Fox films","American action comedy films","American black comedy films","American films about revenge","American superhero films","American vigilante films","Deadpool (film series)","Film spin-offs","Films directed by Tim Miller","Films produced by Lauren Shuler Donner","Films produced by Ryan Reynolds","Films produced by Simon Kinberg","Films scored by Junkie XL","Films set in Westchester County, New York","Films shot in Vancouver","Films using motion capture","Films with screenplays by Paul Wernick","Films with screenplays by Rhett Reese","Human experimentation in fiction","IMAX films","Live-action films based on Marvel Comics","Metafictional works","Self-reflexive films","Superhero black comedy films","TSG Entertainment films","X-Men (film series)"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:58:44.248"}
[2m2023-10-27 13:58:44.268[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":24,"end":32,"spot":"Free Guy","confidence":0.9181,"id":60203476,"title":"Free Guy","uri":"http://en.wikipedia.org/wiki/Free_Guy","abstract":"Free Guy is a 2021 American action comedy film directed and produced by Shawn Levy from a screenplay by Matt Lieberman and Zak Penn, and a story by Lieberman. The film stars Ryan Reynolds, Jodie Comer, Lil Rel Howery, Utkarsh Ambudkar, Joe Keery, and Taika Waititi. It tells the story of a bank teller who discovers that he is a non-player character in a massively multiplayer online game who then partners with a player to find evidence that a gaming company's CEO stole the player's game's source code.","label":"Free Guy","categories":["2020s American films","2020s English-language films","2020s science fiction comedy films","2021 action comedy films","2021 films","2021 science fiction action films","20th Century Studios films","21 Laps Entertainment films","4DX films","American action comedy films","American science fiction action films","American science fiction comedy films","Films about video games","Films about virtual reality","Films directed by Shawn Levy","Films postponed due to the COVID-19 pandemic","Films produced by Greg Berlanti","Films produced by Ryan Reynolds","Films scored by Christophe Beck","Films set in the future","Films shot in Boston","Films shot in Massachusetts","IMAX films","Self-reflexive films","TSG Entertainment films","Works set in computers"],"types":["http://dbpedia.org/ontology/Film","http://dbpedia.org/ontology/Work"]}
[2m2023-10-27 13:58:44.268[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 24
[2m2023-10-27 13:58:44.268[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 32
[2m2023-10-27 13:58:44.268[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":49,"end":57,"spot":"Deadpool","confidence":0.9265,"id":43867095,"title":"Deadpool (film)","uri":"http://en.wikipedia.org/wiki/Deadpool_%28film%29","abstract":"Deadpool is a 2016 American superhero film based on the Marvel Comics character of the same name. Distributed by 20th Century Fox, it is a spin-off in the X-Men film series and the eighth installment overall. Directed by Tim Miller (in his feature directorial debut) and written by Rhett Reese and Paul Wernick, it stars Ryan Reynolds in the title role alongside Morena Baccarin, Ed Skrein, T. J. Miller, Gina Carano, and Brianna Hildebrand. In the film, Wade Wilson hunts the man who gave him mutant abilities and a scarred physical appearance, becoming the antihero Deadpool.","label":"Deadpool","categories":["2010s American films","2010s English-language films","2010s superhero comedy films","2016 action comedy films","2016 black comedy films","2016 directorial debut films","2016 films","20th Century Fox films","American action comedy films","American black comedy films","American films about revenge","American superhero films","American vigilante films","Deadpool (film series)","Film spin-offs","Films directed by Tim Miller","Films produced by Lauren Shuler Donner","Films produced by Ryan Reynolds","Films produced by Simon Kinberg","Films scored by Junkie XL","Films set in Westchester County, New York","Films shot in Vancouver","Films using motion capture","Films with screenplays by Paul Wernick","Films with screenplays by Rhett Reese","Human experimentation in fiction","IMAX films","Live-action films based on Marvel Comics","Metafictional works","Self-reflexive films","Superhero black comedy films","TSG Entertainment films","X-Men (film series)"],"types":[]}
[2m2023-10-27 13:58:44.268[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 49
[2m2023-10-27 13:58:44.268[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 57
[2m2023-10-27 13:58:44.274[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089
[2m2023-10-27 13:58:44.274[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@121d2bba
[2m2023-10-27 13:58:44.275[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:58:44.276[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "24"^^xsd:nonNegativeInteger .
    _:b1 oa:end "32"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:44.277[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "24"^^xsd:nonNegativeInteger .
    _:b1 oa:end "32"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:44.277[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "24"^^xsd:nonNegativeInteger .
    _:b1 oa:end "32"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:44.285[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@69f5d73f
[2m2023-10-27 13:58:44.285[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:58:44.287[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "49"^^xsd:nonNegativeInteger .
    _:b1 oa:end "57"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:44.287[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "49"^^xsd:nonNegativeInteger .
    _:b1 oa:end "57"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:44.287[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ec44e0d9-ed20-43f0-b203-9e066b87411f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_1d38dc87-3f4b-4869-9539-c582e471a089> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "49"^^xsd:nonNegativeInteger .
    _:b1 oa:end "57"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:44.294[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 178 ms
[2m2023-10-27 13:58:58.355[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6","outGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6"}
[2m2023-10-27 13:58:58.356[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6","outGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6"}
[2m2023-10-27 13:58:58.356[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6"},"inGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6","outGraph":"urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6"}
[2m2023-10-27 13:58:58.357[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@14b7ebc5
[2m2023-10-27 13:58:58.372[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@1a700723
[2m2023-10-27 13:58:58.372[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 13:58:58.374[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:58:58.375[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:58:58.384[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090
[2m2023-10-27 13:58:58.384[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090 found in urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6 at http://localhost:8080/sparql
[2m2023-10-27 13:58:58.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation What notes does a C major chord consist of? 
[2m2023-10-27 13:58:58.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question What notes does a C major chord consist of?
[2m2023-10-27 13:58:58.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+notes+does+a+C+major+chord+consist+of%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:58:58.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+notes+does+a+C+major+chord+consist+of%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:58:58.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:58:58.386[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-709828756
[2m2023-10-27 13:58:58.516[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@5b4d0d18
[2m2023-10-27 13:58:58.516[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:58:58.517[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:58:58.519[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+notes+does+a+C+major+chord+consist+of%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:58:58.519[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":18,"end":25,"spot":"C major","confidence":0.7995,"id":421402,"title":"C major","uri":"http://en.wikipedia.org/wiki/C_major","abstract":"C major (or the key of C) is a major scale based on C, consisting of the pitches C, D, E, F, G, A, and B. C major is one of the most common keys used in music. Its key signature has no flats or sharps. Its relative minor is A minor and its parallel minor is C minor.","label":"C major","categories":["Compositions in C major","Major scales","Musical keys"],"types":[]},{"start":20,"end":31,"spot":"major chord","confidence":0.7794,"id":417032,"title":"Major chord","uri":"http://en.wikipedia.org/wiki/Major_chord","abstract":"In music theory, a major chord is a chord that has a root, a major third, and a perfect fifth. When a chord comprises only these three notes, it is called a major triad. For example, the major triad built on C, called a C major triad, has pitches C–E–G:","label":"Major chord","categories":["Chords"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:58:58.495"}
[2m2023-10-27 13:58:58.519[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":18,"end":25,"spot":"C major","confidence":0.7995,"id":421402,"title":"C major","uri":"http://en.wikipedia.org/wiki/C_major","abstract":"C major (or the key of C) is a major scale based on C, consisting of the pitches C, D, E, F, G, A, and B. C major is one of the most common keys used in music. Its key signature has no flats or sharps. Its relative minor is A minor and its parallel minor is C minor.","label":"C major","categories":["Compositions in C major","Major scales","Musical keys"],"types":[]}
[2m2023-10-27 13:58:58.519[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 18
[2m2023-10-27 13:58:58.519[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 25
[2m2023-10-27 13:58:58.519[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":20,"end":31,"spot":"major chord","confidence":0.7794,"id":417032,"title":"Major chord","uri":"http://en.wikipedia.org/wiki/Major_chord","abstract":"In music theory, a major chord is a chord that has a root, a major third, and a perfect fifth. When a chord comprises only these three notes, it is called a major triad. For example, the major triad built on C, called a C major triad, has pitches C–E–G:","label":"Major chord","categories":["Chords"],"types":[]}
[2m2023-10-27 13:58:58.519[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 20
[2m2023-10-27 13:58:58.520[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 31
[2m2023-10-27 13:58:58.524[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090
[2m2023-10-27 13:58:58.525[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@708f2c77
[2m2023-10-27 13:58:58.525[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:58:58.527[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "18"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:58.528[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "18"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:58.528[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "18"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:58.536[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6a5c745a
[2m2023-10-27 13:58:58.536[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:58:58.539[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "20"^^xsd:nonNegativeInteger .
    _:b1 oa:end "31"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:58.539[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "20"^^xsd:nonNegativeInteger .
    _:b1 oa:end "31"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:58.539[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:632dfce3-e440-4e18-9e41-72d87f951eb6> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4dd80ea2-7e69-4620-8cd4-b33d479c5090> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "20"^^xsd:nonNegativeInteger .
    _:b1 oa:end "31"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:58:58.548[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 192 ms
[2m2023-10-27 13:59:04.226[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49","outGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49"}
[2m2023-10-27 13:59:04.226[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49","outGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49"}
[2m2023-10-27 13:59:04.226[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49"},"inGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49","outGraph":"urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49"}
[2m2023-10-27 13:59:04.226[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@5398aa6b
[2m2023-10-27 13:59:04.241[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@60b3751e
[2m2023-10-27 13:59:04.242[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 13:59:04.242[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:59:04.243[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:59:04.254[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f
[2m2023-10-27 13:59:04.254[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f found in urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49 at http://localhost:8080/sparql
[2m2023-10-27 13:59:04.257[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation in which language does the united stated have the shortest short name? 
[2m2023-10-27 13:59:04.258[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question in which language does the united stated have the shortest short name?
[2m2023-10-27 13:59:04.258[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=in+which+language+does+the+united+stated+have+the+shortest+short+name%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:59:04.258[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=in+which+language+does+the+united+stated+have+the+shortest+short+name%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:59:04.259[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:59:04.259[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-687015730
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@168a7f49
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:59:04.386[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=in+which+language+does+the+united+stated+have+the+shortest+short+name%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":9,"end":17,"spot":"language","confidence":0.671,"id":6880370,"title":"Philosophy of language","uri":"http://en.wikipedia.org/wiki/Philosophy_of_language","abstract":"In analytic philosophy, philosophy of language investigates the nature of language and the relations between language, language users, and the world. Investigations may include inquiry into the nature of meaning, intentionality, reference, the constitution of sentences, concepts, learning, and thought.","label":"Philosophy of language","categories":["Analytic philosophy","Meaning (philosophy of language)","Philosophy of language","Semantics","Semiotics"],"types":[]},{"start":59,"end":69,"spot":"short name","confidence":0.6764,"id":53430,"title":"Nickname","uri":"http://en.wikipedia.org/wiki/Nickname","abstract":"A nickname or short name is a substitute for the proper name of a person, place or thing. It is commonly used to express affection, amusement, a character trait or defamation of character. It is distinct from a pseudonym, stage name or title, although the concepts can overlap. Also known as sobriquet, it is typically informal.","label":"Nickname","categories":["Nicknames"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:59:04.367"}
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":9,"end":17,"spot":"language","confidence":0.671,"id":6880370,"title":"Philosophy of language","uri":"http://en.wikipedia.org/wiki/Philosophy_of_language","abstract":"In analytic philosophy, philosophy of language investigates the nature of language and the relations between language, language users, and the world. Investigations may include inquiry into the nature of meaning, intentionality, reference, the constitution of sentences, concepts, learning, and thought.","label":"Philosophy of language","categories":["Analytic philosophy","Meaning (philosophy of language)","Philosophy of language","Semantics","Semiotics"],"types":[]}
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 9
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 17
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":59,"end":69,"spot":"short name","confidence":0.6764,"id":53430,"title":"Nickname","uri":"http://en.wikipedia.org/wiki/Nickname","abstract":"A nickname or short name is a substitute for the proper name of a person, place or thing. It is commonly used to express affection, amusement, a character trait or defamation of character. It is distinct from a pseudonym, stage name or title, although the concepts can overlap. Also known as sobriquet, it is typically informal.","label":"Nickname","categories":["Nicknames"],"types":[]}
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 59
[2m2023-10-27 13:59:04.386[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 69
[2m2023-10-27 13:59:04.391[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f
[2m2023-10-27 13:59:04.393[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@575401
[2m2023-10-27 13:59:04.393[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:59:04.396[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "17"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:04.397[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "17"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:04.397[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "17"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:04.404[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@7bb7da90
[2m2023-10-27 13:59:04.404[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:59:04.406[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "59"^^xsd:nonNegativeInteger .
    _:b1 oa:end "69"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:04.406[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "59"^^xsd:nonNegativeInteger .
    _:b1 oa:end "69"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:04.406[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f574c457-590d-48da-a1be-5cd3f0c72a49> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_b204a306-bebe-45d5-966a-1eb915dac91f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "59"^^xsd:nonNegativeInteger .
    _:b1 oa:end "69"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:04.414[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 188 ms
[2m2023-10-27 13:59:48.153[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0","outGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0"}
[2m2023-10-27 13:59:48.153[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0","outGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0"}
[2m2023-10-27 13:59:48.154[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0"},"inGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0","outGraph":"urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0"}
[2m2023-10-27 13:59:48.154[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@272f9885
[2m2023-10-27 13:59:48.161[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@40b27943
[2m2023-10-27 13:59:48.162[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 13:59:48.163[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:59:48.164[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 13:59:48.170[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3
[2m2023-10-27 13:59:48.170[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3 found in urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0 at http://localhost:8080/sparql
[2m2023-10-27 13:59:48.172[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation What are the professions of John Lennon’s sons? 
[2m2023-10-27 13:59:48.172[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question What are the professions of John Lennon’s sons?
[2m2023-10-27 13:59:48.172[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+are+the+professions+of+John+Lennon%E2%80%99s+sons%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:59:48.172[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+are+the+professions+of+John+Lennon%E2%80%99s+sons%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:59:48.172[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 13:59:48.173[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-949359546
[2m2023-10-27 13:59:48.404[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@326e961
[2m2023-10-27 13:59:48.404[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 13:59:48.404[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 13:59:48.405[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+are+the+professions+of+John+Lennon%E2%80%99s+sons%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 13:59:48.405[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":28,"end":39,"spot":"John Lennon","confidence":0.9377,"id":15852,"title":"John Lennon","uri":"http://en.wikipedia.org/wiki/John_Lennon","abstract":"John Winston Ono Lennon (born John Winston Lennon; 9 October 19408 December 1980) was an English singer, songwriter, musician and peace activist who gained worldwide fame as the founder, co-songwriter, co-lead vocalist and rhythm guitarist of the Beatles. Lennon's work included music, writing, drawings, and film. His songwriting partnership with Paul McCartney remains the most successful in history.","label":"John Lennon","categories":["1940 births","1980 deaths","1980 murders in the United States","20th-century British guitarists","20th-century English male actors","20th-century English male singers","20th-century English singers","Alumni of Liverpool College of Art","Apple Records artists","Atco Records artists","Beat musicians","Best Original Music Score Academy Award winners","Brit Award winners","British harmonica players","British male pianists","COINTELPRO targets","Capitol Records artists","Critics of religions","Deaths by firearm in Manhattan","English anti-war activists","English emigrants to the United States","English expatriates in the United States","English experimental musicians","English male film actors","English male guitarists","English male singer-songwriters","English murder victims","English pacifists","English people convicted of drug offences","English people murdered abroad","English people of Irish descent","English pop guitarists","English pop pianists","English pop singers","English rock guitarists","English rock pianists","English rock singers","English social commentators","English socialists","Geffen Records artists","Grammy Award winners","Grammy Lifetime Achievement Award winners","Ivor Novello Award winners","John Lennon","Juno Award for International Album of the Year winners","Lennon family","Male actors from Liverpool","Male murder victims","Members of the Order of the British Empire","Musicians from Liverpool","Nonviolence advocates","Parlophone artists","People educated at Quarry Bank High School","People from Woolton","People murdered in New York City","Plastic Ono Band members","Political music artists","Polydor Records artists","Rhythm guitarists","The Beatles members","The Dirty Mac members","The Quarrymen members","Transcendental Meditation exponents","Writers who illustrated their own writing"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]},{"start":33,"end":41,"spot":"Lennon’s","confidence":0.7491,"id":15852,"title":"John Lennon","uri":"http://en.wikipedia.org/wiki/John_Lennon","abstract":"John Winston Ono Lennon (born John Winston Lennon; 9 October 19408 December 1980) was an English singer, songwriter, musician and peace activist who gained worldwide fame as the founder, co-songwriter, co-lead vocalist and rhythm guitarist of the Beatles. Lennon's work included music, writing, drawings, and film. His songwriting partnership with Paul McCartney remains the most successful in history.","label":"John Lennon","categories":["1940 births","1980 deaths","1980 murders in the United States","20th-century British guitarists","20th-century English male actors","20th-century English male singers","20th-century English singers","Alumni of Liverpool College of Art","Apple Records artists","Atco Records artists","Beat musicians","Best Original Music Score Academy Award winners","Brit Award winners","British harmonica players","British male pianists","COINTELPRO targets","Capitol Records artists","Critics of religions","Deaths by firearm in Manhattan","English anti-war activists","English emigrants to the United States","English expatriates in the United States","English experimental musicians","English male film actors","English male guitarists","English male singer-songwriters","English murder victims","English pacifists","English people convicted of drug offences","English people murdered abroad","English people of Irish descent","English pop guitarists","English pop pianists","English pop singers","English rock guitarists","English rock pianists","English rock singers","English social commentators","English socialists","Geffen Records artists","Grammy Award winners","Grammy Lifetime Achievement Award winners","Ivor Novello Award winners","John Lennon","Juno Award for International Album of the Year winners","Lennon family","Male actors from Liverpool","Male murder victims","Members of the Order of the British Empire","Musicians from Liverpool","Nonviolence advocates","Parlophone artists","People educated at Quarry Bank High School","People from Woolton","People murdered in New York City","Plastic Ono Band members","Political music artists","Polydor Records artists","Rhythm guitarists","The Beatles members","The Dirty Mac members","The Quarrymen members","Transcendental Meditation exponents","Writers who illustrated their own writing"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T11:59:48.342"}
[2m2023-10-27 13:59:48.406[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":28,"end":39,"spot":"John Lennon","confidence":0.9377,"id":15852,"title":"John Lennon","uri":"http://en.wikipedia.org/wiki/John_Lennon","abstract":"John Winston Ono Lennon (born John Winston Lennon; 9 October 19408 December 1980) was an English singer, songwriter, musician and peace activist who gained worldwide fame as the founder, co-songwriter, co-lead vocalist and rhythm guitarist of the Beatles. Lennon's work included music, writing, drawings, and film. His songwriting partnership with Paul McCartney remains the most successful in history.","label":"John Lennon","categories":["1940 births","1980 deaths","1980 murders in the United States","20th-century British guitarists","20th-century English male actors","20th-century English male singers","20th-century English singers","Alumni of Liverpool College of Art","Apple Records artists","Atco Records artists","Beat musicians","Best Original Music Score Academy Award winners","Brit Award winners","British harmonica players","British male pianists","COINTELPRO targets","Capitol Records artists","Critics of religions","Deaths by firearm in Manhattan","English anti-war activists","English emigrants to the United States","English expatriates in the United States","English experimental musicians","English male film actors","English male guitarists","English male singer-songwriters","English murder victims","English pacifists","English people convicted of drug offences","English people murdered abroad","English people of Irish descent","English pop guitarists","English pop pianists","English pop singers","English rock guitarists","English rock pianists","English rock singers","English social commentators","English socialists","Geffen Records artists","Grammy Award winners","Grammy Lifetime Achievement Award winners","Ivor Novello Award winners","John Lennon","Juno Award for International Album of the Year winners","Lennon family","Male actors from Liverpool","Male murder victims","Members of the Order of the British Empire","Musicians from Liverpool","Nonviolence advocates","Parlophone artists","People educated at Quarry Bank High School","People from Woolton","People murdered in New York City","Plastic Ono Band members","Political music artists","Polydor Records artists","Rhythm guitarists","The Beatles members","The Dirty Mac members","The Quarrymen members","Transcendental Meditation exponents","Writers who illustrated their own writing"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}
[2m2023-10-27 13:59:48.406[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 28
[2m2023-10-27 13:59:48.406[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 39
[2m2023-10-27 13:59:48.406[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":33,"end":41,"spot":"Lennon’s","confidence":0.7491,"id":15852,"title":"John Lennon","uri":"http://en.wikipedia.org/wiki/John_Lennon","abstract":"John Winston Ono Lennon (born John Winston Lennon; 9 October 19408 December 1980) was an English singer, songwriter, musician and peace activist who gained worldwide fame as the founder, co-songwriter, co-lead vocalist and rhythm guitarist of the Beatles. Lennon's work included music, writing, drawings, and film. His songwriting partnership with Paul McCartney remains the most successful in history.","label":"John Lennon","categories":["1940 births","1980 deaths","1980 murders in the United States","20th-century British guitarists","20th-century English male actors","20th-century English male singers","20th-century English singers","Alumni of Liverpool College of Art","Apple Records artists","Atco Records artists","Beat musicians","Best Original Music Score Academy Award winners","Brit Award winners","British harmonica players","British male pianists","COINTELPRO targets","Capitol Records artists","Critics of religions","Deaths by firearm in Manhattan","English anti-war activists","English emigrants to the United States","English expatriates in the United States","English experimental musicians","English male film actors","English male guitarists","English male singer-songwriters","English murder victims","English pacifists","English people convicted of drug offences","English people murdered abroad","English people of Irish descent","English pop guitarists","English pop pianists","English pop singers","English rock guitarists","English rock pianists","English rock singers","English social commentators","English socialists","Geffen Records artists","Grammy Award winners","Grammy Lifetime Achievement Award winners","Ivor Novello Award winners","John Lennon","Juno Award for International Album of the Year winners","Lennon family","Male actors from Liverpool","Male murder victims","Members of the Order of the British Empire","Musicians from Liverpool","Nonviolence advocates","Parlophone artists","People educated at Quarry Bank High School","People from Woolton","People murdered in New York City","Plastic Ono Band members","Political music artists","Polydor Records artists","Rhythm guitarists","The Beatles members","The Dirty Mac members","The Quarrymen members","Transcendental Meditation exponents","Writers who illustrated their own writing"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}
[2m2023-10-27 13:59:48.406[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 33
[2m2023-10-27 13:59:48.406[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 41
[2m2023-10-27 13:59:48.411[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3
[2m2023-10-27 13:59:48.411[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@201cc615
[2m2023-10-27 13:59:48.412[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:59:48.414[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "28"^^xsd:nonNegativeInteger .
    _:b1 oa:end "39"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:48.415[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "28"^^xsd:nonNegativeInteger .
    _:b1 oa:end "39"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:48.415[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "28"^^xsd:nonNegativeInteger .
    _:b1 oa:end "39"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:48.421[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@68ab413b
[2m2023-10-27 13:59:48.421[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 13:59:48.423[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "33"^^xsd:nonNegativeInteger .
    _:b1 oa:end "41"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:48.424[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "33"^^xsd:nonNegativeInteger .
    _:b1 oa:end "41"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:48.424[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:56f2b5fc-2ba6-4c48-bc43-be2f43e832d0> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_5160f85a-9431-4209-9edf-ce4ab1b4cab3> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "33"^^xsd:nonNegativeInteger .
    _:b1 oa:end "41"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 13:59:48.432[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 279 ms
[2m2023-10-27 14:00:02.762[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b","outGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b"}
[2m2023-10-27 14:00:02.762[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b","outGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b"}
[2m2023-10-27 14:00:02.762[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b"},"inGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b","outGraph":"urn:graph:f48704a2-e326-4237-b784-257818c7ed9b"}
[2m2023-10-27 14:00:02.762[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@fbe172c
[2m2023-10-27 14:00:02.772[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@20387212
[2m2023-10-27 14:00:02.773[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:00:02.775[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:00:02.776[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:00:02.785[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c
[2m2023-10-27 14:00:02.785[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c found in urn:graph:f48704a2-e326-4237-b784-257818c7ed9b at http://localhost:8080/sparql
[2m2023-10-27 14:00:02.788[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation What is the second game developed by Piranha Bytes? 
[2m2023-10-27 14:00:02.788[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question What is the second game developed by Piranha Bytes?
[2m2023-10-27 14:00:02.788[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+the+second+game+developed+by+Piranha+Bytes%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:00:02.788[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+the+second+game+developed+by+Piranha+Bytes%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:00:02.788[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:00:02.788[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=183468665
[2m2023-10-27 14:00:02.920[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@7cbceb91
[2m2023-10-27 14:00:02.920[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:00:02.920[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:00:02.921[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+the+second+game+developed+by+Piranha+Bytes%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:00:02.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":12,"end":23,"spot":"second game","confidence":0.7798,"id":52753,"title":"Final Fantasy II","uri":"http://en.wikipedia.org/wiki/Final_Fantasy_II","abstract":"is a fantasy role-playing video game developed and published by Square in 1988 for the Family Computer as the second installment of the Final Fantasy series. The game has received numerous enhanced remakes for the WonderSwan Color, the PlayStation, the Game Boy Advance, the PlayStation Portable, iOS, Android and Windows. As neither this game nor Final Fantasy III were initially released outside Japan, Final Fantasy IV was originally released in North America as Final Fantasy II, so as not to confuse players. Following enhanced versions for iOS and Android in 2010 and 2012 respectively, the game was re-released again as part of the 2021 Final Fantasy Pixel Remaster series.","label":"Final Fantasy II","categories":["1988 video games","Android (operating system) games","Fiction about deicide","Fiction about rebellions","Final Fantasy video games","Game Boy Advance games","IOS games","Japanese role-playing video games","Nintendo Entertainment System games","PlayStation (console) games","PlayStation Network games","PlayStation Portable games","Single-player video games","Video games about the afterlife","Video games developed in Japan","Video games featuring female protagonists","Video games scored by Nobuo Uematsu","Video games set in hell","Virtual Console games","Virtual Console games for Wii U","Windows games","WonderSwan Color games"],"types":["http://dbpedia.org/ontology/VideoGame","http://dbpedia.org/ontology/Work","http://dbpedia.org/ontology/Software"]},{"start":37,"end":50,"spot":"Piranha Bytes","confidence":0.9521,"id":780137,"title":"Piranha Bytes","uri":"http://en.wikipedia.org/wiki/Piranha_Bytes","abstract":"Piranha Bytes GmbH is a German video game developer based in Essen. Founded in 1997, it is best known for their Gothic and Risen series of role-playing video games. The studio is a subsidiary of THQ Nordic and, as of August 2021, employs 33 people.","label":"Piranha Bytes","categories":["2019 mergers and acquisitions","Companies based in Essen","German companies established in 1997","THQ Nordic divisions and subsidiaries","Video game companies established in 1997","Video game companies of Germany","Video game development companies"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:00:02.900"}
[2m2023-10-27 14:00:02.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":12,"end":23,"spot":"second game","confidence":0.7798,"id":52753,"title":"Final Fantasy II","uri":"http://en.wikipedia.org/wiki/Final_Fantasy_II","abstract":"is a fantasy role-playing video game developed and published by Square in 1988 for the Family Computer as the second installment of the Final Fantasy series. The game has received numerous enhanced remakes for the WonderSwan Color, the PlayStation, the Game Boy Advance, the PlayStation Portable, iOS, Android and Windows. As neither this game nor Final Fantasy III were initially released outside Japan, Final Fantasy IV was originally released in North America as Final Fantasy II, so as not to confuse players. Following enhanced versions for iOS and Android in 2010 and 2012 respectively, the game was re-released again as part of the 2021 Final Fantasy Pixel Remaster series.","label":"Final Fantasy II","categories":["1988 video games","Android (operating system) games","Fiction about deicide","Fiction about rebellions","Final Fantasy video games","Game Boy Advance games","IOS games","Japanese role-playing video games","Nintendo Entertainment System games","PlayStation (console) games","PlayStation Network games","PlayStation Portable games","Single-player video games","Video games about the afterlife","Video games developed in Japan","Video games featuring female protagonists","Video games scored by Nobuo Uematsu","Video games set in hell","Virtual Console games","Virtual Console games for Wii U","Windows games","WonderSwan Color games"],"types":["http://dbpedia.org/ontology/VideoGame","http://dbpedia.org/ontology/Work","http://dbpedia.org/ontology/Software"]}
[2m2023-10-27 14:00:02.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 12
[2m2023-10-27 14:00:02.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 23
[2m2023-10-27 14:00:02.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":37,"end":50,"spot":"Piranha Bytes","confidence":0.9521,"id":780137,"title":"Piranha Bytes","uri":"http://en.wikipedia.org/wiki/Piranha_Bytes","abstract":"Piranha Bytes GmbH is a German video game developer based in Essen. Founded in 1997, it is best known for their Gothic and Risen series of role-playing video games. The studio is a subsidiary of THQ Nordic and, as of August 2021, employs 33 people.","label":"Piranha Bytes","categories":["2019 mergers and acquisitions","Companies based in Essen","German companies established in 1997","THQ Nordic divisions and subsidiaries","Video game companies established in 1997","Video game companies of Germany","Video game development companies"],"types":[]}
[2m2023-10-27 14:00:02.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 37
[2m2023-10-27 14:00:02.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 50
[2m2023-10-27 14:00:02.927[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c
[2m2023-10-27 14:00:02.927[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@3c4945d
[2m2023-10-27 14:00:02.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:00:02.932[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "23"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:02.932[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "23"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:02.933[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "23"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:02.941[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@608fded5
[2m2023-10-27 14:00:02.942[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:00:02.943[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "37"^^xsd:nonNegativeInteger .
    _:b1 oa:end "50"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:02.944[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "37"^^xsd:nonNegativeInteger .
    _:b1 oa:end "50"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:02.944[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:f48704a2-e326-4237-b784-257818c7ed9b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_aa88f5eb-5d1f-4212-a918-d9f9ddd1b26c> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "37"^^xsd:nonNegativeInteger .
    _:b1 oa:end "50"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:02.951[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 189 ms
[2m2023-10-27 14:00:40.722[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394","outGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394"}
[2m2023-10-27 14:00:40.722[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394","outGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394"}
[2m2023-10-27 14:00:40.722[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394"},"inGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394","outGraph":"urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394"}
[2m2023-10-27 14:00:40.722[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@5c7e7ee4
[2m2023-10-27 14:00:40.731[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@5841f1b3
[2m2023-10-27 14:00:40.732[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:00:40.733[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:00:40.733[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:00:40.741[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838
[2m2023-10-27 14:00:40.741[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838 found in urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394 at http://localhost:8080/sparql
[2m2023-10-27 14:00:40.742[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation How many movies were directed by Akira Kurosawa ? 
[2m2023-10-27 14:00:40.742[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question How many movies were directed by Akira Kurosawa ?
[2m2023-10-27 14:00:40.742[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+movies+were+directed+by+Akira+Kurosawa+%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:00:40.742[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+movies+were+directed+by+Akira+Kurosawa+%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:00:40.743[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:00:40.743[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-202689186
[2m2023-10-27 14:00:40.910[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@517bb91d
[2m2023-10-27 14:00:40.911[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:00:40.911[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:00:40.911[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+movies+were+directed+by+Akira+Kurosawa+%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:00:40.911[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":9,"end":15,"spot":"movies","confidence":0.7928,"id":10790,"title":"Cinema of Japan","uri":"http://en.wikipedia.org/wiki/Cinema_of_Japan","abstract":"The, also known domestically as, has a history that spans more than 100 years. Japan has one of the oldest and largest film industries in the world; as of 2021, it was the fourth largest by number of feature films produced. In 2011, Japan produced 411 feature films that earned 54.9% of a box office total of US$2.338 billion. Films have been produced in Japan since 1897, when the first foreign cameramen arrived.","label":"Japanese film","categories":["Cinema of Japan"],"types":[]},{"start":33,"end":47,"spot":"Akira Kurosawa","confidence":0.9576,"id":872,"title":"Akira Kurosawa","uri":"http://en.wikipedia.org/wiki/Akira_Kurosawa","abstract":"was a Japanese filmmaker and painter who directed 30 films in a career spanning over five decades. He is widely regarded as one of the greatest and most influential filmmakers in the history of cinema. Kurosawa displayed a bold, dynamic style, strongly influenced by Western cinema yet distinct from it; he was involved with all aspects of film production.","label":"Akira Kurosawa","categories":["1910 births","1998 deaths","20th-century Japanese writers","20th-century male writers","Academy Honorary Award recipients","Akira Kurosawa","Akira Kurosawa Award winners","Best Director BAFTA Award winners","César Award winners","David di Donatello winners","Directors Guild of America Award winners","Directors of Best Foreign Language Film Academy Award winners","Directors of Golden Lion winners","Directors of Palme d'Or winners","Fellows of the American Academy of Arts and Sciences","Filmmakers who won the Best Foreign Language Film BAFTA Award","Japanese film directors","Japanese film editors","Japanese film producers","Japanese male writers","Japanese screenwriters","Kyoto laureates in Arts and Philosophy","Male screenwriters","People's Honour Award winners","People from Shinagawa","People of the Empire of Japan","Persons of Cultural Merit","Propaganda film directors","Ramon Magsaysay Award winners","Recipients of the Legion of Honour","Recipients of the Order of Culture","Recipients of the Order of Friendship of Peoples","Recipients of the Praemium Imperiale","Samurai film directors","Silver Bear for Best Director recipients","Writers from Tokyo","Yakuza film directors"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}],"lang":"en","langConfidence":0.5,"timestamp":"2023-10-27T12:00:40.890"}
[2m2023-10-27 14:00:40.912[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":9,"end":15,"spot":"movies","confidence":0.7928,"id":10790,"title":"Cinema of Japan","uri":"http://en.wikipedia.org/wiki/Cinema_of_Japan","abstract":"The, also known domestically as, has a history that spans more than 100 years. Japan has one of the oldest and largest film industries in the world; as of 2021, it was the fourth largest by number of feature films produced. In 2011, Japan produced 411 feature films that earned 54.9% of a box office total of US$2.338 billion. Films have been produced in Japan since 1897, when the first foreign cameramen arrived.","label":"Japanese film","categories":["Cinema of Japan"],"types":[]}
[2m2023-10-27 14:00:40.912[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 9
[2m2023-10-27 14:00:40.912[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 15
[2m2023-10-27 14:00:40.912[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":33,"end":47,"spot":"Akira Kurosawa","confidence":0.9576,"id":872,"title":"Akira Kurosawa","uri":"http://en.wikipedia.org/wiki/Akira_Kurosawa","abstract":"was a Japanese filmmaker and painter who directed 30 films in a career spanning over five decades. He is widely regarded as one of the greatest and most influential filmmakers in the history of cinema. Kurosawa displayed a bold, dynamic style, strongly influenced by Western cinema yet distinct from it; he was involved with all aspects of film production.","label":"Akira Kurosawa","categories":["1910 births","1998 deaths","20th-century Japanese writers","20th-century male writers","Academy Honorary Award recipients","Akira Kurosawa","Akira Kurosawa Award winners","Best Director BAFTA Award winners","César Award winners","David di Donatello winners","Directors Guild of America Award winners","Directors of Best Foreign Language Film Academy Award winners","Directors of Golden Lion winners","Directors of Palme d'Or winners","Fellows of the American Academy of Arts and Sciences","Filmmakers who won the Best Foreign Language Film BAFTA Award","Japanese film directors","Japanese film editors","Japanese film producers","Japanese male writers","Japanese screenwriters","Kyoto laureates in Arts and Philosophy","Male screenwriters","People's Honour Award winners","People from Shinagawa","People of the Empire of Japan","Persons of Cultural Merit","Propaganda film directors","Ramon Magsaysay Award winners","Recipients of the Legion of Honour","Recipients of the Order of Culture","Recipients of the Order of Friendship of Peoples","Recipients of the Praemium Imperiale","Samurai film directors","Silver Bear for Best Director recipients","Writers from Tokyo","Yakuza film directors"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}
[2m2023-10-27 14:00:40.912[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 33
[2m2023-10-27 14:00:40.912[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 47
[2m2023-10-27 14:00:40.918[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838
[2m2023-10-27 14:00:40.919[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@5cafe439
[2m2023-10-27 14:00:40.919[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:00:40.921[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:40.921[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:40.921[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:40.930[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6533d766
[2m2023-10-27 14:00:40.931[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:00:40.932[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "33"^^xsd:nonNegativeInteger .
    _:b1 oa:end "47"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:40.933[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "33"^^xsd:nonNegativeInteger .
    _:b1 oa:end "47"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:40.933[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ac13c8ee-18c0-4a71-b2b5-13d66a8e3394> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7054a174-a4b3-42e7-9ca1-c4c14d1b0838> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "33"^^xsd:nonNegativeInteger .
    _:b1 oa:end "47"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:00:40.940[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 218 ms
[2m2023-10-27 14:01:40.507[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df","outGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df"}
[2m2023-10-27 14:01:40.508[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df","outGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df"}
[2m2023-10-27 14:01:40.508[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df"},"inGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df","outGraph":"urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df"}
[2m2023-10-27 14:01:40.508[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@66ba526c
[2m2023-10-27 14:01:40.541[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@687db0cb
[2m2023-10-27 14:01:40.541[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:01:40.542[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:01:40.542[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:01:40.551[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24
[2m2023-10-27 14:01:40.551[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24 found in urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df at http://localhost:8080/sparql
[2m2023-10-27 14:01:40.553[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation What is the boiling point of water? 
[2m2023-10-27 14:01:40.553[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question What is the boiling point of water?
[2m2023-10-27 14:01:40.553[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+the+boiling+point+of+water%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:01:40.553[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+the+boiling+point+of+water%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:01:40.553[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:01:40.553[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-255632866
[2m2023-10-27 14:01:40.731[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@3ce0f176
[2m2023-10-27 14:01:40.732[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:01:40.732[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:01:40.732[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=What+is+the+boiling+point+of+water%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:01:40.732[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":12,"end":25,"spot":"boiling point","confidence":0.8524,"id":4115,"title":"Boiling point","uri":"http://en.wikipedia.org/wiki/Boiling_point","abstract":"The boiling point of a substance is the temperature at which the vapor pressure of a liquid equals the pressure surrounding the liquid and the liquid changes into a vapor.","label":"Boiling point","categories":["Gases","Temperature","Threshold temperatures"],"types":[]},{"start":29,"end":34,"spot":"water","confidence":0.7771,"id":33306,"title":"Water","uri":"http://en.wikipedia.org/wiki/Water","abstract":"Water is an inorganic compound with the chemical formula. It is a transparent, tasteless, odorless, and nearly colorless chemical substance, and it is the main constituent of Earth's hydrosphere and the fluids of all known living organisms (in which it acts as a solvent). It is vital for all known forms of life, despite not providing food energy, or organic micronutrients. Its chemical formula, indicates that each of its molecules contains one oxygen and two hydrogen atoms, connected by covalent bonds. The hydrogen atoms are attached to the oxygen atom at an angle of 104.45°. \"Water\" is also the name of the liquid state of at standard temperature and pressure.","label":"Water","categories":["Articles containing video clips","Hydrogen compounds","Inorganic solvents","Liquids","Materials that expand upon freezing","Nuclear reactor coolants","Oxides","Oxygen compounds","Water"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:01:40.713"}
[2m2023-10-27 14:01:40.732[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":12,"end":25,"spot":"boiling point","confidence":0.8524,"id":4115,"title":"Boiling point","uri":"http://en.wikipedia.org/wiki/Boiling_point","abstract":"The boiling point of a substance is the temperature at which the vapor pressure of a liquid equals the pressure surrounding the liquid and the liquid changes into a vapor.","label":"Boiling point","categories":["Gases","Temperature","Threshold temperatures"],"types":[]}
[2m2023-10-27 14:01:40.732[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 12
[2m2023-10-27 14:01:40.732[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 25
[2m2023-10-27 14:01:40.733[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":29,"end":34,"spot":"water","confidence":0.7771,"id":33306,"title":"Water","uri":"http://en.wikipedia.org/wiki/Water","abstract":"Water is an inorganic compound with the chemical formula. It is a transparent, tasteless, odorless, and nearly colorless chemical substance, and it is the main constituent of Earth's hydrosphere and the fluids of all known living organisms (in which it acts as a solvent). It is vital for all known forms of life, despite not providing food energy, or organic micronutrients. Its chemical formula, indicates that each of its molecules contains one oxygen and two hydrogen atoms, connected by covalent bonds. The hydrogen atoms are attached to the oxygen atom at an angle of 104.45°. \"Water\" is also the name of the liquid state of at standard temperature and pressure.","label":"Water","categories":["Articles containing video clips","Hydrogen compounds","Inorganic solvents","Liquids","Materials that expand upon freezing","Nuclear reactor coolants","Oxides","Oxygen compounds","Water"],"types":[]}
[2m2023-10-27 14:01:40.733[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 29
[2m2023-10-27 14:01:40.733[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 34
[2m2023-10-27 14:01:40.738[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24
[2m2023-10-27 14:01:40.738[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@7ed018a9
[2m2023-10-27 14:01:40.738[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:01:40.741[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:01:40.741[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:01:40.741[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:01:40.749[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@4d21f871
[2m2023-10-27 14:01:40.749[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:01:40.751[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "29"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:01:40.752[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "29"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:01:40.752[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:4e0cf09b-f86a-42a0-b95f-d19cbb6a40df> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_efffff4d-c19a-465a-86e3-ddf1d2898f24> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "29"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:01:40.758[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 250 ms
[2m2023-10-27 14:03:08.114[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f","outGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f"}
[2m2023-10-27 14:03:08.115[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f","outGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f"}
[2m2023-10-27 14:03:08.115[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f"},"inGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f","outGraph":"urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f"}
[2m2023-10-27 14:03:08.115[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@cea11f7
[2m2023-10-27 14:03:08.123[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@55f226
[2m2023-10-27 14:03:08.123[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:03:08.124[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:03:08.124[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:03:08.129[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf
[2m2023-10-27 14:03:08.130[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf found in urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f at http://localhost:8080/sparql
[2m2023-10-27 14:03:08.132[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Which animal participated in a military operation with the Australian Defence Force? 
[2m2023-10-27 14:03:08.133[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Which animal participated in a military operation with the Australian Defence Force?
[2m2023-10-27 14:03:08.133[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+animal+participated+in+a+military+operation+with+the+Australian+Defence+Force%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:03:08.133[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Which+animal+participated+in+a+military+operation+with+the+Australian+Defence+Force%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:03:08.133[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:03:08.133[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1809127821
[2m2023-10-27 14:03:08.287[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@580b2bd7
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:03:08.288[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+animal+participated+in+a+military+operation+with+the+Australian+Defence+Force%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":31,"end":49,"spot":"military operation","confidence":0.6966,"id":666301,"title":"Military operation","uri":"http://en.wikipedia.org/wiki/Military_operation","abstract":"A military operation is the coordinated military actions of a state, or a non-state actor, in response to a developing situation. These actions are designed as a military plan to resolve the situation in the state or actor's favor. Operations may be of a combat or non-combat nature and may be referred to by a code name for the purpose of national security. Military operations are often known for their more generally accepted common usage names than their actual operational objectives.","label":"Military operation","categories":["Military operations"],"types":[]},{"start":59,"end":83,"spot":"Australian Defence Force","confidence":0.8552,"id":67538,"title":"Australian Defence Force","uri":"http://en.wikipedia.org/wiki/Australian_Defence_Force","abstract":"The Australian Defence Force (ADF) is the military organisation responsible for the defence of the Commonwealth of Australia and its national interests. It has three branches: the Royal Australian Navy (RAN), Australian Army and the Royal Australian Air Force (RAAF). The ADF has a strength of just over 90,000 personnel and is supported by the Department of Defence and several other civilian agencies.","label":"Australian Defence Force","categories":["1901 establishments in Australia","Australian Defence Force","Leadership of the Australian Defence Force","Military of Australia","Military units and formations established in 1901"],"types":["http://dbpedia.org/ontology/MilitaryUnit","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/Agent"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:03:08.266"}
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":31,"end":49,"spot":"military operation","confidence":0.6966,"id":666301,"title":"Military operation","uri":"http://en.wikipedia.org/wiki/Military_operation","abstract":"A military operation is the coordinated military actions of a state, or a non-state actor, in response to a developing situation. These actions are designed as a military plan to resolve the situation in the state or actor's favor. Operations may be of a combat or non-combat nature and may be referred to by a code name for the purpose of national security. Military operations are often known for their more generally accepted common usage names than their actual operational objectives.","label":"Military operation","categories":["Military operations"],"types":[]}
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 31
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 49
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":59,"end":83,"spot":"Australian Defence Force","confidence":0.8552,"id":67538,"title":"Australian Defence Force","uri":"http://en.wikipedia.org/wiki/Australian_Defence_Force","abstract":"The Australian Defence Force (ADF) is the military organisation responsible for the defence of the Commonwealth of Australia and its national interests. It has three branches: the Royal Australian Navy (RAN), Australian Army and the Royal Australian Air Force (RAAF). The ADF has a strength of just over 90,000 personnel and is supported by the Department of Defence and several other civilian agencies.","label":"Australian Defence Force","categories":["1901 establishments in Australia","Australian Defence Force","Leadership of the Australian Defence Force","Military of Australia","Military units and formations established in 1901"],"types":["http://dbpedia.org/ontology/MilitaryUnit","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/Agent"]}
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 59
[2m2023-10-27 14:03:08.288[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 83
[2m2023-10-27 14:03:08.294[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf
[2m2023-10-27 14:03:08.296[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@432ec88
[2m2023-10-27 14:03:08.296[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:03:08.300[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "31"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:08.300[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "31"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:08.301[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "31"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:08.309[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@2b59eaea
[2m2023-10-27 14:03:08.309[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:03:08.311[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "59"^^xsd:nonNegativeInteger .
    _:b1 oa:end "83"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:08.311[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "59"^^xsd:nonNegativeInteger .
    _:b1 oa:end "83"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:08.311[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:5f991ee7-0527-4e14-8d3d-52b76e279a2f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_c47497bb-21fc-473a-b87c-8d2d39774dbf> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "59"^^xsd:nonNegativeInteger .
    _:b1 oa:end "83"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:08.321[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 206 ms
[2m2023-10-27 14:03:47.804[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a","outGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a"}
[2m2023-10-27 14:03:47.804[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a","outGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a"}
[2m2023-10-27 14:03:47.804[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a"},"inGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a","outGraph":"urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a"}
[2m2023-10-27 14:03:47.805[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@f84cb44
[2m2023-10-27 14:03:47.812[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@14324c4
[2m2023-10-27 14:03:47.812[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:03:47.813[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:03:47.813[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:03:47.829[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_7a77dff1-97d6-4b2b-b4ad-fcd5c489a715
[2m2023-10-27 14:03:47.829[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_7a77dff1-97d6-4b2b-b4ad-fcd5c489a715 found in urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a at http://localhost:8080/sparql
[2m2023-10-27 14:03:47.831[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation who is the youngested member in g-idle? 
[2m2023-10-27 14:03:47.831[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question who is the youngested member in g-idle?
[2m2023-10-27 14:03:47.831[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=who+is+the+youngested+member+in+g-idle%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:03:47.831[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=who+is+the+youngested+member+in+g-idle%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:03:47.831[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:03:47.832[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1470625770
[2m2023-10-27 14:03:48.003[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@53382b03
[2m2023-10-27 14:03:48.004[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:03:48.004[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:03:48.004[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=who+is+the+youngested+member+in+g-idle%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:03:48.004[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":0,"annotations":[{"start":32,"end":38,"spot":"g-idle","confidence":0.8609,"id":57057212,"title":"(G)I-dle","uri":"http://en.wikipedia.org/wiki/%28G%29I-dle","abstract":"(G)I-dle (stylized in all caps), is a South Korean girl group formed by Cube Entertainment in 2018. The group consists of five members: Miyeon, Minnie, Soyeon, Yuqi and Shuhua. Originally a sextet, Soojin left the group on August 14, 2021. (G)I-dle debuted on May 2, 2018, with the single \"Latata\" from their first extended play (EP) I Am. They debuted in Japan under U-Cube with Latata on July 31, 2019. Since their debut, they have been considered one of the most successful South Korean girl groups outside of the \"big three\" record labels.","label":"(G)I-dle","categories":["(G)I-dle","2018 establishments in South Korea","Cube Entertainment artists","English-language singers from South Korea","Golden Disc Award winners","Japanese-language singers of South Korea","K-pop music groups","Mandarin-language singers of South Korea","Melon Music Award winners","Musical groups established in 2018","Musical groups from Seoul","South Korean dance music groups","South Korean girl groups","World record holders"],"types":["http://dbpedia.org/ontology/Band","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/Group","http://dbpedia.org/ontology/Agent"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:03:47.981"}
[2m2023-10-27 14:03:48.004[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":32,"end":38,"spot":"g-idle","confidence":0.8609,"id":57057212,"title":"(G)I-dle","uri":"http://en.wikipedia.org/wiki/%28G%29I-dle","abstract":"(G)I-dle (stylized in all caps), is a South Korean girl group formed by Cube Entertainment in 2018. The group consists of five members: Miyeon, Minnie, Soyeon, Yuqi and Shuhua. Originally a sextet, Soojin left the group on August 14, 2021. (G)I-dle debuted on May 2, 2018, with the single \"Latata\" from their first extended play (EP) I Am. They debuted in Japan under U-Cube with Latata on July 31, 2019. Since their debut, they have been considered one of the most successful South Korean girl groups outside of the \"big three\" record labels.","label":"(G)I-dle","categories":["(G)I-dle","2018 establishments in South Korea","Cube Entertainment artists","English-language singers from South Korea","Golden Disc Award winners","Japanese-language singers of South Korea","K-pop music groups","Mandarin-language singers of South Korea","Melon Music Award winners","Musical groups established in 2018","Musical groups from Seoul","South Korean dance music groups","South Korean girl groups","World record holders"],"types":["http://dbpedia.org/ontology/Band","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/Group","http://dbpedia.org/ontology/Agent"]}
[2m2023-10-27 14:03:48.004[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 32
[2m2023-10-27 14:03:48.004[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 38
[2m2023-10-27 14:03:48.009[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_7a77dff1-97d6-4b2b-b4ad-fcd5c489a715
[2m2023-10-27 14:03:48.009[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@aed81ec
[2m2023-10-27 14:03:48.009[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:03:48.010[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7a77dff1-97d6-4b2b-b4ad-fcd5c489a715> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "32"^^xsd:nonNegativeInteger .
    _:b1 oa:end "38"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:48.010[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7a77dff1-97d6-4b2b-b4ad-fcd5c489a715> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "32"^^xsd:nonNegativeInteger .
    _:b1 oa:end "38"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:48.011[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:0646f694-ba5c-46a4-beb1-e3f946537f0a> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_7a77dff1-97d6-4b2b-b4ad-fcd5c489a715> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "32"^^xsd:nonNegativeInteger .
    _:b1 oa:end "38"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:03:48.018[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-7][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 214 ms
[2m2023-10-27 14:05:01.246[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b","outGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b"}
[2m2023-10-27 14:05:01.246[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b","outGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b"}
[2m2023-10-27 14:05:01.246[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b"},"inGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b","outGraph":"urn:graph:99098222-4751-4d9d-8198-d552771ba84b"}
[2m2023-10-27 14:05:01.247[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@7d735b8e
[2m2023-10-27 14:05:01.257[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6d6863e2
[2m2023-10-27 14:05:01.257[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:05:01.258[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:99098222-4751-4d9d-8198-d552771ba84b>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:05:01.259[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:99098222-4751-4d9d-8198-d552771ba84b>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:05:01.264[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_a7fed2f9-cb87-4db2-a948-5d7524f7a38b
[2m2023-10-27 14:05:01.265[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_a7fed2f9-cb87-4db2-a948-5d7524f7a38b found in urn:graph:99098222-4751-4d9d-8198-d552771ba84b at http://localhost:8080/sparql
[2m2023-10-27 14:05:01.266[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation How many spouses do head of states have on average? 
[2m2023-10-27 14:05:01.266[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question How many spouses do head of states have on average?
[2m2023-10-27 14:05:01.266[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+spouses+do+head+of+states+have+on+average%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:05:01.266[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+spouses+do+head+of+states+have+on+average%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:05:01.266[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:05:01.267[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=307517747
[2m2023-10-27 14:05:01.442[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@627dca4b
[2m2023-10-27 14:05:01.442[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:05:01.443[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:05:01.443[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+spouses+do+head+of+states+have+on+average%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:05:01.443[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":28,"end":34,"spot":"states","confidence":0.7006,"id":18618239,"title":"U.S. state","uri":"http://en.wikipedia.org/wiki/U.S._state","abstract":"In the United States, a state is a constituent political entity, of which there are 50. Bound together in a political union, each state holds governmental jurisdiction over a separate and defined geographic territory where it shares its sovereignty with the federal government. Due to this shared sovereignty, Americans are citizens both of the federal republic and of the state in which they reside. State citizenship and residency are flexible, and no government approval is required to move between states, except for persons restricted by certain types of court orders (such as paroled convicts and children of divorced spouses who share child custody).","label":"U.S. state","categories":["Administrative divisions in North America","First-level administrative divisions by country","Political divisions of the United States","States of the United States","Types of administrative division"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:05:01.419"}
[2m2023-10-27 14:05:01.443[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":28,"end":34,"spot":"states","confidence":0.7006,"id":18618239,"title":"U.S. state","uri":"http://en.wikipedia.org/wiki/U.S._state","abstract":"In the United States, a state is a constituent political entity, of which there are 50. Bound together in a political union, each state holds governmental jurisdiction over a separate and defined geographic territory where it shares its sovereignty with the federal government. Due to this shared sovereignty, Americans are citizens both of the federal republic and of the state in which they reside. State citizenship and residency are flexible, and no government approval is required to move between states, except for persons restricted by certain types of court orders (such as paroled convicts and children of divorced spouses who share child custody).","label":"U.S. state","categories":["Administrative divisions in North America","First-level administrative divisions by country","Political divisions of the United States","States of the United States","Types of administrative division"],"types":[]}
[2m2023-10-27 14:05:01.443[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 28
[2m2023-10-27 14:05:01.443[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 34
[2m2023-10-27 14:05:01.448[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_a7fed2f9-cb87-4db2-a948-5d7524f7a38b
[2m2023-10-27 14:05:01.449[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@21a9ec92
[2m2023-10-27 14:05:01.449[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:05:01.450[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:99098222-4751-4d9d-8198-d552771ba84b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_a7fed2f9-cb87-4db2-a948-5d7524f7a38b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "28"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:05:01.451[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:99098222-4751-4d9d-8198-d552771ba84b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_a7fed2f9-cb87-4db2-a948-5d7524f7a38b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "28"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:05:01.451[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:99098222-4751-4d9d-8198-d552771ba84b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_a7fed2f9-cb87-4db2-a948-5d7524f7a38b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "28"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:05:01.456[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 210 ms
[2m2023-10-27 14:06:42.839[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f","outGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f"}
[2m2023-10-27 14:06:42.839[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f","outGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f"}
[2m2023-10-27 14:06:42.840[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f"},"inGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f","outGraph":"urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f"}
[2m2023-10-27 14:06:42.840[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@130e3542
[2m2023-10-27 14:06:42.850[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@41150dc0
[2m2023-10-27 14:06:42.850[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:06:42.851[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:06:42.852[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:06:42.857[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_82df9498-9450-487e-a27c-42fda301a4a6
[2m2023-10-27 14:06:42.857[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_82df9498-9450-487e-a27c-42fda301a4a6 found in urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f at http://localhost:8080/sparql
[2m2023-10-27 14:06:42.858[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Who is the creator of the Dinosaurs tv show ? 
[2m2023-10-27 14:06:42.858[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Who is the creator of the Dinosaurs tv show ?
[2m2023-10-27 14:06:42.858[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Who+is+the+creator+of+the+Dinosaurs+tv+show+%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:06:42.858[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Who+is+the+creator+of+the+Dinosaurs+tv+show+%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:06:42.859[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:06:42.859[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1273782426
[2m2023-10-27 14:06:42.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@12cad87e
[2m2023-10-27 14:06:42.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:06:42.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:06:42.983[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Who+is+the+creator+of+the+Dinosaurs+tv+show+%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:06:42.983[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":26,"end":35,"spot":"Dinosaurs","confidence":0.6945,"id":8311,"title":"Dinosaur","uri":"http://en.wikipedia.org/wiki/Dinosaur","abstract":"Dinosaurs are a diverse group of reptiles of the clade Dinosauria. They first appeared during the Triassic period, between 245 and 233.23 million years ago (mya), although the exact origin and timing of the  is a subject of active research. They became the dominant terrestrial vertebrates after the Triassic–Jurassic extinction event 201.3 mya and their dominance continued throughout the Jurassic and Cretaceous periods. The fossil record shows that birds are feathered dinosaurs, having evolved from earlier theropods during the Late Jurassic epoch, and are the only dinosaur lineage known to have survived the Cretaceous–Paleogene extinction event approximately 66 mya. Dinosaurs can therefore be divided into avian dinosaurs—birds—and the extinct non-avian dinosaurs, which are all dinosaurs other than birds.","label":"Dinosaur","categories":["Carnian first appearances","Dinosaurs","Extant Late Triassic first appearances","Fossil taxa described in 1842","Taxa named by Richard Owen"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:06:42.964"}
[2m2023-10-27 14:06:42.983[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":26,"end":35,"spot":"Dinosaurs","confidence":0.6945,"id":8311,"title":"Dinosaur","uri":"http://en.wikipedia.org/wiki/Dinosaur","abstract":"Dinosaurs are a diverse group of reptiles of the clade Dinosauria. They first appeared during the Triassic period, between 245 and 233.23 million years ago (mya), although the exact origin and timing of the  is a subject of active research. They became the dominant terrestrial vertebrates after the Triassic–Jurassic extinction event 201.3 mya and their dominance continued throughout the Jurassic and Cretaceous periods. The fossil record shows that birds are feathered dinosaurs, having evolved from earlier theropods during the Late Jurassic epoch, and are the only dinosaur lineage known to have survived the Cretaceous–Paleogene extinction event approximately 66 mya. Dinosaurs can therefore be divided into avian dinosaurs—birds—and the extinct non-avian dinosaurs, which are all dinosaurs other than birds.","label":"Dinosaur","categories":["Carnian first appearances","Dinosaurs","Extant Late Triassic first appearances","Fossil taxa described in 1842","Taxa named by Richard Owen"],"types":[]}
[2m2023-10-27 14:06:42.983[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 26
[2m2023-10-27 14:06:42.983[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 35
[2m2023-10-27 14:06:42.987[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_82df9498-9450-487e-a27c-42fda301a4a6
[2m2023-10-27 14:06:42.988[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@700c5b40
[2m2023-10-27 14:06:42.988[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:06:42.990[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_82df9498-9450-487e-a27c-42fda301a4a6> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "26"^^xsd:nonNegativeInteger .
    _:b1 oa:end "35"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:06:42.990[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_82df9498-9450-487e-a27c-42fda301a4a6> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "26"^^xsd:nonNegativeInteger .
    _:b1 oa:end "35"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:06:42.990[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:972f3a4a-4f84-4085-845b-b14452f8f01f> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_82df9498-9450-487e-a27c-42fda301a4a6> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "26"^^xsd:nonNegativeInteger .
    _:b1 oa:end "35"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:06:42.996[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[io-8323-exec-10][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 157 ms
[2m2023-10-27 14:07:15.955[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9","outGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9"}
[2m2023-10-27 14:07:15.955[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9","outGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9"}
[2m2023-10-27 14:07:15.956[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9"},"inGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9","outGraph":"urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9"}
[2m2023-10-27 14:07:15.956[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@41f2dd4a
[2m2023-10-27 14:07:15.969[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@ef3a39c
[2m2023-10-27 14:07:15.970[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:07:15.972[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:07:15.973[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:07:15.979[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f
[2m2023-10-27 14:07:15.980[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f found in urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9 at http://localhost:8080/sparql
[2m2023-10-27 14:07:15.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Which started first: impressionism or expressionism (art movements)? 
[2m2023-10-27 14:07:15.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Which started first: impressionism or expressionism (art movements)?
[2m2023-10-27 14:07:15.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+started+first%3A+impressionism+or+expressionism+%28art+movements%29%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:15.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Which+started+first%3A+impressionism+or+expressionism+%28art+movements%29%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:15.982[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:07:15.982[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1694464597
[2m2023-10-27 14:07:16.104[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@7692b910
[2m2023-10-27 14:07:16.104[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:07:16.104[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:07:16.104[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+started+first%3A+impressionism+or+expressionism+%28art+movements%29%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":21,"end":34,"spot":"impressionism","confidence":0.8851,"id":15169,"title":"Impressionism","uri":"http://en.wikipedia.org/wiki/Impressionism","abstract":"Impressionism was a 19th-century art movement characterized by relatively small, thin, yet visible brush strokes, open composition, emphasis on accurate depiction of light in its changing qualities (often accentuating the effects of the passage of time), ordinary subject matter, unusual visual angles, and inclusion of movement as a crucial element of human perception and experience. Impressionism originated with a group of Paris-based artists whose independent exhibitions brought them to prominence during the 1870s and 1880s.","label":"Impressionist","categories":["Art movements","Articles which contain graphical timelines","French art","Impressionism"],"types":[]},{"start":38,"end":51,"spot":"expressionism","confidence":0.8513,"id":102495,"title":"Expressionism","uri":"http://en.wikipedia.org/wiki/Expressionism","abstract":"Expressionism is a modernist movement, initially in poetry and painting, originating in Northern Europe around the beginning of the 20th century. Its typical trait is to present the world solely from a subjective perspective, distorting it radically for emotional effect in order to evoke moods or ideas. Expressionist artists have sought to express the meaning of emotional experience rather than physical reality.","label":"Expressionism","categories":["Expressionism","German literary movements"],"types":[]},{"start":53,"end":66,"spot":"art movements","confidence":0.751,"id":228568,"title":"Art movement","uri":"http://en.wikipedia.org/wiki/Art_movement","abstract":"An art movement is a tendency or style in art with a specific common philosophy or goal, followed by a group of artists during a specific period of time, (usually a few months, years or decades) or, at least, with the heyday of the movement defined within a number of years. Art movements were especially important in modern art, when each consecutive movement was considered a new avant-garde movement. Western art had been, from the Renaissance up to the middle of the 19th century, underpinned by the logic of perspective and an attempt to reproduce an illusion of visible reality (figurative art). By the end of the 19th century many artists felt a need to create a new style which would encompass the fundamental changes taking place in technology, science and philosophy (abstract art).","label":"Art movement","categories":["Art history","Art movements","Style","Visual arts"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:07:16.086"}
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":21,"end":34,"spot":"impressionism","confidence":0.8851,"id":15169,"title":"Impressionism","uri":"http://en.wikipedia.org/wiki/Impressionism","abstract":"Impressionism was a 19th-century art movement characterized by relatively small, thin, yet visible brush strokes, open composition, emphasis on accurate depiction of light in its changing qualities (often accentuating the effects of the passage of time), ordinary subject matter, unusual visual angles, and inclusion of movement as a crucial element of human perception and experience. Impressionism originated with a group of Paris-based artists whose independent exhibitions brought them to prominence during the 1870s and 1880s.","label":"Impressionist","categories":["Art movements","Articles which contain graphical timelines","French art","Impressionism"],"types":[]}
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 21
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 34
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":38,"end":51,"spot":"expressionism","confidence":0.8513,"id":102495,"title":"Expressionism","uri":"http://en.wikipedia.org/wiki/Expressionism","abstract":"Expressionism is a modernist movement, initially in poetry and painting, originating in Northern Europe around the beginning of the 20th century. Its typical trait is to present the world solely from a subjective perspective, distorting it radically for emotional effect in order to evoke moods or ideas. Expressionist artists have sought to express the meaning of emotional experience rather than physical reality.","label":"Expressionism","categories":["Expressionism","German literary movements"],"types":[]}
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 38
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 51
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":53,"end":66,"spot":"art movements","confidence":0.751,"id":228568,"title":"Art movement","uri":"http://en.wikipedia.org/wiki/Art_movement","abstract":"An art movement is a tendency or style in art with a specific common philosophy or goal, followed by a group of artists during a specific period of time, (usually a few months, years or decades) or, at least, with the heyday of the movement defined within a number of years. Art movements were especially important in modern art, when each consecutive movement was considered a new avant-garde movement. Western art had been, from the Renaissance up to the middle of the 19th century, underpinned by the logic of perspective and an attempt to reproduce an illusion of visible reality (figurative art). By the end of the 19th century many artists felt a need to create a new style which would encompass the fundamental changes taking place in technology, science and philosophy (abstract art).","label":"Art movement","categories":["Art history","Art movements","Style","Visual arts"],"types":[]}
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 53
[2m2023-10-27 14:07:16.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 66
[2m2023-10-27 14:07:16.109[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f
[2m2023-10-27 14:07:16.109[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@21dd2205
[2m2023-10-27 14:07:16.109[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:07:16.110[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "21"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.110[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "21"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.110[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "21"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.116[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@32218ae1
[2m2023-10-27 14:07:16.116[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:07:16.117[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "38"^^xsd:nonNegativeInteger .
    _:b1 oa:end "51"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.117[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "38"^^xsd:nonNegativeInteger .
    _:b1 oa:end "51"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.118[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "38"^^xsd:nonNegativeInteger .
    _:b1 oa:end "51"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.123[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@e2fc730
[2m2023-10-27 14:07:16.123[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:07:16.124[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "53"^^xsd:nonNegativeInteger .
    _:b1 oa:end "66"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.124[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "53"^^xsd:nonNegativeInteger .
    _:b1 oa:end "66"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.124[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8679a0fd-2ffc-4b57-ba3b-e0133ecf91a9> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2fa14be7-57ce-48c1-bb8e-170cacd4502f> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "53"^^xsd:nonNegativeInteger .
    _:b1 oa:end "66"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:16.129[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 174 ms
[2m2023-10-27 14:07:33.480[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4","outGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4"}
[2m2023-10-27 14:07:33.480[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4","outGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4"}
[2m2023-10-27 14:07:33.480[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4"},"inGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4","outGraph":"urn:graph:2b57545d-73ce-4504-8503-786505d360a4"}
[2m2023-10-27 14:07:33.480[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@4ac19e20
[2m2023-10-27 14:07:33.487[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@4b95413c
[2m2023-10-27 14:07:33.487[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:07:33.488[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:2b57545d-73ce-4504-8503-786505d360a4>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:07:33.488[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:2b57545d-73ce-4504-8503-786505d360a4>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:07:33.493[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_179e6719-480f-47cf-9cad-d93d669d9f03
[2m2023-10-27 14:07:33.493[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_179e6719-480f-47cf-9cad-d93d669d9f03 found in urn:graph:2b57545d-73ce-4504-8503-786505d360a4 at http://localhost:8080/sparql
[2m2023-10-27 14:07:33.495[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation has population of Isfahan increased at any point after 2006? 
[2m2023-10-27 14:07:33.495[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question has population of Isfahan increased at any point after 2006?
[2m2023-10-27 14:07:33.495[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=has+population+of+Isfahan+increased+at+any+point+after+2006%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:33.495[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=has+population+of+Isfahan+increased+at+any+point+after+2006%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:33.495[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:07:33.495[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1822845999
[2m2023-10-27 14:07:33.621[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@3c3a1d30
[2m2023-10-27 14:07:33.621[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:07:33.621[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:07:33.621[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=has+population+of+Isfahan+increased+at+any+point+after+2006%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:33.621[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":18,"end":25,"spot":"Isfahan","confidence":0.8428,"id":223149,"title":"Isfahan","uri":"http://en.wikipedia.org/wiki/Isfahan","abstract":"Isfahan (also rendered as Ispahan) is a major city in the Central District of the Isfahan Province of Iran. It is located south of Tehran and is the capital of Isfahan Province. The city has a population of approximately 2,220,000, making it the third-largest city in Iran, after Tehran and Mashhad, and the second-largest metropolitan area.","label":"Isfahan","categories":["Achaemenid cities","Cities in Isfahan Province","Former capitals of Iran","Iranian provincial capitals","Isfahan","Parthian cities","Populated places in Isfahan County","Sasanian cities","Seleucid colonies"],"types":["http://dbpedia.org/ontology/City","http://dbpedia.org/ontology/Settlement","http://dbpedia.org/ontology/PopulatedPlace","http://dbpedia.org/ontology/Place","http://dbpedia.org/ontology/Location"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:07:33.594"}
[2m2023-10-27 14:07:33.621[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":18,"end":25,"spot":"Isfahan","confidence":0.8428,"id":223149,"title":"Isfahan","uri":"http://en.wikipedia.org/wiki/Isfahan","abstract":"Isfahan (also rendered as Ispahan) is a major city in the Central District of the Isfahan Province of Iran. It is located south of Tehran and is the capital of Isfahan Province. The city has a population of approximately 2,220,000, making it the third-largest city in Iran, after Tehran and Mashhad, and the second-largest metropolitan area.","label":"Isfahan","categories":["Achaemenid cities","Cities in Isfahan Province","Former capitals of Iran","Iranian provincial capitals","Isfahan","Parthian cities","Populated places in Isfahan County","Sasanian cities","Seleucid colonies"],"types":["http://dbpedia.org/ontology/City","http://dbpedia.org/ontology/Settlement","http://dbpedia.org/ontology/PopulatedPlace","http://dbpedia.org/ontology/Place","http://dbpedia.org/ontology/Location"]}
[2m2023-10-27 14:07:33.621[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 18
[2m2023-10-27 14:07:33.621[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 25
[2m2023-10-27 14:07:33.625[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_179e6719-480f-47cf-9cad-d93d669d9f03
[2m2023-10-27 14:07:33.626[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@7accb409
[2m2023-10-27 14:07:33.626[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:07:33.627[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:2b57545d-73ce-4504-8503-786505d360a4> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_179e6719-480f-47cf-9cad-d93d669d9f03> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "18"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:33.627[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:2b57545d-73ce-4504-8503-786505d360a4> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_179e6719-480f-47cf-9cad-d93d669d9f03> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "18"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:33.627[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:2b57545d-73ce-4504-8503-786505d360a4> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_179e6719-480f-47cf-9cad-d93d669d9f03> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "18"^^xsd:nonNegativeInteger .
    _:b1 oa:end "25"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:33.633[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-4][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 153 ms
[2m2023-10-27 14:07:35.290[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8","outGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8"}
[2m2023-10-27 14:07:35.290[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8","outGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8"}
[2m2023-10-27 14:07:35.290[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8"},"inGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8","outGraph":"urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8"}
[2m2023-10-27 14:07:35.291[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@8740b8c
[2m2023-10-27 14:07:35.301[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@3b62f257
[2m2023-10-27 14:07:35.301[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:07:35.303[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:07:35.303[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:07:35.309[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_3a239763-fc3c-4cf8-bc37-cdec18cd19e6
[2m2023-10-27 14:07:35.309[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_3a239763-fc3c-4cf8-bc37-cdec18cd19e6 found in urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8 at http://localhost:8080/sparql
[2m2023-10-27 14:07:35.311[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation How many of Reinhold Messner's brothers still live? 
[2m2023-10-27 14:07:35.311[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question How many of Reinhold Messner's brothers still live?
[2m2023-10-27 14:07:35.311[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+of+Reinhold+Messner%27s+brothers+still+live%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:35.311[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+of+Reinhold+Messner%27s+brothers+still+live%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:35.311[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:07:35.312[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=85584210
[2m2023-10-27 14:07:35.360[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@32879dd8
[2m2023-10-27 14:07:35.361[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:07:35.361[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:07:35.361[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+of+Reinhold+Messner%27s+brothers+still+live%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:07:35.361[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":12,"end":28,"spot":"Reinhold Messner","confidence":0.8609,"id":255486,"title":"Reinhold Messner","uri":"http://en.wikipedia.org/wiki/Reinhold_Messner","abstract":"Reinhold Andreas Messner (born 17 September 1944) is an Italian mountaineer, explorer, and author from South Tyrol. He made the first solo ascent of Mount Everest and, along with Peter Habeler, the first ascent of Everest without supplemental oxygen. He was the first climber to ascend all 14 peaks over above sea level and he also did it without supplementary oxygen. Messner was the first to cross Antarctica and Greenland with neither snowmobiles nor dog sleds and also crossed the Gobi Desert alone. He is widely considered as the greatest mountaineer of all time.","label":"Reinhold Messner","categories":["20th-century Italian politicians","21st-century Italian politicians","Cryptozoologists","Federation of the Greens MEPs","Free soloists","Germanophone Italian people","Italian explorers","Italian mountain climbers","Living people","MEPs for Italy 1999–2004","People from Brixen","Politicians of South Tyrol","Recipients of the Royal Geographical Society Patron's Medal","Summiters of all 14 eight-thousanders","Summiters of the Seven Summits","Year of birth missing (living people)"],"types":["http://dbpedia.org/ontology/Politician","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:07:35.341"}
[2m2023-10-27 14:07:35.361[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":12,"end":28,"spot":"Reinhold Messner","confidence":0.8609,"id":255486,"title":"Reinhold Messner","uri":"http://en.wikipedia.org/wiki/Reinhold_Messner","abstract":"Reinhold Andreas Messner (born 17 September 1944) is an Italian mountaineer, explorer, and author from South Tyrol. He made the first solo ascent of Mount Everest and, along with Peter Habeler, the first ascent of Everest without supplemental oxygen. He was the first climber to ascend all 14 peaks over above sea level and he also did it without supplementary oxygen. Messner was the first to cross Antarctica and Greenland with neither snowmobiles nor dog sleds and also crossed the Gobi Desert alone. He is widely considered as the greatest mountaineer of all time.","label":"Reinhold Messner","categories":["20th-century Italian politicians","21st-century Italian politicians","Cryptozoologists","Federation of the Greens MEPs","Free soloists","Germanophone Italian people","Italian explorers","Italian mountain climbers","Living people","MEPs for Italy 1999–2004","People from Brixen","Politicians of South Tyrol","Recipients of the Royal Geographical Society Patron's Medal","Summiters of all 14 eight-thousanders","Summiters of the Seven Summits","Year of birth missing (living people)"],"types":["http://dbpedia.org/ontology/Politician","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}
[2m2023-10-27 14:07:35.361[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 12
[2m2023-10-27 14:07:35.361[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 28
[2m2023-10-27 14:07:35.366[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_3a239763-fc3c-4cf8-bc37-cdec18cd19e6
[2m2023-10-27 14:07:35.366[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@3b70d176
[2m2023-10-27 14:07:35.366[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:07:35.368[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_3a239763-fc3c-4cf8-bc37-cdec18cd19e6> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "28"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:35.368[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_3a239763-fc3c-4cf8-bc37-cdec18cd19e6> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "28"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:35.368[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:1aa1eaef-af11-4fec-a53e-812b32330dc8> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_3a239763-fc3c-4cf8-bc37-cdec18cd19e6> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "12"^^xsd:nonNegativeInteger .
    _:b1 oa:end "28"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:07:35.374[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 84 ms
[2m2023-10-27 14:08:04.972[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86","outGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86"}
[2m2023-10-27 14:08:04.973[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86","outGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86"}
[2m2023-10-27 14:08:04.973[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86"},"inGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86","outGraph":"urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86"}
[2m2023-10-27 14:08:04.973[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@41472ae4
[2m2023-10-27 14:08:04.980[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@7a9708fb
[2m2023-10-27 14:08:04.981[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:08:04.982[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:04.982[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:04.987[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8
[2m2023-10-27 14:08:04.987[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8 found in urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86 at http://localhost:8080/sparql
[2m2023-10-27 14:08:04.988[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation is there female main character in hunter x hunter? 
[2m2023-10-27 14:08:04.988[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question is there female main character in hunter x hunter?
[2m2023-10-27 14:08:04.988[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=is+there+female+main+character+in+hunter+x+hunter%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:04.988[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=is+there+female+main+character+in+hunter+x+hunter%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:04.988[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:08:04.989[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-191225740
[2m2023-10-27 14:08:05.153[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@68ab5eae
[2m2023-10-27 14:08:05.153[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:08:05.153[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:08:05.153[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=is+there+female+main+character+in+hunter+x+hunter%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:05.153[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":16,"end":30,"spot":"main character","confidence":0.6301,"id":68315,"title":"Protagonist","uri":"http://en.wikipedia.org/wiki/Protagonist","abstract":"A protagonist is the main character of a story. The protagonist makes key decisions that affect the plot, primarily influencing the story and propelling it forward, and is often the character who faces the most significant obstacles. If a story contains a subplot, or is a narrative made up of several stories, then each subplot may have its own protagonist.","label":"Protagonist","categories":["Ancient Greek theatre","Protagonists by role","Psychodrama"],"types":[]},{"start":34,"end":49,"spot":"hunter x hunter","confidence":0.8917,"id":771172,"title":"Hunter × Hunter","uri":"http://en.wikipedia.org/wiki/Hunter_%C3%97_Hunter","abstract":"Hunter × Hunter (stylized as HUNTER×HUNTER and pronounced \"hunter hunter\") is a Japanese manga series written and illustrated by Yoshihiro Togashi. It has been serialized in Shueisha's shōnen manga magazine Weekly Shōnen Jump since March 1998, although the manga has frequently gone on extended hiatuses since 2006. Its chapters have been collected in 37 tankōbon volumes as of November 2022. The story focuses on a young boy named Gon Freecss who discovers that his father, who left him at a young age, is actually a world-renowned Hunter, a licensed professional who specializes in fantastical pursuits such as locating rare or unidentified animal species, treasure hunting, surveying unexplored enclaves, or hunting down lawless individuals. Gon departs on a journey to become a Hunter and eventually find his father. Along the way, Gon meets various other Hunters and encounters the paranormal.","label":"Hunter × Hunter","categories":["1998 manga","1999 anime television series debuts","2002 anime OVAs","2011 Japanese television series debuts","Adventure anime and manga","Animated films based on manga","Anime series based on manga","Coming-of-age anime and manga","Fantasy anime and manga","Fuji TV original programming","Hunter × Hunter","Japanese-language films","Madhouse (company)","Manga adapted into films","Martial arts anime and manga","Muse Communication","Musicals based on anime and manga","Nippon Animation","Nippon TV original programming","Odex","Shueisha franchises","Shueisha manga","Shōnen manga","Toonami","Viz Media anime","Viz Media manga"],"types":["http://dbpedia.org/ontology/Manga","http://dbpedia.org/ontology/WrittenWork","http://dbpedia.org/ontology/Work","http://dbpedia.org/ontology/Comic"]}],"lang":"en","langConfidence":0.9999,"timestamp":"2023-10-27T12:08:05.135"}
[2m2023-10-27 14:08:05.154[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":16,"end":30,"spot":"main character","confidence":0.6301,"id":68315,"title":"Protagonist","uri":"http://en.wikipedia.org/wiki/Protagonist","abstract":"A protagonist is the main character of a story. The protagonist makes key decisions that affect the plot, primarily influencing the story and propelling it forward, and is often the character who faces the most significant obstacles. If a story contains a subplot, or is a narrative made up of several stories, then each subplot may have its own protagonist.","label":"Protagonist","categories":["Ancient Greek theatre","Protagonists by role","Psychodrama"],"types":[]}
[2m2023-10-27 14:08:05.154[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 16
[2m2023-10-27 14:08:05.154[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 30
[2m2023-10-27 14:08:05.154[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":34,"end":49,"spot":"hunter x hunter","confidence":0.8917,"id":771172,"title":"Hunter × Hunter","uri":"http://en.wikipedia.org/wiki/Hunter_%C3%97_Hunter","abstract":"Hunter × Hunter (stylized as HUNTER×HUNTER and pronounced \"hunter hunter\") is a Japanese manga series written and illustrated by Yoshihiro Togashi. It has been serialized in Shueisha's shōnen manga magazine Weekly Shōnen Jump since March 1998, although the manga has frequently gone on extended hiatuses since 2006. Its chapters have been collected in 37 tankōbon volumes as of November 2022. The story focuses on a young boy named Gon Freecss who discovers that his father, who left him at a young age, is actually a world-renowned Hunter, a licensed professional who specializes in fantastical pursuits such as locating rare or unidentified animal species, treasure hunting, surveying unexplored enclaves, or hunting down lawless individuals. Gon departs on a journey to become a Hunter and eventually find his father. Along the way, Gon meets various other Hunters and encounters the paranormal.","label":"Hunter × Hunter","categories":["1998 manga","1999 anime television series debuts","2002 anime OVAs","2011 Japanese television series debuts","Adventure anime and manga","Animated films based on manga","Anime series based on manga","Coming-of-age anime and manga","Fantasy anime and manga","Fuji TV original programming","Hunter × Hunter","Japanese-language films","Madhouse (company)","Manga adapted into films","Martial arts anime and manga","Muse Communication","Musicals based on anime and manga","Nippon Animation","Nippon TV original programming","Odex","Shueisha franchises","Shueisha manga","Shōnen manga","Toonami","Viz Media anime","Viz Media manga"],"types":["http://dbpedia.org/ontology/Manga","http://dbpedia.org/ontology/WrittenWork","http://dbpedia.org/ontology/Work","http://dbpedia.org/ontology/Comic"]}
[2m2023-10-27 14:08:05.154[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 34
[2m2023-10-27 14:08:05.154[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 49
[2m2023-10-27 14:08:05.158[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8
[2m2023-10-27 14:08:05.159[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@1dc2b4d
[2m2023-10-27 14:08:05.159[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:05.160[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "16"^^xsd:nonNegativeInteger .
    _:b1 oa:end "30"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:05.160[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "16"^^xsd:nonNegativeInteger .
    _:b1 oa:end "30"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:05.160[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "16"^^xsd:nonNegativeInteger .
    _:b1 oa:end "30"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:05.165[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@1beb410a
[2m2023-10-27 14:08:05.165[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:05.166[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "34"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:05.167[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "34"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:05.167[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:d550385e-329e-48c8-a9c6-f8c554392a86> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_18c18c8f-4efd-4060-8681-c5b993cb44f8> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "34"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:05.172[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-8][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 199 ms
[2m2023-10-27 14:08:16.952[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd","outGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd"}
[2m2023-10-27 14:08:16.952[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd","outGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd"}
[2m2023-10-27 14:08:16.952[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd"},"inGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd","outGraph":"urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd"}
[2m2023-10-27 14:08:16.952[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@e41eb39
[2m2023-10-27 14:08:16.960[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@3a986671
[2m2023-10-27 14:08:16.960[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:08:16.960[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:16.961[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:16.965[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_88042cfc-9f78-46c5-9aa5-bfe5b973f544
[2m2023-10-27 14:08:16.965[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_88042cfc-9f78-46c5-9aa5-bfe5b973f544 found in urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd at http://localhost:8080/sparql
[2m2023-10-27 14:08:16.967[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Where was Roland Corporation founded? 
[2m2023-10-27 14:08:16.967[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Where was Roland Corporation founded?
[2m2023-10-27 14:08:16.967[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Where+was+Roland+Corporation+founded%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:16.967[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Where+was+Roland+Corporation+founded%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:16.967[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:08:16.968[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1597811816
[2m2023-10-27 14:08:17.096[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@4ee20775
[2m2023-10-27 14:08:17.096[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:08:17.096[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:08:17.097[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Where+was+Roland+Corporation+founded%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:17.097[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":10,"end":28,"spot":"Roland Corporation","confidence":0.8609,"id":26531,"title":"Roland Corporation","uri":"http://en.wikipedia.org/wiki/Roland_Corporation","abstract":"is a Japanese manufacturer of electronic musical instruments, electronic equipment, and software. It was founded by Ikutaro Kakehashi in Osaka on 18 April 1972. In 2005, its headquarters relocated to Hamamatsu in Shizuoka Prefecture. It has factories in Malaysia, Taiwan, Japan, and the United States. As of 31 March 2010, it employed 2,699 people. In 2014, it was subject to a management buyout by its CEO, Junichi Miki, supported by Taiyo Pacific Partners.","label":"Roland","categories":["1972 establishments in Japan","Audio equipment manufacturers of Japan","Audio mixing console manufacturers","Companies based in Shizuoka Prefecture","Companies listed on the Tokyo Stock Exchange","Electronics companies established in 1972","Guitar amplifier manufacturers","Guitar manufacturing companies","Hamamatsu","Japanese brands","Manufacturers of professional audio equipment","Musical instrument manufacturing companies of Japan","Percussion instrument manufacturing companies","Roland synthesizers","Synthesizer manufacturing companies of Japan"],"types":["http://dbpedia.org/ontology/Company","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/Agent"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:08:17.075"}
[2m2023-10-27 14:08:17.097[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":10,"end":28,"spot":"Roland Corporation","confidence":0.8609,"id":26531,"title":"Roland Corporation","uri":"http://en.wikipedia.org/wiki/Roland_Corporation","abstract":"is a Japanese manufacturer of electronic musical instruments, electronic equipment, and software. It was founded by Ikutaro Kakehashi in Osaka on 18 April 1972. In 2005, its headquarters relocated to Hamamatsu in Shizuoka Prefecture. It has factories in Malaysia, Taiwan, Japan, and the United States. As of 31 March 2010, it employed 2,699 people. In 2014, it was subject to a management buyout by its CEO, Junichi Miki, supported by Taiyo Pacific Partners.","label":"Roland","categories":["1972 establishments in Japan","Audio equipment manufacturers of Japan","Audio mixing console manufacturers","Companies based in Shizuoka Prefecture","Companies listed on the Tokyo Stock Exchange","Electronics companies established in 1972","Guitar amplifier manufacturers","Guitar manufacturing companies","Hamamatsu","Japanese brands","Manufacturers of professional audio equipment","Musical instrument manufacturing companies of Japan","Percussion instrument manufacturing companies","Roland synthesizers","Synthesizer manufacturing companies of Japan"],"types":["http://dbpedia.org/ontology/Company","http://dbpedia.org/ontology/Organisation","http://dbpedia.org/ontology/Agent"]}
[2m2023-10-27 14:08:17.097[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 10
[2m2023-10-27 14:08:17.097[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 28
[2m2023-10-27 14:08:17.104[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_88042cfc-9f78-46c5-9aa5-bfe5b973f544
[2m2023-10-27 14:08:17.104[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@4ffb35b3
[2m2023-10-27 14:08:17.105[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:17.106[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_88042cfc-9f78-46c5-9aa5-bfe5b973f544> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "10"^^xsd:nonNegativeInteger .
    _:b1 oa:end "28"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:17.108[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_88042cfc-9f78-46c5-9aa5-bfe5b973f544> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "10"^^xsd:nonNegativeInteger .
    _:b1 oa:end "28"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:17.108[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:8e55cdad-358e-455a-8450-6b327d6b52dd> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_88042cfc-9f78-46c5-9aa5-bfe5b973f544> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "10"^^xsd:nonNegativeInteger .
    _:b1 oa:end "28"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:17.113[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-9][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 161 ms
[2m2023-10-27 14:08:24.298[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09","outGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09"}
[2m2023-10-27 14:08:24.298[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09","outGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09"}
[2m2023-10-27 14:08:24.298[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09"},"inGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09","outGraph":"urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09"}
[2m2023-10-27 14:08:24.298[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@62c26ab4
[2m2023-10-27 14:08:24.308[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@79b9e51e
[2m2023-10-27 14:08:24.308[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:08:24.309[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:24.309[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:24.316[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b
[2m2023-10-27 14:08:24.316[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b found in urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09 at http://localhost:8080/sparql
[2m2023-10-27 14:08:24.318[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Which started first: impressionism or expressionism (art movements)? 
[2m2023-10-27 14:08:24.318[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Which started first: impressionism or expressionism (art movements)?
[2m2023-10-27 14:08:24.318[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+started+first%3A+impressionism+or+expressionism+%28art+movements%29%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:24.318[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Which+started+first%3A+impressionism+or+expressionism+%28art+movements%29%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:24.318[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:08:24.319[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1694464597
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@401ff474
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:08:24.450[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+started+first%3A+impressionism+or+expressionism+%28art+movements%29%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":21,"end":34,"spot":"impressionism","confidence":0.8851,"id":15169,"title":"Impressionism","uri":"http://en.wikipedia.org/wiki/Impressionism","abstract":"Impressionism was a 19th-century art movement characterized by relatively small, thin, yet visible brush strokes, open composition, emphasis on accurate depiction of light in its changing qualities (often accentuating the effects of the passage of time), ordinary subject matter, unusual visual angles, and inclusion of movement as a crucial element of human perception and experience. Impressionism originated with a group of Paris-based artists whose independent exhibitions brought them to prominence during the 1870s and 1880s.","label":"Impressionist","categories":["Art movements","Articles which contain graphical timelines","French art","Impressionism"],"types":[]},{"start":38,"end":51,"spot":"expressionism","confidence":0.8513,"id":102495,"title":"Expressionism","uri":"http://en.wikipedia.org/wiki/Expressionism","abstract":"Expressionism is a modernist movement, initially in poetry and painting, originating in Northern Europe around the beginning of the 20th century. Its typical trait is to present the world solely from a subjective perspective, distorting it radically for emotional effect in order to evoke moods or ideas. Expressionist artists have sought to express the meaning of emotional experience rather than physical reality.","label":"Expressionism","categories":["Expressionism","German literary movements"],"types":[]},{"start":53,"end":66,"spot":"art movements","confidence":0.751,"id":228568,"title":"Art movement","uri":"http://en.wikipedia.org/wiki/Art_movement","abstract":"An art movement is a tendency or style in art with a specific common philosophy or goal, followed by a group of artists during a specific period of time, (usually a few months, years or decades) or, at least, with the heyday of the movement defined within a number of years. Art movements were especially important in modern art, when each consecutive movement was considered a new avant-garde movement. Western art had been, from the Renaissance up to the middle of the 19th century, underpinned by the logic of perspective and an attempt to reproduce an illusion of visible reality (figurative art). By the end of the 19th century many artists felt a need to create a new style which would encompass the fundamental changes taking place in technology, science and philosophy (abstract art).","label":"Art movement","categories":["Art history","Art movements","Style","Visual arts"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:08:24.430"}
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":21,"end":34,"spot":"impressionism","confidence":0.8851,"id":15169,"title":"Impressionism","uri":"http://en.wikipedia.org/wiki/Impressionism","abstract":"Impressionism was a 19th-century art movement characterized by relatively small, thin, yet visible brush strokes, open composition, emphasis on accurate depiction of light in its changing qualities (often accentuating the effects of the passage of time), ordinary subject matter, unusual visual angles, and inclusion of movement as a crucial element of human perception and experience. Impressionism originated with a group of Paris-based artists whose independent exhibitions brought them to prominence during the 1870s and 1880s.","label":"Impressionist","categories":["Art movements","Articles which contain graphical timelines","French art","Impressionism"],"types":[]}
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 21
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 34
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":38,"end":51,"spot":"expressionism","confidence":0.8513,"id":102495,"title":"Expressionism","uri":"http://en.wikipedia.org/wiki/Expressionism","abstract":"Expressionism is a modernist movement, initially in poetry and painting, originating in Northern Europe around the beginning of the 20th century. Its typical trait is to present the world solely from a subjective perspective, distorting it radically for emotional effect in order to evoke moods or ideas. Expressionist artists have sought to express the meaning of emotional experience rather than physical reality.","label":"Expressionism","categories":["Expressionism","German literary movements"],"types":[]}
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 38
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 51
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":53,"end":66,"spot":"art movements","confidence":0.751,"id":228568,"title":"Art movement","uri":"http://en.wikipedia.org/wiki/Art_movement","abstract":"An art movement is a tendency or style in art with a specific common philosophy or goal, followed by a group of artists during a specific period of time, (usually a few months, years or decades) or, at least, with the heyday of the movement defined within a number of years. Art movements were especially important in modern art, when each consecutive movement was considered a new avant-garde movement. Western art had been, from the Renaissance up to the middle of the 19th century, underpinned by the logic of perspective and an attempt to reproduce an illusion of visible reality (figurative art). By the end of the 19th century many artists felt a need to create a new style which would encompass the fundamental changes taking place in technology, science and philosophy (abstract art).","label":"Art movement","categories":["Art history","Art movements","Style","Visual arts"],"types":[]}
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 53
[2m2023-10-27 14:08:24.450[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 66
[2m2023-10-27 14:08:24.460[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b
[2m2023-10-27 14:08:24.461[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@31f9a109
[2m2023-10-27 14:08:24.461[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:24.463[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "21"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.464[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "21"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.464[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "21"^^xsd:nonNegativeInteger .
    _:b1 oa:end "34"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.474[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@75e233d
[2m2023-10-27 14:08:24.474[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:24.475[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "38"^^xsd:nonNegativeInteger .
    _:b1 oa:end "51"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.475[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "38"^^xsd:nonNegativeInteger .
    _:b1 oa:end "51"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.475[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "38"^^xsd:nonNegativeInteger .
    _:b1 oa:end "51"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.483[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@1ebf7b7e
[2m2023-10-27 14:08:24.484[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:24.487[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "53"^^xsd:nonNegativeInteger .
    _:b1 oa:end "66"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.487[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "53"^^xsd:nonNegativeInteger .
    _:b1 oa:end "66"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.487[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:c78c3946-7254-4070-8c76-cd74989f9f09> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_20b032bf-ebbd-4c6a-8d53-8276e5b84d0b> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "53"^^xsd:nonNegativeInteger .
    _:b1 oa:end "66"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:24.495[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-1][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 197 ms
[2m2023-10-27 14:08:26.119[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455","outGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455"}
[2m2023-10-27 14:08:26.119[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455","outGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455"}
[2m2023-10-27 14:08:26.119[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455"},"inGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455","outGraph":"urn:graph:574d4beb-a408-4433-9b71-c6a184d92455"}
[2m2023-10-27 14:08:26.119[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@6d96b5dc
[2m2023-10-27 14:08:26.128[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@6b3dddbc
[2m2023-10-27 14:08:26.129[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:08:26.129[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:26.129[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:08:26.135[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc
[2m2023-10-27 14:08:26.135[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc found in urn:graph:574d4beb-a408-4433-9b71-c6a184d92455 at http://localhost:8080/sparql
[2m2023-10-27 14:08:26.137[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation How many countries have never been members of the UN? 
[2m2023-10-27 14:08:26.137[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question How many countries have never been members of the UN?
[2m2023-10-27 14:08:26.138[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+countries+have+never+been+members+of+the+UN%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:26.138[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+countries+have+never+been+members+of+the+UN%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:26.138[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:08:26.138[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-2119996295
[2m2023-10-27 14:08:26.191[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@33ddbd52
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:08:26.192[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+countries+have+never+been+members+of+the+UN%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":2,"annotations":[{"start":9,"end":18,"spot":"countries","confidence":0.699,"id":21754,"title":"Nation","uri":"http://en.wikipedia.org/wiki/Nation","abstract":"A nation is a large type of social organization where a collective identity has emerged from a combination of shared features across a given population, such as language, history, ethnicity, culture, territory and/or society. Some nations are constructed around ethnicity (see ethnic nationalism) while others are bound by political constitutions (see civic nationalism and multiculturalism).","label":"Nation","categories":["Ethnicity","Nation","Pages using page needed template with unknown parameters","Political geography","Political science terminology","Types of communities"],"types":[]},{"start":35,"end":42,"spot":"members","confidence":0.6928,"id":10890716,"title":"Member state of the European Union","uri":"http://en.wikipedia.org/wiki/Member_state_of_the_European_Union","abstract":"The European Union (EU) is a political and economic union of 27 member states that are party to the EU's founding treaties, and thereby subject to the privileges and obligations of membership. They have agreed by the treaties to share their own sovereignty through the institutions of the European Union in certain aspects of government. State governments must agree unanimously in the Council for the union to adopt some policies; for others, collective decisions are made by qualified majority voting. These obligations and sharing of sovereignty within the EU (sometimes referred to as supranational) make it unique among international organisations, as it has established its own legal order which by the provisions of the founding treaties is both legally binding and supreme on all the member states (after a landmark ruling of the ECJ in 1964). A founding principle of the union is subsidiarity, meaning that decisions are taken collectively if and only if they cannot realistically be taken individually.","label":"Member states","categories":["Countries by international organization","Member states of the European Union"],"types":[]},{"start":50,"end":52,"spot":"UN","confidence":0.7326,"id":31769,"title":"United Nations","uri":"http://en.wikipedia.org/wiki/United_Nations","abstract":"The United Nations (UN) is an intergovernmental organization whose stated purposes are to maintain international peace and security, develop friendly relations among nations, achieve international cooperation, and serve as a centre for harmonizing the actions of nations. It is the world's largest international organization. The UN is headquartered in New York City (in the United States, but with certain extraterritorial privileges), and the organization has other offices in Geneva, Nairobi, Vienna, and The Hague, where the International Court of Justice is headquartered.","label":"United Nations","categories":["1945 establishments in the United States","Intergovernmental organizations established by treaty","Organizations awarded Nobel Peace Prizes","Organizations based in New York City","Organizations established in 1945","Peace organizations","Sakharov Prize laureates","United Nations"],"types":["http://dbpedia.org/ontology/Country","http://dbpedia.org/ontology/PopulatedPlace","http://dbpedia.org/ontology/Place","http://dbpedia.org/ontology/Location"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:08:26.170"}
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":9,"end":18,"spot":"countries","confidence":0.699,"id":21754,"title":"Nation","uri":"http://en.wikipedia.org/wiki/Nation","abstract":"A nation is a large type of social organization where a collective identity has emerged from a combination of shared features across a given population, such as language, history, ethnicity, culture, territory and/or society. Some nations are constructed around ethnicity (see ethnic nationalism) while others are bound by political constitutions (see civic nationalism and multiculturalism).","label":"Nation","categories":["Ethnicity","Nation","Pages using page needed template with unknown parameters","Political geography","Political science terminology","Types of communities"],"types":[]}
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 9
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 18
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":35,"end":42,"spot":"members","confidence":0.6928,"id":10890716,"title":"Member state of the European Union","uri":"http://en.wikipedia.org/wiki/Member_state_of_the_European_Union","abstract":"The European Union (EU) is a political and economic union of 27 member states that are party to the EU's founding treaties, and thereby subject to the privileges and obligations of membership. They have agreed by the treaties to share their own sovereignty through the institutions of the European Union in certain aspects of government. State governments must agree unanimously in the Council for the union to adopt some policies; for others, collective decisions are made by qualified majority voting. These obligations and sharing of sovereignty within the EU (sometimes referred to as supranational) make it unique among international organisations, as it has established its own legal order which by the provisions of the founding treaties is both legally binding and supreme on all the member states (after a landmark ruling of the ECJ in 1964). A founding principle of the union is subsidiarity, meaning that decisions are taken collectively if and only if they cannot realistically be taken individually.","label":"Member states","categories":["Countries by international organization","Member states of the European Union"],"types":[]}
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 35
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 42
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":50,"end":52,"spot":"UN","confidence":0.7326,"id":31769,"title":"United Nations","uri":"http://en.wikipedia.org/wiki/United_Nations","abstract":"The United Nations (UN) is an intergovernmental organization whose stated purposes are to maintain international peace and security, develop friendly relations among nations, achieve international cooperation, and serve as a centre for harmonizing the actions of nations. It is the world's largest international organization. The UN is headquartered in New York City (in the United States, but with certain extraterritorial privileges), and the organization has other offices in Geneva, Nairobi, Vienna, and The Hague, where the International Court of Justice is headquartered.","label":"United Nations","categories":["1945 establishments in the United States","Intergovernmental organizations established by treaty","Organizations awarded Nobel Peace Prizes","Organizations based in New York City","Organizations established in 1945","Peace organizations","Sakharov Prize laureates","United Nations"],"types":["http://dbpedia.org/ontology/Country","http://dbpedia.org/ontology/PopulatedPlace","http://dbpedia.org/ontology/Place","http://dbpedia.org/ontology/Location"]}
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 50
[2m2023-10-27 14:08:26.192[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 52
[2m2023-10-27 14:08:26.196[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc
[2m2023-10-27 14:08:26.196[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@d8bb43f
[2m2023-10-27 14:08:26.197[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:26.198[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "18"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.198[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "18"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.198[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "18"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.205[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@4aea9c21
[2m2023-10-27 14:08:26.205[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:26.206[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "35"^^xsd:nonNegativeInteger .
    _:b1 oa:end "42"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.206[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "35"^^xsd:nonNegativeInteger .
    _:b1 oa:end "42"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.206[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "35"^^xsd:nonNegativeInteger .
    _:b1 oa:end "42"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.212[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@4fbf68fd
[2m2023-10-27 14:08:26.212[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:08:26.213[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "50"^^xsd:nonNegativeInteger .
    _:b1 oa:end "52"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.213[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "50"^^xsd:nonNegativeInteger .
    _:b1 oa:end "52"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.213[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:574d4beb-a408-4433-9b71-c6a184d92455> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_11e60d2f-402c-446e-822f-c087afc858cc> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "50"^^xsd:nonNegativeInteger .
    _:b1 oa:end "52"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:08:26.219[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 100 ms
[2m2023-10-27 14:09:11.813[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b","outGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b"}
[2m2023-10-27 14:09:11.813[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b","outGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b"}
[2m2023-10-27 14:09:11.813[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b"},"inGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b","outGraph":"urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b"}
[2m2023-10-27 14:09:11.813[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@137085ff
[2m2023-10-27 14:09:11.825[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@3f2c2d8c
[2m2023-10-27 14:09:11.825[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:09:11.826[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:09:11.826[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:09:11.833[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd
[2m2023-10-27 14:09:11.833[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd found in urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b at http://localhost:8080/sparql
[2m2023-10-27 14:09:11.836[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation How many Oscars did all the movies directed by Hayao Miyazaki combined win? 
[2m2023-10-27 14:09:11.836[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question How many Oscars did all the movies directed by Hayao Miyazaki combined win?
[2m2023-10-27 14:09:11.836[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+Oscars+did+all+the+movies+directed+by+Hayao+Miyazaki+combined+win%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:09:11.836[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+Oscars+did+all+the+movies+directed+by+Hayao+Miyazaki+combined+win%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:09:11.836[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:09:11.837[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=987631136
[2m2023-10-27 14:09:12.055[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@62b052a0
[2m2023-10-27 14:09:12.055[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:09:12.055[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:09:12.055[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=How+many+Oscars+did+all+the+movies+directed+by+Hayao+Miyazaki+combined+win%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:09:12.055[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":3,"annotations":[{"start":9,"end":15,"spot":"Oscars","confidence":0.7615,"id":324,"title":"Academy Awards","uri":"http://en.wikipedia.org/wiki/Academy_Awards","abstract":"The Academy Awards, mainly known as the Oscars, are awards for artistic and technical merit for the film industry. They are presented annually by the Academy of Motion Picture Arts and Sciences (AMPAS), in recognition of excellence in cinematic achievements as assessed by the Academy's voting membership. The Academy Awards are regarded by many as the most prestigious, significant awards in the entertainment industry in the United States and worldwide. The Oscar statuette depicts a knight rendered in the Art Deco style.","label":"Academy Award","categories":["1929 establishments in California","Academy Awards","American annual television specials","American film awards","American live television shows","Annual events in Los Angeles County, California","Awards established in 1929","Cinema of Southern California","Culture of Hollywood, Los Angeles","Events in Los Angeles","Performing arts trophies"],"types":["http://dbpedia.org/ontology/Award"]},{"start":47,"end":61,"spot":"Hayao Miyazaki","confidence":0.907,"id":20312,"title":"Hayao Miyazaki","uri":"http://en.wikipedia.org/wiki/Hayao_Miyazaki","abstract":"is a Japanese animator, filmmaker, and manga artist. A co-founder of Studio Ghibli, he has attained international acclaim as a masterful storyteller and creator of Japanese animated feature films, and is widely regarded as one of the most accomplished filmmakers in the history of animation.","label":"Hayao Miyazaki","categories":["1941 births","Academy Honorary Award recipients","Anime character designers","Anime directors","Annie Award winners","Anti–nuclear power activists","Directors of Best Animated Feature Academy Award winners","Directors of Golden Bear winners","Ecofeminists","Environmental writers","Fantasy artists","Fantasy film directors","Feminist artists","Feminist writers","Gakushuin University alumni","Hayao Miyazaki","Inkpot Award winners","Japanese Shintoists","Japanese animated film directors","Japanese animated film producers","Japanese animators","Japanese cartoonists","Japanese environmentalists","Japanese feminists","Japanese pacifists","Japanese production designers","Japanese screenwriters","Japanese speculative fiction artists","Japanese storyboard artists","Living people","Male feminists","Manga artists","Nebula Award winners","People from Bunkyō","Persons of Cultural Merit","Science Fiction Hall of Fame inductees","Studio Ghibli people","Topcraft","World Masterpiece Theater series"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:09:12.025"}
[2m2023-10-27 14:09:12.056[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":9,"end":15,"spot":"Oscars","confidence":0.7615,"id":324,"title":"Academy Awards","uri":"http://en.wikipedia.org/wiki/Academy_Awards","abstract":"The Academy Awards, mainly known as the Oscars, are awards for artistic and technical merit for the film industry. They are presented annually by the Academy of Motion Picture Arts and Sciences (AMPAS), in recognition of excellence in cinematic achievements as assessed by the Academy's voting membership. The Academy Awards are regarded by many as the most prestigious, significant awards in the entertainment industry in the United States and worldwide. The Oscar statuette depicts a knight rendered in the Art Deco style.","label":"Academy Award","categories":["1929 establishments in California","Academy Awards","American annual television specials","American film awards","American live television shows","Annual events in Los Angeles County, California","Awards established in 1929","Cinema of Southern California","Culture of Hollywood, Los Angeles","Events in Los Angeles","Performing arts trophies"],"types":["http://dbpedia.org/ontology/Award"]}
[2m2023-10-27 14:09:12.056[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 9
[2m2023-10-27 14:09:12.056[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 15
[2m2023-10-27 14:09:12.056[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":47,"end":61,"spot":"Hayao Miyazaki","confidence":0.907,"id":20312,"title":"Hayao Miyazaki","uri":"http://en.wikipedia.org/wiki/Hayao_Miyazaki","abstract":"is a Japanese animator, filmmaker, and manga artist. A co-founder of Studio Ghibli, he has attained international acclaim as a masterful storyteller and creator of Japanese animated feature films, and is widely regarded as one of the most accomplished filmmakers in the history of animation.","label":"Hayao Miyazaki","categories":["1941 births","Academy Honorary Award recipients","Anime character designers","Anime directors","Annie Award winners","Anti–nuclear power activists","Directors of Best Animated Feature Academy Award winners","Directors of Golden Bear winners","Ecofeminists","Environmental writers","Fantasy artists","Fantasy film directors","Feminist artists","Feminist writers","Gakushuin University alumni","Hayao Miyazaki","Inkpot Award winners","Japanese Shintoists","Japanese animated film directors","Japanese animated film producers","Japanese animators","Japanese cartoonists","Japanese environmentalists","Japanese feminists","Japanese pacifists","Japanese production designers","Japanese screenwriters","Japanese speculative fiction artists","Japanese storyboard artists","Living people","Male feminists","Manga artists","Nebula Award winners","People from Bunkyō","Persons of Cultural Merit","Science Fiction Hall of Fame inductees","Studio Ghibli people","Topcraft","World Masterpiece Theater series"],"types":["http://dbpedia.org/ontology/Person","http://dbpedia.org/ontology/Species","http://dbpedia.org/ontology/Eukaryote","http://dbpedia.org/ontology/Animal"]}
[2m2023-10-27 14:09:12.056[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 47
[2m2023-10-27 14:09:12.056[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 61
[2m2023-10-27 14:09:12.061[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd
[2m2023-10-27 14:09:12.061[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@394f97ca
[2m2023-10-27 14:09:12.061[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:09:12.062[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:12.062[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:12.062[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "15"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:12.069[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@5a15509a
[2m2023-10-27 14:09:12.069[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:09:12.071[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "47"^^xsd:nonNegativeInteger .
    _:b1 oa:end "61"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:12.072[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "47"^^xsd:nonNegativeInteger .
    _:b1 oa:end "61"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:12.072[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:3d71fc30-fe2d-4048-9df7-ca8a8d8ae39b> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_096bc22c-77cd-4921-b26b-56aab3597dfd> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "47"^^xsd:nonNegativeInteger .
    _:b1 oa:end "61"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:12.078[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-5][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 265 ms
[2m2023-10-27 14:09:13.273[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf","outGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf"}
[2m2023-10-27 14:09:13.273[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf","outGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf"}
[2m2023-10-27 14:09:13.273[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf"},"inGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf","outGraph":"urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf"}
[2m2023-10-27 14:09:13.273[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@6d10ea0
[2m2023-10-27 14:09:13.292[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@43644904
[2m2023-10-27 14:09:13.293[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:09:13.295[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:09:13.295[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:09:13.301[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303
[2m2023-10-27 14:09:13.301[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303 found in urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf at http://localhost:8080/sparql
[2m2023-10-27 14:09:13.304[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation when was the creator of saturday night live born? 
[2m2023-10-27 14:09:13.304[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question when was the creator of saturday night live born?
[2m2023-10-27 14:09:13.305[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=when+was+the+creator+of+saturday+night+live+born%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:09:13.305[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=when+was+the+creator+of+saturday+night+live+born%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:09:13.305[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:09:13.306[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1996780094
[2m2023-10-27 14:09:13.355[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@79a9fa35
[2m2023-10-27 14:09:13.355[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:09:13.355[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:09:13.355[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=when+was+the+creator+of+saturday+night+live+born%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:09:13.356[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":9,"end":20,"spot":"the creator","confidence":0.678,"id":64622550,"title":"The Creator (2023 film)","uri":"http://en.wikipedia.org/wiki/The_Creator_%282023_film%29","abstract":"The Creator is an upcoming American science fiction action thriller film co-produced and directed by Gareth Edwards, who co-wrote the screenplay with Chris Weitz. The film stars John David Washington, Gemma Chan, Ken Watanabe, Sturgill Simpson, Madeleine Yuna Voyles, and Allison Janney. Taking place in a future impacted by a war between the human race and the forces of artificial intelligence, the film's plot follows an ex-special forces agent who is recruited to hunt down and kill the Creator, who has developed a mysterious weapon with the power to end the war by destroying mankind itself.","label":"The Creator","types":[]},{"start":24,"end":43,"spot":"saturday night live","confidence":0.9117,"id":763013,"title":"Saturday Night Live","uri":"http://en.wikipedia.org/wiki/Saturday_Night_Live","abstract":"Saturday Night Live (often abbreviated to SNL) is an American late-night live television sketch comedy, political satire, and variety show created by Lorne Michaels and developed by Dick Ebersol that airs on NBC and Peacock. Michaels currently serves as the program's showrunner. The show’s premiere was hosted by George Carlin on NBC on October 11, 1975, under the original title NBC's Saturday Night. The show's comedy sketches, which often parody contemporary American culture and politics, are performed by a large and varying cast of repertory and newer cast members. Each episode is hosted by a celebrity guest, who usually delivers the opening monologue and performs in sketches with the cast, with featured performances by a musical guest. An episode normally begins with a cold open sketch that ends with someone breaking character and proclaiming, \"Live from New York, it's Saturday Night!\", properly beginning the show.","label":"Saturday Night Live","categories":["1970s American late-night television series","1970s American political comedy television series","1970s American satirical television series","1970s American sketch comedy television series","1970s American variety television series","1975 American television series debuts","1980s American late-night television series","1980s American political comedy television series","1980s American satirical television series","1980s American sketch comedy television series","1980s American variety television series","1990s American late-night television series","1990s American political comedy television series","1990s American satirical television series","1990s American sketch comedy television series","1990s American variety television series","2000s American late-night television series","2000s American political comedy television series","2000s American satirical television series","2000s American sketch comedy television series","2000s American variety television series","2010s American late-night television series","2010s American political comedy television series","2010s American satirical television series","2010s American sketch comedy television series","2010s American variety television series","2020s American late-night television series","2020s American political comedy television series","2020s American satirical television series","2020s American sketch comedy television series","2020s American variety television series","American live television series","American news parodies","American television series with live action and animation","American television shows featuring puppetry","English-language television shows","NBC original programming","Peabody Award-winning television programs","Political satirical television series","Primetime Emmy Award-winning television series","Primetime Emmy Award for Outstanding Variety Series winners","Saturday Night Live","Saturday mass media","Television franchises","Television series by Broadway Video","Television series by Universal Television","Television shows filmed in New York City"],"types":["http://dbpedia.org/ontology/TelevisionShow","http://dbpedia.org/ontology/Work"]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:09:13.334"}
[2m2023-10-27 14:09:13.356[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":9,"end":20,"spot":"the creator","confidence":0.678,"id":64622550,"title":"The Creator (2023 film)","uri":"http://en.wikipedia.org/wiki/The_Creator_%282023_film%29","abstract":"The Creator is an upcoming American science fiction action thriller film co-produced and directed by Gareth Edwards, who co-wrote the screenplay with Chris Weitz. The film stars John David Washington, Gemma Chan, Ken Watanabe, Sturgill Simpson, Madeleine Yuna Voyles, and Allison Janney. Taking place in a future impacted by a war between the human race and the forces of artificial intelligence, the film's plot follows an ex-special forces agent who is recruited to hunt down and kill the Creator, who has developed a mysterious weapon with the power to end the war by destroying mankind itself.","label":"The Creator","types":[]}
[2m2023-10-27 14:09:13.356[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 9
[2m2023-10-27 14:09:13.356[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 20
[2m2023-10-27 14:09:13.356[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":24,"end":43,"spot":"saturday night live","confidence":0.9117,"id":763013,"title":"Saturday Night Live","uri":"http://en.wikipedia.org/wiki/Saturday_Night_Live","abstract":"Saturday Night Live (often abbreviated to SNL) is an American late-night live television sketch comedy, political satire, and variety show created by Lorne Michaels and developed by Dick Ebersol that airs on NBC and Peacock. Michaels currently serves as the program's showrunner. The show’s premiere was hosted by George Carlin on NBC on October 11, 1975, under the original title NBC's Saturday Night. The show's comedy sketches, which often parody contemporary American culture and politics, are performed by a large and varying cast of repertory and newer cast members. Each episode is hosted by a celebrity guest, who usually delivers the opening monologue and performs in sketches with the cast, with featured performances by a musical guest. An episode normally begins with a cold open sketch that ends with someone breaking character and proclaiming, \"Live from New York, it's Saturday Night!\", properly beginning the show.","label":"Saturday Night Live","categories":["1970s American late-night television series","1970s American political comedy television series","1970s American satirical television series","1970s American sketch comedy television series","1970s American variety television series","1975 American television series debuts","1980s American late-night television series","1980s American political comedy television series","1980s American satirical television series","1980s American sketch comedy television series","1980s American variety television series","1990s American late-night television series","1990s American political comedy television series","1990s American satirical television series","1990s American sketch comedy television series","1990s American variety television series","2000s American late-night television series","2000s American political comedy television series","2000s American satirical television series","2000s American sketch comedy television series","2000s American variety television series","2010s American late-night television series","2010s American political comedy television series","2010s American satirical television series","2010s American sketch comedy television series","2010s American variety television series","2020s American late-night television series","2020s American political comedy television series","2020s American satirical television series","2020s American sketch comedy television series","2020s American variety television series","American live television series","American news parodies","American television series with live action and animation","American television shows featuring puppetry","English-language television shows","NBC original programming","Peabody Award-winning television programs","Political satirical television series","Primetime Emmy Award-winning television series","Primetime Emmy Award for Outstanding Variety Series winners","Saturday Night Live","Saturday mass media","Television franchises","Television series by Broadway Video","Television series by Universal Television","Television shows filmed in New York City"],"types":["http://dbpedia.org/ontology/TelevisionShow","http://dbpedia.org/ontology/Work"]}
[2m2023-10-27 14:09:13.356[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 24
[2m2023-10-27 14:09:13.356[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 43
[2m2023-10-27 14:09:13.362[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303
[2m2023-10-27 14:09:13.362[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@3c0fdcca
[2m2023-10-27 14:09:13.362[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:09:13.364[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "20"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:13.364[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "20"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:13.364[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "9"^^xsd:nonNegativeInteger .
    _:b1 oa:end "20"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:13.679[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@322571e5
[2m2023-10-27 14:09:13.679[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:09:13.681[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "24"^^xsd:nonNegativeInteger .
    _:b1 oa:end "43"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:13.681[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "24"^^xsd:nonNegativeInteger .
    _:b1 oa:end "43"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:13.681[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:ee8833be-f784-4a29-894b-98a76443dcdf> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_4cb17fb4-ceec-4ca8-ad3c-baa29903b303> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "24"^^xsd:nonNegativeInteger .
    _:b1 oa:end "43"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:09:13.694[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-6][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 421 ms
[2m2023-10-27 14:10:24.727[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96","outGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96"}
[2m2023-10-27 14:10:24.727[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96","outGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96"}
[2m2023-10-27 14:10:24.727[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96"},"inGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96","outGraph":"urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96"}
[2m2023-10-27 14:10:24.727[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@11d67b75
[2m2023-10-27 14:10:24.735[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@412c1f3c
[2m2023-10-27 14:10:24.735[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:10:24.737[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:10:24.737[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:10:24.746[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508
[2m2023-10-27 14:10:24.746[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508 found in urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96 at http://localhost:8080/sparql
[2m2023-10-27 14:10:24.748[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Which universities have more than 200000 students? 
[2m2023-10-27 14:10:24.748[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Which universities have more than 200000 students?
[2m2023-10-27 14:10:24.748[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+universities+have+more+than+200000+students%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:10:24.748[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Which+universities+have+more+than+200000+students%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:10:24.748[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:10:24.749[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=-962009526
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@3f42f159
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:10:24.928[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+universities+have+more+than+200000+students%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":1,"annotations":[{"start":6,"end":18,"spot":"universities","confidence":0.7669,"id":19725260,"title":"University","uri":"http://en.wikipedia.org/wiki/University","abstract":"A university is an institution of higher (or tertiary) education and research which awards academic degrees in several academic disciplines. Universities typically offer both undergraduate and postgraduate programs. In the United States, the designation is reserved for colleges that have a graduate school.","label":"University","categories":["Educational stages","Higher education","Types of university or college","Universities and colleges"],"types":[]},{"start":41,"end":49,"spot":"students","confidence":0.7604,"id":155526,"title":"Student","uri":"http://en.wikipedia.org/wiki/Student","abstract":"A student is a person enrolled in a school or other educational institution. In the United Kingdom and most commonwealth countries, a \"student\" attends a secondary school or higher (e.g., college or university); those in primary or elementary schools are \"pupils\".","label":"Student","categories":["Students"],"types":[]}],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:10:24.909"}
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":6,"end":18,"spot":"universities","confidence":0.7669,"id":19725260,"title":"University","uri":"http://en.wikipedia.org/wiki/University","abstract":"A university is an institution of higher (or tertiary) education and research which awards academic degrees in several academic disciplines. Universities typically offer both undergraduate and postgraduate programs. In the United States, the designation is reserved for colleges that have a graduate school.","label":"University","categories":["Educational stages","Higher education","Types of university or college","Universities and colleges"],"types":[]}
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 6
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 18
[2m2023-10-27 14:10:24.928[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: {"start":41,"end":49,"spot":"students","confidence":0.7604,"id":155526,"title":"Student","uri":"http://en.wikipedia.org/wiki/Student","abstract":"A student is a person enrolled in a school or other educational institution. In the United Kingdom and most commonwealth countries, a \"student\" attends a secondary school or higher (e.g., college or university); those in primary or elementary schools are \"pupils\".","label":"Student","categories":["Students"],"types":[]}
[2m2023-10-27 14:10:24.929[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 41
[2m2023-10-27 14:10:24.929[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question: 49
[2m2023-10-27 14:10:24.936[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0/0: qa#Question = http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508
[2m2023-10-27 14:10:24.936[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@48660f5c
[2m2023-10-27 14:10:24.937[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:10:24.938[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "6"^^xsd:nonNegativeInteger .
    _:b1 oa:end "18"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:10:24.938[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "6"^^xsd:nonNegativeInteger .
    _:b1 oa:end "18"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:10:24.938[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "6"^^xsd:nonNegativeInteger .
    _:b1 oa:end "18"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:10:24.944[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/insert_one_annotation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@38698368
[2m2023-10-27 14:10:24.944[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: prefix qa: <http://www.wdaqua.eu/qa#>
prefix oa: <http://www.w3.org/ns/openannotation/core/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

INSERT {
GRAPH ?graph {
    ?a a qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget [
        a    oa:SpecificResource;
        oa:hasSource    ?targetQuestion;
        oa:hasSelector  [
            a oa:TextPositionSelector ;
            oa:start ?start ;
            oa:end  ?end
        ]
    ] ;
    oa:annotatedBy ?application ;
    oa:annotatedAt ?time .
}}
WHERE {
    BIND (IRI(str(RAND())) AS ?a) .
    BIND (now() as ?time) .
}
[2m2023-10-27 14:10:24.945[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated UPDATE query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "41"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:10:24.946[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "41"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:10:24.946[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36mQanaryTripleStoreConnectorQanaryInternal[0;39m [2m:[0;39m UPDATE on http://localhost:8080/sparql: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  xsd:  <http://www.w3.org/2001/XMLSchema#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

INSERT {
  GRAPH <urn:graph:971dbeb5-739c-4756-80c9-19f439f3dd96> {
    ?a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> qa:AnnotationOfSpotInstance .
    ?a oa:hasTarget _:b0 .
    _:b0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:SpecificResource .
    _:b0 oa:hasSource <http://localhost:8080/question/stored-question__text_2b6398ba-6480-4cab-ba11-bdff5bda4508> .
    _:b0 oa:hasSelector _:b1 .
    _:b1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> oa:TextPositionSelector .
    _:b1 oa:start "41"^^xsd:nonNegativeInteger .
    _:b1 oa:end "49"^^xsd:nonNegativeInteger .
    ?a oa:annotatedBy <urn:qanary:DandelionNER> .
    ?a oa:annotatedAt ?time .
  }
}
WHERE
  { BIND(IRI(str(rand())) AS ?a)
    BIND(now() AS ?time)
  }

[2m2023-10-27 14:10:24.951[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-2][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 224 ms
[2m2023-10-27 14:10:27.225[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m annotatequestion: {"values":{"urn:qanary#outGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab","outGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab"}
[2m2023-10-27 14:10:27.225[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m construct QanaryMessage: {"values":{"urn:qanary#outGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab"},"endpoint":"http://localhost:8080/sparql","inGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab","outGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab"}
[2m2023-10-27 14:10:27.225[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryMessage  [0;39m [2m:[0;39m constructed json: {"endpoint":"http://localhost:8080/sparql","values":{"urn:qanary#outGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab","urn:qanary#endpoint":"http://localhost:8080/sparql","urn:qanary#inGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab"},"inGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab","outGraph":"urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab"}
[2m2023-10-27 14:10:27.225[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m process: eu.wdaqua.qanary.commons.QanaryMessage@21922e26
[2m2023-10-27 14:10:27.232[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m filenameWithRelativePath: /queries/select_uri_textual_representation.rq, org.springframework.boot.loader.jar.ZipInflaterInputStream@3f033047
[2m2023-10-27 14:10:27.232[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m readFileFromResourcesWithMap sparqlQueryString: PREFIX qa: <http://www.wdaqua.eu/qa#>
PREFIX oa: <http://www.w3.org/ns/openannotation/core/>
SELECT ?uri 
FROM ?graph { 
  ?q a qa:Question .
  ?a a qa:AnnotationOfTextRepresentation . 
  ?a oa:hasTarget ?q .
  ?a oa:hasBody ?uri .
}
[2m2023-10-27 14:10:27.233[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.t.QanaryTripleStoreConnector    [0;39m [2m:[0;39m generated SELECT query:
PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:10:27.233[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m SPARQL query: PREFIX  qa:   <http://www.wdaqua.eu/qa#>
PREFIX  oa:   <http://www.w3.org/ns/openannotation/core/>

SELECT  ?uri
FROM <urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab>
WHERE
  { ?q  a             qa:Question .
    ?a  a             qa:AnnotationOfTextRepresentation ;
        oa:hasTarget  ?q ;
        oa:hasBody    ?uri
  }

[2m2023-10-27 14:10:27.238[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m 0: qa#Question = http://localhost:8080/question/stored-question__text_43db0f97-6a1d-4960-b987-2657be5f72bb
[2m2023-10-27 14:10:27.239[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m uriTextRepresentation http://localhost:8080/question/stored-question__text_43db0f97-6a1d-4960-b987-2657be5f72bb found in urn:graph:cfa85e4b-413b-4a6d-9e4e-a5f2a94b8fab at http://localhost:8080/sparql
[2m2023-10-27 14:10:27.240[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36meu.wdaqua.qanary.commons.QanaryQuestion [0;39m [2m:[0;39m textRepresentation Which creator of The OA also acted in it? 
[2m2023-10-27 14:10:27.240[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m Question Which creator of The OA also acted in it?
[2m2023-10-27 14:10:27.240[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m URL: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+creator+of+The+OA+also+acted+in+it%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:10:27.240[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m HTTP GET https://api.dandelion.eu/datatxt/nex/v1/?text=Which+creator+of+The+OA+also+acted+in+it%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:10:27.240[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Accept=[text/plain, application/xml, text/xml, application/json, application/cbor, application/*+xml, application/*+json, */*]
[2m2023-10-27 14:10:27.240[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.CacheOfRestTemplateResponse     [0;39m [2m:[0;39m CacheResponse.getResponse: cache miss --> send request, hascode=1608248862
[2m2023-10-27 14:10:27.289[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36mq.c.RestTemplateCacheResponseInterceptor[0;39m [2m:[0;39m response received: org.springframework.http.client.BufferingClientHttpResponseWrapper@33a08a7e
[2m2023-10-27 14:10:27.289[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Response 200 OK
[2m2023-10-27 14:10:27.289[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.c.RestTemplateWithCaching         [0;39m [2m:[0;39m Reading to [java.lang.String] as "application/json;charset=UTF-8"
[2m2023-10-27 14:10:27.289[0;39m [32m INFO[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m request was actually executed: https://api.dandelion.eu/datatxt/nex/v1/?text=Which+creator+of+The+OA+also+acted+in+it%3F&include=types%2Cabstract%2Ccategories&token=7d29f867b39a432e8884e99f69c194c9
[2m2023-10-27 14:10:27.289[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.dandelion.ner.Dandelion [0;39m [2m:[0;39m JSON: {"time":0,"annotations":[],"lang":"en","langConfidence":1.0,"timestamp":"2023-10-27T12:10:27.267"}
[2m2023-10-27 14:10:27.289[0;39m [32mDEBUG[0;39m [35m12774[0;39m [2m---[0;39m [2m[nio-8323-exec-3][0;39m [36me.w.q.component.QanaryServiceController [0;39m [2m:[0;39m processing took: 64 ms
